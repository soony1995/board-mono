{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getPaths = require(\"./getPaths\");\nconst forEachBail = require(\"./forEachBail\");\nmodule.exports = class SymlinkPlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n      const pathsResult = getPaths(request.path);\n      const pathSeqments = pathsResult.seqments;\n      const paths = pathsResult.paths;\n      let containsSymlink = false;\n      forEachBail.withIndex(paths, (path, idx, callback) => {\n        fs.readlink(path, (err, result) => {\n          if (!err && result) {\n            pathSeqments[idx] = result;\n            containsSymlink = true;\n            // Shortcut when absolute symlink found\n            if (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result)) return callback(null, idx);\n          }\n          callback();\n        });\n      }, (err, idx) => {\n        if (!containsSymlink) return callback();\n        const resultSeqments = typeof idx === \"number\" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();\n        const result = resultSeqments.reverse().reduce((a, b) => {\n          return resolver.join(a, b);\n        });\n        const obj = Object.assign({}, request, {\n          path: result\n        });\n        resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n      });\n    });\n  }\n};","map":{"version":3,"names":["getPaths","require","forEachBail","module","exports","SymlinkPlugin","constructor","source","target","apply","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","pathsResult","path","pathSeqments","seqments","paths","containsSymlink","withIndex","idx","readlink","err","result","test","resultSeqments","slice","reverse","reduce","a","b","join","obj","Object","assign","doResolve"],"sources":["/home/soon/bulletin-board/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getPaths = require(\"./getPaths\");\nconst forEachBail = require(\"./forEachBail\");\n\nmodule.exports = class SymlinkPlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst pathsResult = getPaths(request.path);\n\t\t\t\tconst pathSeqments = pathsResult.seqments;\n\t\t\t\tconst paths = pathsResult.paths;\n\n\t\t\t\tlet containsSymlink = false;\n\t\t\t\tforEachBail.withIndex(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(path, idx, callback) => {\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\n\t\t\t\t\t\t\tif (!err && result) {\n\t\t\t\t\t\t\t\tpathSeqments[idx] = result;\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\n\t\t\t\t\t\t\t\tif (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result))\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t(err, idx) => {\n\t\t\t\t\t\tif (!containsSymlink) return callback();\n\t\t\t\t\t\tconst resultSeqments =\n\t\t\t\t\t\t\ttypeof idx === \"number\"\n\t\t\t\t\t\t\t\t? pathSeqments.slice(0, idx + 1)\n\t\t\t\t\t\t\t\t: pathSeqments.slice();\n\t\t\t\t\t\tconst result = resultSeqments.reverse().reduce((a, b) => {\n\t\t\t\t\t\t\treturn resolver.join(a, b);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\t\t\tpath: result\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;AACtC,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC;AAE5CE,MAAM,CAACC,OAAO,GAAG,MAAMC,aAAa,CAAC;EACpCC,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAC3B,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;EAEAC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/C,MAAMI,EAAE,GAAGF,QAAQ,CAACG,UAAU;IAC9BH,QAAQ,CACNI,OAAO,CAAC,IAAI,CAACP,MAAM,CAAC,CACpBQ,QAAQ,CAAC,eAAe,EAAE,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACjE,MAAMC,WAAW,GAAGnB,QAAQ,CAACgB,OAAO,CAACI,IAAI,CAAC;MAC1C,MAAMC,YAAY,GAAGF,WAAW,CAACG,QAAQ;MACzC,MAAMC,KAAK,GAAGJ,WAAW,CAACI,KAAK;MAE/B,IAAIC,eAAe,GAAG,KAAK;MAC3BtB,WAAW,CAACuB,SAAS,CACpBF,KAAK,EACL,CAACH,IAAI,EAAEM,GAAG,EAAER,QAAQ,KAAK;QACxBN,EAAE,CAACe,QAAQ,CAACP,IAAI,EAAE,CAACQ,GAAG,EAAEC,MAAM,KAAK;UAClC,IAAI,CAACD,GAAG,IAAIC,MAAM,EAAE;YACnBR,YAAY,CAACK,GAAG,CAAC,GAAGG,MAAM;YAC1BL,eAAe,GAAG,IAAI;YACtB;YACA,IAAI,uBAAuB,CAACM,IAAI,CAACD,MAAM,CAAC,EACvC,OAAOX,QAAQ,CAAC,IAAI,EAAEQ,GAAG,CAAC;UAC5B;UACAR,QAAQ,CAAC,CAAC;QACX,CAAC,CAAC;MACH,CAAC,EACD,CAACU,GAAG,EAAEF,GAAG,KAAK;QACb,IAAI,CAACF,eAAe,EAAE,OAAON,QAAQ,CAAC,CAAC;QACvC,MAAMa,cAAc,GACnB,OAAOL,GAAG,KAAK,QAAQ,GACpBL,YAAY,CAACW,KAAK,CAAC,CAAC,EAAEN,GAAG,GAAG,CAAC,CAAC,GAC9BL,YAAY,CAACW,KAAK,CAAC,CAAC;QACxB,MAAMH,MAAM,GAAGE,cAAc,CAACE,OAAO,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACxD,OAAO1B,QAAQ,CAAC2B,IAAI,CAACF,CAAC,EAAEC,CAAC,CAAC;QAC3B,CAAC,CAAC;QACF,MAAME,GAAG,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAExB,OAAO,EAAE;UACtCI,IAAI,EAAES;QACP,CAAC,CAAC;QACFnB,QAAQ,CAAC+B,SAAS,CACjBjC,MAAM,EACN8B,GAAG,EACH,sBAAsB,GAAGT,MAAM,EAC/BZ,cAAc,EACdC,QACD,CAAC;MACF,CACD,CAAC;IACF,CAAC,CAAC;EACJ;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}