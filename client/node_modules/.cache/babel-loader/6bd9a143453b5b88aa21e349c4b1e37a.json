{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  Tapable,\n  SyncHook,\n  MultiHook\n} = require(\"tapable\");\nconst asyncLib = require(\"neo-async\");\nconst MultiWatching = require(\"./MultiWatching\");\nconst MultiStats = require(\"./MultiStats\");\nconst ConcurrentCompilationError = require(\"./ConcurrentCompilationError\");\nmodule.exports = class MultiCompiler extends Tapable {\n  constructor(compilers) {\n    super();\n    this.hooks = {\n      done: new SyncHook([\"stats\"]),\n      invalid: new MultiHook(compilers.map(c => c.hooks.invalid)),\n      run: new MultiHook(compilers.map(c => c.hooks.run)),\n      watchClose: new SyncHook([]),\n      watchRun: new MultiHook(compilers.map(c => c.hooks.watchRun)),\n      infrastructureLog: new MultiHook(compilers.map(c => c.hooks.infrastructureLog))\n    };\n    if (!Array.isArray(compilers)) {\n      compilers = Object.keys(compilers).map(name => {\n        compilers[name].name = name;\n        return compilers[name];\n      });\n    }\n    this.compilers = compilers;\n    let doneCompilers = 0;\n    let compilerStats = [];\n    let index = 0;\n    for (const compiler of this.compilers) {\n      let compilerDone = false;\n      const compilerIndex = index++;\n      // eslint-disable-next-line no-loop-func\n      compiler.hooks.done.tap(\"MultiCompiler\", stats => {\n        if (!compilerDone) {\n          compilerDone = true;\n          doneCompilers++;\n        }\n        compilerStats[compilerIndex] = stats;\n        if (doneCompilers === this.compilers.length) {\n          this.hooks.done.call(new MultiStats(compilerStats));\n        }\n      });\n      // eslint-disable-next-line no-loop-func\n      compiler.hooks.invalid.tap(\"MultiCompiler\", () => {\n        if (compilerDone) {\n          compilerDone = false;\n          doneCompilers--;\n        }\n      });\n    }\n    this.running = false;\n  }\n  get outputPath() {\n    let commonPath = this.compilers[0].outputPath;\n    for (const compiler of this.compilers) {\n      while (compiler.outputPath.indexOf(commonPath) !== 0 && /[/\\\\]/.test(commonPath)) {\n        commonPath = commonPath.replace(/[/\\\\][^/\\\\]*$/, \"\");\n      }\n    }\n    if (!commonPath && this.compilers[0].outputPath[0] === \"/\") return \"/\";\n    return commonPath;\n  }\n  get inputFileSystem() {\n    throw new Error(\"Cannot read inputFileSystem of a MultiCompiler\");\n  }\n  get outputFileSystem() {\n    throw new Error(\"Cannot read outputFileSystem of a MultiCompiler\");\n  }\n  set inputFileSystem(value) {\n    for (const compiler of this.compilers) {\n      compiler.inputFileSystem = value;\n    }\n  }\n  set outputFileSystem(value) {\n    for (const compiler of this.compilers) {\n      compiler.outputFileSystem = value;\n    }\n  }\n  getInfrastructureLogger(name) {\n    return this.compilers[0].getInfrastructureLogger(name);\n  }\n  validateDependencies(callback) {\n    const edges = new Set();\n    const missing = [];\n    const targetFound = compiler => {\n      for (const edge of edges) {\n        if (edge.target === compiler) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const sortEdges = (e1, e2) => {\n      return e1.source.name.localeCompare(e2.source.name) || e1.target.name.localeCompare(e2.target.name);\n    };\n    for (const source of this.compilers) {\n      if (source.dependencies) {\n        for (const dep of source.dependencies) {\n          const target = this.compilers.find(c => c.name === dep);\n          if (!target) {\n            missing.push(dep);\n          } else {\n            edges.add({\n              source,\n              target\n            });\n          }\n        }\n      }\n    }\n    const errors = missing.map(m => `Compiler dependency \\`${m}\\` not found.`);\n    const stack = this.compilers.filter(c => !targetFound(c));\n    while (stack.length > 0) {\n      const current = stack.pop();\n      for (const edge of edges) {\n        if (edge.source === current) {\n          edges.delete(edge);\n          const target = edge.target;\n          if (!targetFound(target)) {\n            stack.push(target);\n          }\n        }\n      }\n    }\n    if (edges.size > 0) {\n      const lines = Array.from(edges).sort(sortEdges).map(edge => `${edge.source.name} -> ${edge.target.name}`);\n      lines.unshift(\"Circular dependency found in compiler dependencies.\");\n      errors.unshift(lines.join(\"\\n\"));\n    }\n    if (errors.length > 0) {\n      const message = errors.join(\"\\n\");\n      callback(new Error(message));\n      return false;\n    }\n    return true;\n  }\n  runWithDependencies(compilers, fn, callback) {\n    const fulfilledNames = new Set();\n    let remainingCompilers = compilers;\n    const isDependencyFulfilled = d => fulfilledNames.has(d);\n    const getReadyCompilers = () => {\n      let readyCompilers = [];\n      let list = remainingCompilers;\n      remainingCompilers = [];\n      for (const c of list) {\n        const ready = !c.dependencies || c.dependencies.every(isDependencyFulfilled);\n        if (ready) {\n          readyCompilers.push(c);\n        } else {\n          remainingCompilers.push(c);\n        }\n      }\n      return readyCompilers;\n    };\n    const runCompilers = callback => {\n      if (remainingCompilers.length === 0) return callback();\n      asyncLib.map(getReadyCompilers(), (compiler, callback) => {\n        fn(compiler, err => {\n          if (err) return callback(err);\n          fulfilledNames.add(compiler.name);\n          runCompilers(callback);\n        });\n      }, callback);\n    };\n    runCompilers(callback);\n  }\n  watch(watchOptions, handler) {\n    if (this.running) return handler(new ConcurrentCompilationError());\n    let watchings = [];\n    let allStats = this.compilers.map(() => null);\n    let compilerStatus = this.compilers.map(() => false);\n    if (this.validateDependencies(handler)) {\n      this.running = true;\n      this.runWithDependencies(this.compilers, (compiler, callback) => {\n        const compilerIdx = this.compilers.indexOf(compiler);\n        let firstRun = true;\n        let watching = compiler.watch(Array.isArray(watchOptions) ? watchOptions[compilerIdx] : watchOptions, (err, stats) => {\n          if (err) handler(err);\n          if (stats) {\n            allStats[compilerIdx] = stats;\n            compilerStatus[compilerIdx] = \"new\";\n            if (compilerStatus.every(Boolean)) {\n              const freshStats = allStats.filter((s, idx) => {\n                return compilerStatus[idx] === \"new\";\n              });\n              compilerStatus.fill(true);\n              const multiStats = new MultiStats(freshStats);\n              handler(null, multiStats);\n            }\n          }\n          if (firstRun && !err) {\n            firstRun = false;\n            callback();\n          }\n        });\n        watchings.push(watching);\n      }, () => {\n        // ignore\n      });\n    }\n    return new MultiWatching(watchings, this);\n  }\n  run(callback) {\n    if (this.running) {\n      return callback(new ConcurrentCompilationError());\n    }\n    const finalCallback = (err, stats) => {\n      this.running = false;\n      if (callback !== undefined) {\n        return callback(err, stats);\n      }\n    };\n    const allStats = this.compilers.map(() => null);\n    if (this.validateDependencies(callback)) {\n      this.running = true;\n      this.runWithDependencies(this.compilers, (compiler, callback) => {\n        const compilerIdx = this.compilers.indexOf(compiler);\n        compiler.run((err, stats) => {\n          if (err) {\n            return callback(err);\n          }\n          allStats[compilerIdx] = stats;\n          callback();\n        });\n      }, err => {\n        if (err) {\n          return finalCallback(err);\n        }\n        finalCallback(null, new MultiStats(allStats));\n      });\n    }\n  }\n  purgeInputFileSystem() {\n    for (const compiler of this.compilers) {\n      if (compiler.inputFileSystem && compiler.inputFileSystem.purge) {\n        compiler.inputFileSystem.purge();\n      }\n    }\n  }\n};","map":{"version":3,"names":["Tapable","SyncHook","MultiHook","require","asyncLib","MultiWatching","MultiStats","ConcurrentCompilationError","module","exports","MultiCompiler","constructor","compilers","hooks","done","invalid","map","c","run","watchClose","watchRun","infrastructureLog","Array","isArray","Object","keys","name","doneCompilers","compilerStats","index","compiler","compilerDone","compilerIndex","tap","stats","length","call","running","outputPath","commonPath","indexOf","test","replace","inputFileSystem","Error","outputFileSystem","value","getInfrastructureLogger","validateDependencies","callback","edges","Set","missing","targetFound","edge","target","sortEdges","e1","e2","source","localeCompare","dependencies","dep","find","push","add","errors","m","stack","filter","current","pop","delete","size","lines","from","sort","unshift","join","message","runWithDependencies","fn","fulfilledNames","remainingCompilers","isDependencyFulfilled","d","has","getReadyCompilers","readyCompilers","list","ready","every","runCompilers","err","watch","watchOptions","handler","watchings","allStats","compilerStatus","compilerIdx","firstRun","watching","Boolean","freshStats","s","idx","fill","multiStats","finalCallback","undefined","purgeInputFileSystem","purge"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/MultiCompiler.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { Tapable, SyncHook, MultiHook } = require(\"tapable\");\nconst asyncLib = require(\"neo-async\");\nconst MultiWatching = require(\"./MultiWatching\");\nconst MultiStats = require(\"./MultiStats\");\nconst ConcurrentCompilationError = require(\"./ConcurrentCompilationError\");\n\nmodule.exports = class MultiCompiler extends Tapable {\n\tconstructor(compilers) {\n\t\tsuper();\n\t\tthis.hooks = {\n\t\t\tdone: new SyncHook([\"stats\"]),\n\t\t\tinvalid: new MultiHook(compilers.map(c => c.hooks.invalid)),\n\t\t\trun: new MultiHook(compilers.map(c => c.hooks.run)),\n\t\t\twatchClose: new SyncHook([]),\n\t\t\twatchRun: new MultiHook(compilers.map(c => c.hooks.watchRun)),\n\t\t\tinfrastructureLog: new MultiHook(\n\t\t\t\tcompilers.map(c => c.hooks.infrastructureLog)\n\t\t\t)\n\t\t};\n\t\tif (!Array.isArray(compilers)) {\n\t\t\tcompilers = Object.keys(compilers).map(name => {\n\t\t\t\tcompilers[name].name = name;\n\t\t\t\treturn compilers[name];\n\t\t\t});\n\t\t}\n\t\tthis.compilers = compilers;\n\t\tlet doneCompilers = 0;\n\t\tlet compilerStats = [];\n\t\tlet index = 0;\n\t\tfor (const compiler of this.compilers) {\n\t\t\tlet compilerDone = false;\n\t\t\tconst compilerIndex = index++;\n\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\tcompiler.hooks.done.tap(\"MultiCompiler\", stats => {\n\t\t\t\tif (!compilerDone) {\n\t\t\t\t\tcompilerDone = true;\n\t\t\t\t\tdoneCompilers++;\n\t\t\t\t}\n\t\t\t\tcompilerStats[compilerIndex] = stats;\n\t\t\t\tif (doneCompilers === this.compilers.length) {\n\t\t\t\t\tthis.hooks.done.call(new MultiStats(compilerStats));\n\t\t\t\t}\n\t\t\t});\n\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\tcompiler.hooks.invalid.tap(\"MultiCompiler\", () => {\n\t\t\t\tif (compilerDone) {\n\t\t\t\t\tcompilerDone = false;\n\t\t\t\t\tdoneCompilers--;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.running = false;\n\t}\n\n\tget outputPath() {\n\t\tlet commonPath = this.compilers[0].outputPath;\n\t\tfor (const compiler of this.compilers) {\n\t\t\twhile (\n\t\t\t\tcompiler.outputPath.indexOf(commonPath) !== 0 &&\n\t\t\t\t/[/\\\\]/.test(commonPath)\n\t\t\t) {\n\t\t\t\tcommonPath = commonPath.replace(/[/\\\\][^/\\\\]*$/, \"\");\n\t\t\t}\n\t\t}\n\n\t\tif (!commonPath && this.compilers[0].outputPath[0] === \"/\") return \"/\";\n\t\treturn commonPath;\n\t}\n\n\tget inputFileSystem() {\n\t\tthrow new Error(\"Cannot read inputFileSystem of a MultiCompiler\");\n\t}\n\n\tget outputFileSystem() {\n\t\tthrow new Error(\"Cannot read outputFileSystem of a MultiCompiler\");\n\t}\n\n\tset inputFileSystem(value) {\n\t\tfor (const compiler of this.compilers) {\n\t\t\tcompiler.inputFileSystem = value;\n\t\t}\n\t}\n\n\tset outputFileSystem(value) {\n\t\tfor (const compiler of this.compilers) {\n\t\t\tcompiler.outputFileSystem = value;\n\t\t}\n\t}\n\n\tgetInfrastructureLogger(name) {\n\t\treturn this.compilers[0].getInfrastructureLogger(name);\n\t}\n\n\tvalidateDependencies(callback) {\n\t\tconst edges = new Set();\n\t\tconst missing = [];\n\t\tconst targetFound = compiler => {\n\t\t\tfor (const edge of edges) {\n\t\t\t\tif (edge.target === compiler) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tconst sortEdges = (e1, e2) => {\n\t\t\treturn (\n\t\t\t\te1.source.name.localeCompare(e2.source.name) ||\n\t\t\t\te1.target.name.localeCompare(e2.target.name)\n\t\t\t);\n\t\t};\n\t\tfor (const source of this.compilers) {\n\t\t\tif (source.dependencies) {\n\t\t\t\tfor (const dep of source.dependencies) {\n\t\t\t\t\tconst target = this.compilers.find(c => c.name === dep);\n\t\t\t\t\tif (!target) {\n\t\t\t\t\t\tmissing.push(dep);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedges.add({\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\ttarget\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst errors = missing.map(m => `Compiler dependency \\`${m}\\` not found.`);\n\t\tconst stack = this.compilers.filter(c => !targetFound(c));\n\t\twhile (stack.length > 0) {\n\t\t\tconst current = stack.pop();\n\t\t\tfor (const edge of edges) {\n\t\t\t\tif (edge.source === current) {\n\t\t\t\t\tedges.delete(edge);\n\t\t\t\t\tconst target = edge.target;\n\t\t\t\t\tif (!targetFound(target)) {\n\t\t\t\t\t\tstack.push(target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (edges.size > 0) {\n\t\t\tconst lines = Array.from(edges)\n\t\t\t\t.sort(sortEdges)\n\t\t\t\t.map(edge => `${edge.source.name} -> ${edge.target.name}`);\n\t\t\tlines.unshift(\"Circular dependency found in compiler dependencies.\");\n\t\t\terrors.unshift(lines.join(\"\\n\"));\n\t\t}\n\t\tif (errors.length > 0) {\n\t\t\tconst message = errors.join(\"\\n\");\n\t\t\tcallback(new Error(message));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\trunWithDependencies(compilers, fn, callback) {\n\t\tconst fulfilledNames = new Set();\n\t\tlet remainingCompilers = compilers;\n\t\tconst isDependencyFulfilled = d => fulfilledNames.has(d);\n\t\tconst getReadyCompilers = () => {\n\t\t\tlet readyCompilers = [];\n\t\t\tlet list = remainingCompilers;\n\t\t\tremainingCompilers = [];\n\t\t\tfor (const c of list) {\n\t\t\t\tconst ready =\n\t\t\t\t\t!c.dependencies || c.dependencies.every(isDependencyFulfilled);\n\t\t\t\tif (ready) {\n\t\t\t\t\treadyCompilers.push(c);\n\t\t\t\t} else {\n\t\t\t\t\tremainingCompilers.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn readyCompilers;\n\t\t};\n\t\tconst runCompilers = callback => {\n\t\t\tif (remainingCompilers.length === 0) return callback();\n\t\t\tasyncLib.map(\n\t\t\t\tgetReadyCompilers(),\n\t\t\t\t(compiler, callback) => {\n\t\t\t\t\tfn(compiler, err => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tfulfilledNames.add(compiler.name);\n\t\t\t\t\t\trunCompilers(callback);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tcallback\n\t\t\t);\n\t\t};\n\t\trunCompilers(callback);\n\t}\n\n\twatch(watchOptions, handler) {\n\t\tif (this.running) return handler(new ConcurrentCompilationError());\n\n\t\tlet watchings = [];\n\t\tlet allStats = this.compilers.map(() => null);\n\t\tlet compilerStatus = this.compilers.map(() => false);\n\t\tif (this.validateDependencies(handler)) {\n\t\t\tthis.running = true;\n\t\t\tthis.runWithDependencies(\n\t\t\t\tthis.compilers,\n\t\t\t\t(compiler, callback) => {\n\t\t\t\t\tconst compilerIdx = this.compilers.indexOf(compiler);\n\t\t\t\t\tlet firstRun = true;\n\t\t\t\t\tlet watching = compiler.watch(\n\t\t\t\t\t\tArray.isArray(watchOptions)\n\t\t\t\t\t\t\t? watchOptions[compilerIdx]\n\t\t\t\t\t\t\t: watchOptions,\n\t\t\t\t\t\t(err, stats) => {\n\t\t\t\t\t\t\tif (err) handler(err);\n\t\t\t\t\t\t\tif (stats) {\n\t\t\t\t\t\t\t\tallStats[compilerIdx] = stats;\n\t\t\t\t\t\t\t\tcompilerStatus[compilerIdx] = \"new\";\n\t\t\t\t\t\t\t\tif (compilerStatus.every(Boolean)) {\n\t\t\t\t\t\t\t\t\tconst freshStats = allStats.filter((s, idx) => {\n\t\t\t\t\t\t\t\t\t\treturn compilerStatus[idx] === \"new\";\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tcompilerStatus.fill(true);\n\t\t\t\t\t\t\t\t\tconst multiStats = new MultiStats(freshStats);\n\t\t\t\t\t\t\t\t\thandler(null, multiStats);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (firstRun && !err) {\n\t\t\t\t\t\t\t\tfirstRun = false;\n\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\twatchings.push(watching);\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn new MultiWatching(watchings, this);\n\t}\n\n\trun(callback) {\n\t\tif (this.running) {\n\t\t\treturn callback(new ConcurrentCompilationError());\n\t\t}\n\n\t\tconst finalCallback = (err, stats) => {\n\t\t\tthis.running = false;\n\n\t\t\tif (callback !== undefined) {\n\t\t\t\treturn callback(err, stats);\n\t\t\t}\n\t\t};\n\n\t\tconst allStats = this.compilers.map(() => null);\n\t\tif (this.validateDependencies(callback)) {\n\t\t\tthis.running = true;\n\t\t\tthis.runWithDependencies(\n\t\t\t\tthis.compilers,\n\t\t\t\t(compiler, callback) => {\n\t\t\t\t\tconst compilerIdx = this.compilers.indexOf(compiler);\n\t\t\t\t\tcompiler.run((err, stats) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tallStats[compilerIdx] = stats;\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn finalCallback(err);\n\t\t\t\t\t}\n\t\t\t\t\tfinalCallback(null, new MultiStats(allStats));\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tpurgeInputFileSystem() {\n\t\tfor (const compiler of this.compilers) {\n\t\t\tif (compiler.inputFileSystem && compiler.inputFileSystem.purge) {\n\t\t\t\tcompiler.inputFileSystem.purge();\n\t\t\t}\n\t\t}\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}