{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\nconst HotUpdateChunk = require(\"./HotUpdateChunk\");\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\nconst stringifyIdSortPredicate = (a, b) => {\n  const aId = a.id + \"\";\n  const bId = b.id + \"\";\n  if (aId < bId) return -1;\n  if (aId > bId) return 1;\n  return 0;\n};\nclass Template {\n  /**\n   *\n   * @param {Function} fn a runtime function (.runtime.js) \"template\"\n   * @returns {string} the updated and normalized function string\n   */\n  static getFunctionContent(fn) {\n    return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n  }\n\n  /**\n   * @param {string} str the string converted to identifier\n   * @returns {string} created identifier\n   */\n  static toIdentifier(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n  }\n  /**\n   *\n   * @param {string} str string to be converted to commented in bundle code\n   * @returns {string} returns a commented version of string\n   */\n  static toComment(str) {\n    if (!str) return \"\";\n    return `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n\n  /**\n   *\n   * @param {string} str string to be converted to \"normal comment\"\n   * @returns {string} returns a commented version of string\n   */\n  static toNormalComment(str) {\n    if (!str) return \"\";\n    return `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n\n  /**\n   * @param {string} str string path to be normalized\n   * @returns {string} normalized bundle-safe path\n   */\n  static toPath(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n  }\n\n  // map number to a single character a-z, A-Z or <_ + number> if number is too big\n  /**\n   *\n   * @param {number} n number to convert to ident\n   * @returns {string} returns single character ident\n   */\n  static numberToIdentifer(n) {\n    // lower case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n    }\n\n    // upper case\n    if (n < DELTA_A_TO_Z * 2) {\n      return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z);\n    }\n\n    // use multiple letters\n    return Template.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) + Template.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)));\n  }\n\n  /**\n   *\n   * @param {string | string[]} s string to convert to identity\n   * @returns {string} converted identity\n   */\n  static indent(s) {\n    if (Array.isArray(s)) {\n      return s.map(Template.indent).join(\"\\n\");\n    } else {\n      const str = s.trimRight();\n      if (!str) return \"\";\n      const ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n    }\n  }\n\n  /**\n   *\n   * @param {string|string[]} s string to create prefix for\n   * @param {string} prefix prefix to compose\n   * @returns {string} returns new prefix string\n   */\n  static prefix(s, prefix) {\n    const str = Template.asString(s).trim();\n    if (!str) return \"\";\n    const ind = str[0] === \"\\n\" ? \"\" : prefix;\n    return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n  }\n\n  /**\n   *\n   * @param {string|string[]} str string or string collection\n   * @returns {string} returns a single string from array\n   */\n  static asString(str) {\n    if (Array.isArray(str)) {\n      return str.join(\"\\n\");\n    }\n    return str;\n  }\n\n  /**\n   * @typedef {Object} WithId\n   * @property {string|number} id\n   */\n\n  /**\n   * @param {WithId[]} modules a collection of modules to get array bounds for\n   * @returns {[number, number] | false} returns the upper and lower array bounds\n   * or false if not every module has a number based id\n   */\n  static getModulesArrayBounds(modules) {\n    let maxId = -Infinity;\n    let minId = Infinity;\n    for (const module of modules) {\n      if (typeof module.id !== \"number\") return false;\n      if (maxId < module.id) maxId = /** @type {number} */module.id;\n      if (minId > module.id) minId = /** @type {number} */module.id;\n    }\n    if (minId < 16 + (\"\" + minId).length) {\n      // add minId x ',' instead of 'Array(minId).concat(…)'\n      minId = 0;\n    }\n    const objectOverhead = modules.map(module => (module.id + \"\").length + 2).reduce((a, b) => a + b, -1);\n    const arrayOverhead = minId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n    return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n  }\n\n  /**\n   * @param {Chunk} chunk chunk whose modules will be rendered\n   * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n   * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n   * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n   * @param {string=} prefix applying prefix strings\n   * @returns {ConcatSource} rendered chunk modules in a Source object\n   */\n  static renderChunkModules(chunk, filterFn, moduleTemplate, dependencyTemplates, prefix = \"\") {\n    const source = new ConcatSource();\n    const modules = chunk.getModules().filter(filterFn);\n    let removedModules;\n    if (chunk instanceof HotUpdateChunk) {\n      removedModules = chunk.removedModules;\n    }\n    if (modules.length === 0 && (!removedModules || removedModules.length === 0)) {\n      source.add(\"[]\");\n      return source;\n    }\n    /** @type {{id: string|number, source: Source|string}[]} */\n    const allModules = modules.map(module => {\n      return {\n        id: module.id,\n        source: moduleTemplate.render(module, dependencyTemplates, {\n          chunk\n        })\n      };\n    });\n    if (removedModules && removedModules.length > 0) {\n      for (const id of removedModules) {\n        allModules.push({\n          id,\n          source: \"false\"\n        });\n      }\n    }\n    const bounds = Template.getModulesArrayBounds(allModules);\n    if (bounds) {\n      // Render a spare array\n      const minId = bounds[0];\n      const maxId = bounds[1];\n      if (minId !== 0) {\n        source.add(`Array(${minId}).concat(`);\n      }\n      source.add(\"[\\n\");\n      /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n      const modules = new Map();\n      for (const module of allModules) {\n        modules.set(module.id, module);\n      }\n      for (let idx = minId; idx <= maxId; idx++) {\n        const module = modules.get(idx);\n        if (idx !== minId) {\n          source.add(\",\\n\");\n        }\n        source.add(`/* ${idx} */`);\n        if (module) {\n          source.add(\"\\n\");\n          source.add(module.source);\n        }\n      }\n      source.add(\"\\n\" + prefix + \"]\");\n      if (minId !== 0) {\n        source.add(\")\");\n      }\n    } else {\n      // Render an object\n      source.add(\"{\\n\");\n      allModules.sort(stringifyIdSortPredicate).forEach((module, idx) => {\n        if (idx !== 0) {\n          source.add(\",\\n\");\n        }\n        source.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n        source.add(module.source);\n      });\n      source.add(`\\n\\n${prefix}}`);\n    }\n    return source;\n  }\n}\nmodule.exports = Template;","map":{"version":3,"names":["ConcatSource","require","HotUpdateChunk","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","stringifyIdSortPredicate","a","b","aId","id","bId","Template","getFunctionContent","fn","toString","replace","toIdentifier","str","toComment","toNormalComment","toPath","numberToIdentifer","n","String","fromCharCode","Math","floor","indent","s","Array","isArray","map","join","trimRight","ind","prefix","asString","trim","getModulesArrayBounds","modules","maxId","Infinity","minId","module","length","objectOverhead","reduce","arrayOverhead","renderChunkModules","chunk","filterFn","moduleTemplate","dependencyTemplates","source","getModules","filter","removedModules","add","allModules","render","push","bounds","Map","set","idx","get","sort","forEach","JSON","stringify","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/Template.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst HotUpdateChunk = require(\"./HotUpdateChunk\");\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\nconst stringifyIdSortPredicate = (a, b) => {\n\tconst aId = a.id + \"\";\n\tconst bId = b.id + \"\";\n\tif (aId < bId) return -1;\n\tif (aId > bId) return 1;\n\treturn 0;\n};\n\nclass Template {\n\t/**\n\t *\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\n\t * @returns {string} the updated and normalized function string\n\t */\n\tstatic getFunctionContent(fn) {\n\t\treturn fn\n\t\t\t.toString()\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\n\t}\n\n\t/**\n\t * @param {string} str the string converted to identifier\n\t * @returns {string} created identifier\n\t */\n\tstatic toIdentifier(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n\t}\n\t/**\n\t *\n\t * @param {string} str string to be converted to commented in bundle code\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t *\n\t * @param {string} str string to be converted to \"normal comment\"\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toNormalComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t * @param {string} str string path to be normalized\n\t * @returns {string} normalized bundle-safe path\n\t */\n\tstatic toPath(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n\t}\n\n\t// map number to a single character a-z, A-Z or <_ + number> if number is too big\n\t/**\n\t *\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifer(n) {\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z * 2) {\n\t\t\treturn String.fromCharCode(\n\t\t\t\tSTART_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z\n\t\t\t);\n\t\t}\n\n\t\t// use multiple letters\n\t\treturn (\n\t\t\tTemplate.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) +\n\t\t\tTemplate.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)))\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param {string | string[]} s string to convert to identity\n\t * @returns {string} converted identity\n\t */\n\tstatic indent(s) {\n\t\tif (Array.isArray(s)) {\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\n\t\t} else {\n\t\t\tconst str = s.trimRight();\n\t\t\tif (!str) return \"\";\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} s string to create prefix for\n\t * @param {string} prefix prefix to compose\n\t * @returns {string} returns new prefix string\n\t */\n\tstatic prefix(s, prefix) {\n\t\tconst str = Template.asString(s).trim();\n\t\tif (!str) return \"\";\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} str string or string collection\n\t * @returns {string} returns a single string from array\n\t */\n\tstatic asString(str) {\n\t\tif (Array.isArray(str)) {\n\t\t\treturn str.join(\"\\n\");\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @typedef {Object} WithId\n\t * @property {string|number} id\n\t */\n\n\t/**\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\n\t * or false if not every module has a number based id\n\t */\n\tstatic getModulesArrayBounds(modules) {\n\t\tlet maxId = -Infinity;\n\t\tlet minId = Infinity;\n\t\tfor (const module of modules) {\n\t\t\tif (typeof module.id !== \"number\") return false;\n\t\t\tif (maxId < module.id) maxId = /** @type {number} */ (module.id);\n\t\t\tif (minId > module.id) minId = /** @type {number} */ (module.id);\n\t\t}\n\t\tif (minId < 16 + (\"\" + minId).length) {\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\n\t\t\tminId = 0;\n\t\t}\n\t\tconst objectOverhead = modules\n\t\t\t.map(module => (module.id + \"\").length + 2)\n\t\t\t.reduce((a, b) => a + b, -1);\n\t\tconst arrayOverhead =\n\t\t\tminId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk whose modules will be rendered\n\t * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n\t * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n\t * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n\t * @param {string=} prefix applying prefix strings\n\t * @returns {ConcatSource} rendered chunk modules in a Source object\n\t */\n\tstatic renderChunkModules(\n\t\tchunk,\n\t\tfilterFn,\n\t\tmoduleTemplate,\n\t\tdependencyTemplates,\n\t\tprefix = \"\"\n\t) {\n\t\tconst source = new ConcatSource();\n\t\tconst modules = chunk.getModules().filter(filterFn);\n\t\tlet removedModules;\n\t\tif (chunk instanceof HotUpdateChunk) {\n\t\t\tremovedModules = chunk.removedModules;\n\t\t}\n\t\tif (\n\t\t\tmodules.length === 0 &&\n\t\t\t(!removedModules || removedModules.length === 0)\n\t\t) {\n\t\t\tsource.add(\"[]\");\n\t\t\treturn source;\n\t\t}\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\n\t\tconst allModules = modules.map(module => {\n\t\t\treturn {\n\t\t\t\tid: module.id,\n\t\t\t\tsource: moduleTemplate.render(module, dependencyTemplates, {\n\t\t\t\t\tchunk\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t\tif (removedModules && removedModules.length > 0) {\n\t\t\tfor (const id of removedModules) {\n\t\t\t\tallModules.push({\n\t\t\t\t\tid,\n\t\t\t\t\tsource: \"false\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\n\t\tif (bounds) {\n\t\t\t// Render a spare array\n\t\t\tconst minId = bounds[0];\n\t\t\tconst maxId = bounds[1];\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\n\t\t\t}\n\t\t\tsource.add(\"[\\n\");\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\t\t\tconst modules = new Map();\n\t\t\tfor (const module of allModules) {\n\t\t\t\tmodules.set(module.id, module);\n\t\t\t}\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\n\t\t\t\tconst module = modules.get(idx);\n\t\t\t\tif (idx !== minId) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`/* ${idx} */`);\n\t\t\t\tif (module) {\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t\tsource.add(module.source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(\")\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Render an object\n\t\t\tsource.add(\"{\\n\");\n\t\t\tallModules.sort(stringifyIdSortPredicate).forEach((module, idx) => {\n\t\t\t\tif (idx !== 0) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n\t\t\t\tsource.add(module.source);\n\t\t\t});\n\t\t\tsource.add(`\\n\\n${prefix}}`);\n\t\t}\n\t\treturn source;\n\t}\n}\n\nmodule.exports = Template;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}