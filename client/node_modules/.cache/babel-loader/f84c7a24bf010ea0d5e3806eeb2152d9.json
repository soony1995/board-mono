{"ast":null,"code":"'use strict';\n\nmodule.exports = parseJson;\nfunction parseJson(txt, reviver, context) {\n  context = context || 20;\n  try {\n    return JSON.parse(txt, reviver);\n  } catch (e) {\n    if (typeof txt !== 'string') {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0;\n      const errorMessage = 'Cannot parse ' + (isEmptyArray ? 'an empty array' : String(txt));\n      throw new TypeError(errorMessage);\n    }\n    const syntaxErr = e.message.match(/^Unexpected token.*position\\s+(\\d+)/i);\n    const errIdx = syntaxErr ? +syntaxErr[1] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;\n    if (errIdx != null) {\n      const start = errIdx <= context ? 0 : errIdx - context;\n      const end = errIdx + context >= txt.length ? txt.length : errIdx + context;\n      e.message += ` while parsing near '${start === 0 ? '' : '...'}${txt.slice(start, end)}${end === txt.length ? '' : '...'}'`;\n    } else {\n      e.message += ` while parsing '${txt.slice(0, context * 2)}'`;\n    }\n    throw e;\n  }\n}","map":{"version":3,"names":["module","exports","parseJson","txt","reviver","context","JSON","parse","e","isEmptyArray","Array","isArray","length","errorMessage","String","TypeError","syntaxErr","message","match","errIdx","start","end","slice"],"sources":["/home/soon/bulletin-board/node_modules/json-parse-better-errors/index.js"],"sourcesContent":["'use strict'\n\nmodule.exports = parseJson\nfunction parseJson (txt, reviver, context) {\n  context = context || 20\n  try {\n    return JSON.parse(txt, reviver)\n  } catch (e) {\n    if (typeof txt !== 'string') {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0\n      const errorMessage = 'Cannot parse ' +\n      (isEmptyArray ? 'an empty array' : String(txt))\n      throw new TypeError(errorMessage)\n    }\n    const syntaxErr = e.message.match(/^Unexpected token.*position\\s+(\\d+)/i)\n    const errIdx = syntaxErr\n    ? +syntaxErr[1]\n    : e.message.match(/^Unexpected end of JSON.*/i)\n    ? txt.length - 1\n    : null\n    if (errIdx != null) {\n      const start = errIdx <= context\n      ? 0\n      : errIdx - context\n      const end = errIdx + context >= txt.length\n      ? txt.length\n      : errIdx + context\n      e.message += ` while parsing near '${\n        start === 0 ? '' : '...'\n      }${txt.slice(start, end)}${\n        end === txt.length ? '' : '...'\n      }'`\n    } else {\n      e.message += ` while parsing '${txt.slice(0, context * 2)}'`\n    }\n    throw e\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,SAAS;AAC1B,SAASA,SAASA,CAAEC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACzCA,OAAO,GAAGA,OAAO,IAAI,EAAE;EACvB,IAAI;IACF,OAAOC,IAAI,CAACC,KAAK,CAACJ,GAAG,EAAEC,OAAO,CAAC;EACjC,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;MAC3B,MAAMM,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACR,GAAG,CAAC,IAAIA,GAAG,CAACS,MAAM,KAAK,CAAC;MAC3D,MAAMC,YAAY,GAAG,eAAe,IACnCJ,YAAY,GAAG,gBAAgB,GAAGK,MAAM,CAACX,GAAG,CAAC,CAAC;MAC/C,MAAM,IAAIY,SAAS,CAACF,YAAY,CAAC;IACnC;IACA,MAAMG,SAAS,GAAGR,CAAC,CAACS,OAAO,CAACC,KAAK,CAAC,sCAAsC,CAAC;IACzE,MAAMC,MAAM,GAAGH,SAAS,GACtB,CAACA,SAAS,CAAC,CAAC,CAAC,GACbR,CAAC,CAACS,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC,GAC7Cf,GAAG,CAACS,MAAM,GAAG,CAAC,GACd,IAAI;IACN,IAAIO,MAAM,IAAI,IAAI,EAAE;MAClB,MAAMC,KAAK,GAAGD,MAAM,IAAId,OAAO,GAC7B,CAAC,GACDc,MAAM,GAAGd,OAAO;MAClB,MAAMgB,GAAG,GAAGF,MAAM,GAAGd,OAAO,IAAIF,GAAG,CAACS,MAAM,GACxCT,GAAG,CAACS,MAAM,GACVO,MAAM,GAAGd,OAAO;MAClBG,CAAC,CAACS,OAAO,IAAI,wBACXG,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,KAAK,GACvBjB,GAAG,CAACmB,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC,GACtBA,GAAG,KAAKlB,GAAG,CAACS,MAAM,GAAG,EAAE,GAAG,KAAK,GAC9B;IACL,CAAC,MAAM;MACLJ,CAAC,CAACS,OAAO,IAAI,mBAAmBd,GAAG,CAACmB,KAAK,CAAC,CAAC,EAAEjB,OAAO,GAAG,CAAC,CAAC,GAAG;IAC9D;IACA,MAAMG,CAAC;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"script"}