{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyReference = require(\"./DependencyReference\");\nconst ModuleDependency = require(\"./ModuleDependency\");\nconst Template = require(\"../Template\");\nclass RequireIncludeDependency extends ModuleDependency {\n  constructor(request, range) {\n    super(request);\n    this.range = range;\n  }\n  getReference() {\n    if (!this.module) return null;\n    // This doesn't use any export\n    return new DependencyReference(this.module, [], false);\n  }\n  get type() {\n    return \"require.include\";\n  }\n}\nRequireIncludeDependency.Template = class RequireIncludeDependencyTemplate {\n  apply(dep, source, runtime) {\n    const comment = runtime.outputOptions.pathinfo ? Template.toComment(`require.include ${runtime.requestShortener.shorten(dep.request)}`) : \"\";\n    source.replace(dep.range[0], dep.range[1] - 1, `undefined${comment}`);\n  }\n};\nmodule.exports = RequireIncludeDependency;","map":{"version":3,"names":["DependencyReference","require","ModuleDependency","Template","RequireIncludeDependency","constructor","request","range","getReference","module","type","RequireIncludeDependencyTemplate","apply","dep","source","runtime","comment","outputOptions","pathinfo","toComment","requestShortener","shorten","replace","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/dependencies/RequireIncludeDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyReference = require(\"./DependencyReference\");\nconst ModuleDependency = require(\"./ModuleDependency\");\nconst Template = require(\"../Template\");\n\nclass RequireIncludeDependency extends ModuleDependency {\n\tconstructor(request, range) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t}\n\n\tgetReference() {\n\t\tif (!this.module) return null;\n\t\t// This doesn't use any export\n\t\treturn new DependencyReference(this.module, [], false);\n\t}\n\n\tget type() {\n\t\treturn \"require.include\";\n\t}\n}\n\nRequireIncludeDependency.Template = class RequireIncludeDependencyTemplate {\n\tapply(dep, source, runtime) {\n\t\tconst comment = runtime.outputOptions.pathinfo\n\t\t\t? Template.toComment(\n\t\t\t\t\t`require.include ${runtime.requestShortener.shorten(dep.request)}`\n\t\t\t  )\n\t\t\t: \"\";\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, `undefined${comment}`);\n\t}\n};\n\nmodule.exports = RequireIncludeDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACtD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEvC,MAAMG,wBAAwB,SAASF,gBAAgB,CAAC;EACvDG,WAAWA,CAACC,OAAO,EAAEC,KAAK,EAAE;IAC3B,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACC,KAAK,GAAGA,KAAK;EACnB;EAEAC,YAAYA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE,OAAO,IAAI;IAC7B;IACA,OAAO,IAAIT,mBAAmB,CAAC,IAAI,CAACS,MAAM,EAAE,EAAE,EAAE,KAAK,CAAC;EACvD;EAEA,IAAIC,IAAIA,CAAA,EAAG;IACV,OAAO,iBAAiB;EACzB;AACD;AAEAN,wBAAwB,CAACD,QAAQ,GAAG,MAAMQ,gCAAgC,CAAC;EAC1EC,KAAKA,CAACC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;IAC3B,MAAMC,OAAO,GAAGD,OAAO,CAACE,aAAa,CAACC,QAAQ,GAC3Cf,QAAQ,CAACgB,SAAS,CAClB,mBAAmBJ,OAAO,CAACK,gBAAgB,CAACC,OAAO,CAACR,GAAG,CAACP,OAAO,CAAC,EAChE,CAAC,GACD,EAAE;IACLQ,MAAM,CAACQ,OAAO,CAACT,GAAG,CAACN,KAAK,CAAC,CAAC,CAAC,EAAEM,GAAG,CAACN,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,YAAYS,OAAO,EAAE,CAAC;EACtE;AACD,CAAC;AAEDP,MAAM,CAACc,OAAO,GAAGnB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script"}