{"ast":null,"code":"'use strict';\n\nfunction isArguments(thingy) {\n  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee');\n}\nvar types = {\n  '*': {\n    label: 'any',\n    check: function () {\n      return true;\n    }\n  },\n  A: {\n    label: 'array',\n    check: function (thingy) {\n      return Array.isArray(thingy) || isArguments(thingy);\n    }\n  },\n  S: {\n    label: 'string',\n    check: function (thingy) {\n      return typeof thingy === 'string';\n    }\n  },\n  N: {\n    label: 'number',\n    check: function (thingy) {\n      return typeof thingy === 'number';\n    }\n  },\n  F: {\n    label: 'function',\n    check: function (thingy) {\n      return typeof thingy === 'function';\n    }\n  },\n  O: {\n    label: 'object',\n    check: function (thingy) {\n      return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy);\n    }\n  },\n  B: {\n    label: 'boolean',\n    check: function (thingy) {\n      return typeof thingy === 'boolean';\n    }\n  },\n  E: {\n    label: 'error',\n    check: function (thingy) {\n      return thingy instanceof Error;\n    }\n  },\n  Z: {\n    label: 'null',\n    check: function (thingy) {\n      return thingy == null;\n    }\n  }\n};\nfunction addSchema(schema, arity) {\n  var group = arity[schema.length] = arity[schema.length] || [];\n  if (group.indexOf(schema) === -1) group.push(schema);\n}\nvar validate = module.exports = function (rawSchemas, args) {\n  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length);\n  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas');\n  if (!args) throw missingRequiredArg(1, 'args');\n  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas);\n  if (!types.A.check(args)) throw invalidType(1, ['array'], args);\n  var schemas = rawSchemas.split('|');\n  var arity = {};\n  schemas.forEach(function (schema) {\n    for (var ii = 0; ii < schema.length; ++ii) {\n      var type = schema[ii];\n      if (!types[type]) throw unknownType(ii, type);\n    }\n    if (/E.*E/.test(schema)) throw moreThanOneError(schema);\n    addSchema(schema, arity);\n    if (/E/.test(schema)) {\n      addSchema(schema.replace(/E.*$/, 'E'), arity);\n      addSchema(schema.replace(/E/, 'Z'), arity);\n      if (schema.length === 1) addSchema('', arity);\n    }\n  });\n  var matching = arity[args.length];\n  if (!matching) {\n    throw wrongNumberOfArgs(Object.keys(arity), args.length);\n  }\n  for (var ii = 0; ii < args.length; ++ii) {\n    var newMatching = matching.filter(function (schema) {\n      var type = schema[ii];\n      var typeCheck = types[type].check;\n      return typeCheck(args[ii]);\n    });\n    if (!newMatching.length) {\n      var labels = matching.map(function (schema) {\n        return types[schema[ii]].label;\n      }).filter(function (schema) {\n        return schema != null;\n      });\n      throw invalidType(ii, labels, args[ii]);\n    }\n    matching = newMatching;\n  }\n};\nfunction missingRequiredArg(num) {\n  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1));\n}\nfunction unknownType(num, type) {\n  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1));\n}\nfunction invalidType(num, expectedTypes, value) {\n  var valueType;\n  Object.keys(types).forEach(function (typeCode) {\n    if (types[typeCode].check(value)) valueType = types[typeCode].label;\n  });\n  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' + englishList(expectedTypes) + ' but got ' + valueType);\n}\nfunction englishList(list) {\n  return list.join(', ').replace(/, ([^,]+)$/, ' or $1');\n}\nfunction wrongNumberOfArgs(expected, got) {\n  var english = englishList(expected);\n  var args = expected.every(function (ex) {\n    return ex.length === 1;\n  }) ? 'argument' : 'arguments';\n  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got);\n}\nfunction moreThanOneError(schema) {\n  return newException('ETOOMANYERRORTYPES', 'Only one error type per argument signature is allowed, more than one found in \"' + schema + '\"');\n}\nfunction newException(code, msg) {\n  var e = new Error(msg);\n  e.code = code;\n  if (Error.captureStackTrace) Error.captureStackTrace(e, validate);\n  return e;\n}","map":{"version":3,"names":["isArguments","thingy","hasOwnProperty","types","label","check","A","Array","isArray","S","N","F","O","E","B","Error","Z","addSchema","schema","arity","group","length","indexOf","push","validate","module","exports","rawSchemas","args","arguments","wrongNumberOfArgs","missingRequiredArg","invalidType","schemas","split","forEach","ii","type","unknownType","test","moreThanOneError","replace","matching","Object","keys","newMatching","filter","typeCheck","labels","map","num","newException","expectedTypes","value","valueType","typeCode","englishList","list","join","expected","got","english","every","ex","code","msg","e","captureStackTrace"],"sources":["/home/soon/bulletin-board/node_modules/aproba/index.js"],"sourcesContent":["'use strict'\n\nfunction isArguments (thingy) {\n  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee')\n}\n\nvar types = {\n  '*': {label: 'any', check: function () { return true }},\n  A: {label: 'array', check: function (thingy) { return Array.isArray(thingy) || isArguments(thingy) }},\n  S: {label: 'string', check: function (thingy) { return typeof thingy === 'string' }},\n  N: {label: 'number', check: function (thingy) { return typeof thingy === 'number' }},\n  F: {label: 'function', check: function (thingy) { return typeof thingy === 'function' }},\n  O: {label: 'object', check: function (thingy) { return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy) }},\n  B: {label: 'boolean', check: function (thingy) { return typeof thingy === 'boolean' }},\n  E: {label: 'error', check: function (thingy) { return thingy instanceof Error }},\n  Z: {label: 'null', check: function (thingy) { return thingy == null }}\n}\n\nfunction addSchema (schema, arity) {\n  var group = arity[schema.length] = arity[schema.length] || []\n  if (group.indexOf(schema) === -1) group.push(schema)\n}\n\nvar validate = module.exports = function (rawSchemas, args) {\n  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length)\n  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas')\n  if (!args) throw missingRequiredArg(1, 'args')\n  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas)\n  if (!types.A.check(args)) throw invalidType(1, ['array'], args)\n  var schemas = rawSchemas.split('|')\n  var arity = {}\n\n  schemas.forEach(function (schema) {\n    for (var ii = 0; ii < schema.length; ++ii) {\n      var type = schema[ii]\n      if (!types[type]) throw unknownType(ii, type)\n    }\n    if (/E.*E/.test(schema)) throw moreThanOneError(schema)\n    addSchema(schema, arity)\n    if (/E/.test(schema)) {\n      addSchema(schema.replace(/E.*$/, 'E'), arity)\n      addSchema(schema.replace(/E/, 'Z'), arity)\n      if (schema.length === 1) addSchema('', arity)\n    }\n  })\n  var matching = arity[args.length]\n  if (!matching) {\n    throw wrongNumberOfArgs(Object.keys(arity), args.length)\n  }\n  for (var ii = 0; ii < args.length; ++ii) {\n    var newMatching = matching.filter(function (schema) {\n      var type = schema[ii]\n      var typeCheck = types[type].check\n      return typeCheck(args[ii])\n    })\n    if (!newMatching.length) {\n      var labels = matching.map(function (schema) {\n        return types[schema[ii]].label\n      }).filter(function (schema) { return schema != null })\n      throw invalidType(ii, labels, args[ii])\n    }\n    matching = newMatching\n  }\n}\n\nfunction missingRequiredArg (num) {\n  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1))\n}\n\nfunction unknownType (num, type) {\n  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1))\n}\n\nfunction invalidType (num, expectedTypes, value) {\n  var valueType\n  Object.keys(types).forEach(function (typeCode) {\n    if (types[typeCode].check(value)) valueType = types[typeCode].label\n  })\n  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' +\n    englishList(expectedTypes) + ' but got ' + valueType)\n}\n\nfunction englishList (list) {\n  return list.join(', ').replace(/, ([^,]+)$/, ' or $1')\n}\n\nfunction wrongNumberOfArgs (expected, got) {\n  var english = englishList(expected)\n  var args = expected.every(function (ex) { return ex.length === 1 })\n    ? 'argument'\n    : 'arguments'\n  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got)\n}\n\nfunction moreThanOneError (schema) {\n  return newException('ETOOMANYERRORTYPES',\n    'Only one error type per argument signature is allowed, more than one found in \"' + schema + '\"')\n}\n\nfunction newException (code, msg) {\n  var e = new Error(msg)\n  e.code = code\n  if (Error.captureStackTrace) Error.captureStackTrace(e, validate)\n  return e\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}