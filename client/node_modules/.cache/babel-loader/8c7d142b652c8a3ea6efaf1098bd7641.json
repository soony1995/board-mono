{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nlet WebAssemblyGenerator;\nlet WebAssemblyJavascriptGenerator;\nlet WebAssemblyParser;\nclass WebAssemblyModulesPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  /**\n   * @param {Compiler} compiler compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"WebAssemblyModulesPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);\n      normalModuleFactory.hooks.createParser.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", () => {\n        if (WebAssemblyParser === undefined) {\n          WebAssemblyParser = require(\"./WebAssemblyParser\");\n        }\n        return new WebAssemblyParser();\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", () => {\n        if (WebAssemblyGenerator === undefined) {\n          WebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n        }\n        if (WebAssemblyJavascriptGenerator === undefined) {\n          WebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n        }\n        return Generator.byType({\n          javascript: new WebAssemblyJavascriptGenerator(),\n          webassembly: new WebAssemblyGenerator(this.options)\n        });\n      });\n      compilation.chunkTemplate.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", (result, options) => {\n        const chunk = options.chunk;\n        const outputOptions = options.outputOptions;\n        const moduleTemplates = options.moduleTemplates;\n        const dependencyTemplates = options.dependencyTemplates;\n        for (const module of chunk.modulesIterable) {\n          if (module.type && module.type.startsWith(\"webassembly\")) {\n            const filenameTemplate = outputOptions.webassemblyModuleFilename;\n            result.push({\n              render: () => this.renderWebAssembly(module, moduleTemplates.webassembly, dependencyTemplates),\n              filenameTemplate,\n              pathOptions: {\n                module\n              },\n              identifier: `webassemblyModule${module.id}`,\n              hash: module.hash\n            });\n          }\n        }\n        return result;\n      });\n      compilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", () => {\n        const initialWasmModules = new Set();\n        for (const chunk of compilation.chunks) {\n          if (chunk.canBeInitial()) {\n            for (const module of chunk.modulesIterable) {\n              if (module.type.startsWith(\"webassembly\")) {\n                initialWasmModules.add(module);\n              }\n            }\n          }\n        }\n        for (const module of initialWasmModules) {\n          compilation.errors.push(new WebAssemblyInInitialChunkError(module, compilation.requestShortener));\n        }\n      });\n    });\n  }\n  renderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n    return moduleTemplate.render(module, dependencyTemplates, {});\n  }\n}\nmodule.exports = WebAssemblyModulesPlugin;","map":{"version":3,"names":["Generator","require","WebAssemblyExportImportedDependency","WebAssemblyImportDependency","WebAssemblyInInitialChunkError","WebAssemblyGenerator","WebAssemblyJavascriptGenerator","WebAssemblyParser","WebAssemblyModulesPlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","createParser","for","undefined","createGenerator","byType","javascript","webassembly","chunkTemplate","renderManifest","result","chunk","outputOptions","moduleTemplates","dependencyTemplates","module","modulesIterable","type","startsWith","filenameTemplate","webassemblyModuleFilename","push","render","renderWebAssembly","pathOptions","identifier","id","hash","afterChunks","initialWasmModules","Set","chunks","canBeInitial","add","errors","requestShortener","moduleTemplate","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/wasm/WebAssemblyModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nlet WebAssemblyGenerator;\nlet WebAssemblyJavascriptGenerator;\nlet WebAssemblyParser;\n\nclass WebAssemblyModulesPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyExportImportedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tif (WebAssemblyParser === undefined) {\n\t\t\t\t\t\t\tWebAssemblyParser = require(\"./WebAssemblyParser\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new WebAssemblyParser();\n\t\t\t\t\t});\n\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tif (WebAssemblyGenerator === undefined) {\n\t\t\t\t\t\t\tWebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (WebAssemblyJavascriptGenerator === undefined) {\n\t\t\t\t\t\t\tWebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new WebAssemblyJavascriptGenerator(),\n\t\t\t\t\t\t\twebassembly: new WebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.chunkTemplate.hooks.renderManifest.tap(\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t\t\t(result, options) => {\n\t\t\t\t\t\tconst chunk = options.chunk;\n\t\t\t\t\t\tconst outputOptions = options.outputOptions;\n\t\t\t\t\t\tconst moduleTemplates = options.moduleTemplates;\n\t\t\t\t\t\tconst dependencyTemplates = options.dependencyTemplates;\n\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\tif (module.type && module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\n\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\t\tthis.renderWebAssembly(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\tmoduleTemplates.webassembly,\n\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyModule${module.id}`,\n\t\t\t\t\t\t\t\t\thash: module.hash\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\tconst initialWasmModules = new Set();\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (chunk.canBeInitial()) {\n\t\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\t\tif (module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\t\tinitialWasmModules.add(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const module of initialWasmModules) {\n\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\tnew WebAssemblyInInitialChunkError(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\trenderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n\t\treturn moduleTemplate.render(module, dependencyTemplates, {});\n\t}\n}\n\nmodule.exports = WebAssemblyModulesPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}