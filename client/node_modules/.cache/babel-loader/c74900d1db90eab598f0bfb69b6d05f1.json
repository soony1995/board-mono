{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n/**\n * Gets the value at path of object\n * @param {object} obj object to query\n * @param {string} path query path\n * @returns {any} - if {@param path} requests element from array, then `undefined` will be returned\n */\nconst getProperty = (obj, path) => {\n  let name = path.split(\".\");\n  for (let i = 0; i < name.length - 1; i++) {\n    obj = obj[name[i]];\n    if (typeof obj !== \"object\" || !obj || Array.isArray(obj)) return;\n  }\n  return obj[name.pop()];\n};\n\n/**\n * Sets the value at path of object. Stops execution, if {@param path} requests element from array to be set\n * @param {object} obj object to query\n * @param {string} path query path\n * @param {any} value value to be set\n * @returns {void}\n */\nconst setProperty = (obj, path, value) => {\n  let name = path.split(\".\");\n  for (let i = 0; i < name.length - 1; i++) {\n    if (typeof obj[name[i]] !== \"object\" && obj[name[i]] !== undefined) return;\n    if (Array.isArray(obj[name[i]])) return;\n    if (!obj[name[i]]) obj[name[i]] = {};\n    obj = obj[name[i]];\n  }\n  obj[name.pop()] = value;\n};\n\n/**\n * @typedef {'call' | 'make' | 'append'} ConfigType\n */\n/**\n * @typedef {(options: object) => any} MakeConfigHandler\n */\n/**\n * @typedef {(value: any, options: object) => any} CallConfigHandler\n */\n/**\n * @typedef {any[]} AppendConfigValues\n */\n\nclass OptionsDefaulter {\n  constructor() {\n    /**\n     * Stores default options settings or functions for computing them\n     */\n    this.defaults = {};\n    /**\n     * Stores configuration for options\n     * @type {{[key: string]: ConfigType}}\n     */\n    this.config = {};\n  }\n\n  /**\n   * Enhancing {@param options} with default values\n   * @param {object} options provided options\n   * @returns {object} - enhanced options\n   * @throws {Error} - will throw error, if configuration value is other then `undefined` or {@link ConfigType}\n   */\n  process(options) {\n    options = Object.assign({}, options);\n    for (let name in this.defaults) {\n      switch (this.config[name]) {\n        /**\n         * If {@link ConfigType} doesn't specified and current value is `undefined`, then default value will be assigned\n         */\n        case undefined:\n          if (getProperty(options, name) === undefined) {\n            setProperty(options, name, this.defaults[name]);\n          }\n          break;\n        /**\n         * Assign result of {@link CallConfigHandler}\n         */\n        case \"call\":\n          setProperty(options, name, this.defaults[name].call(this, getProperty(options, name), options));\n          break;\n        /**\n         * Assign result of {@link MakeConfigHandler}, if current value is `undefined`\n         */\n        case \"make\":\n          if (getProperty(options, name) === undefined) {\n            setProperty(options, name, this.defaults[name].call(this, options));\n          }\n          break;\n        /**\n         * Adding {@link AppendConfigValues} at the end of the current array\n         */\n        case \"append\":\n          {\n            let oldValue = getProperty(options, name);\n            if (!Array.isArray(oldValue)) {\n              oldValue = [];\n            }\n            oldValue.push(...this.defaults[name]);\n            setProperty(options, name, oldValue);\n            break;\n          }\n        default:\n          throw new Error(\"OptionsDefaulter cannot process \" + this.config[name]);\n      }\n    }\n    return options;\n  }\n\n  /**\n   * Builds up default values\n   * @param {string} name option path\n   * @param {ConfigType | any} config if {@param def} is provided, then only {@link ConfigType} is allowed\n   * @param {MakeConfigHandler | CallConfigHandler | AppendConfigValues} [def] defaults\n   * @returns {void}\n   */\n  set(name, config, def) {\n    if (def !== undefined) {\n      this.defaults[name] = def;\n      this.config[name] = config;\n    } else {\n      this.defaults[name] = config;\n      delete this.config[name];\n    }\n  }\n}\nmodule.exports = OptionsDefaulter;","map":{"version":3,"names":["getProperty","obj","path","name","split","i","length","Array","isArray","pop","setProperty","value","undefined","OptionsDefaulter","constructor","defaults","config","process","options","Object","assign","call","oldValue","push","Error","set","def","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/OptionsDefaulter.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n/**\n * Gets the value at path of object\n * @param {object} obj object to query\n * @param {string} path query path\n * @returns {any} - if {@param path} requests element from array, then `undefined` will be returned\n */\nconst getProperty = (obj, path) => {\n\tlet name = path.split(\".\");\n\tfor (let i = 0; i < name.length - 1; i++) {\n\t\tobj = obj[name[i]];\n\t\tif (typeof obj !== \"object\" || !obj || Array.isArray(obj)) return;\n\t}\n\treturn obj[name.pop()];\n};\n\n/**\n * Sets the value at path of object. Stops execution, if {@param path} requests element from array to be set\n * @param {object} obj object to query\n * @param {string} path query path\n * @param {any} value value to be set\n * @returns {void}\n */\nconst setProperty = (obj, path, value) => {\n\tlet name = path.split(\".\");\n\tfor (let i = 0; i < name.length - 1; i++) {\n\t\tif (typeof obj[name[i]] !== \"object\" && obj[name[i]] !== undefined) return;\n\t\tif (Array.isArray(obj[name[i]])) return;\n\t\tif (!obj[name[i]]) obj[name[i]] = {};\n\t\tobj = obj[name[i]];\n\t}\n\tobj[name.pop()] = value;\n};\n\n/**\n * @typedef {'call' | 'make' | 'append'} ConfigType\n */\n/**\n * @typedef {(options: object) => any} MakeConfigHandler\n */\n/**\n * @typedef {(value: any, options: object) => any} CallConfigHandler\n */\n/**\n * @typedef {any[]} AppendConfigValues\n */\n\nclass OptionsDefaulter {\n\tconstructor() {\n\t\t/**\n\t\t * Stores default options settings or functions for computing them\n\t\t */\n\t\tthis.defaults = {};\n\t\t/**\n\t\t * Stores configuration for options\n\t\t * @type {{[key: string]: ConfigType}}\n\t\t */\n\t\tthis.config = {};\n\t}\n\n\t/**\n\t * Enhancing {@param options} with default values\n\t * @param {object} options provided options\n\t * @returns {object} - enhanced options\n\t * @throws {Error} - will throw error, if configuration value is other then `undefined` or {@link ConfigType}\n\t */\n\tprocess(options) {\n\t\toptions = Object.assign({}, options);\n\t\tfor (let name in this.defaults) {\n\t\t\tswitch (this.config[name]) {\n\t\t\t\t/**\n\t\t\t\t * If {@link ConfigType} doesn't specified and current value is `undefined`, then default value will be assigned\n\t\t\t\t */\n\t\t\t\tcase undefined:\n\t\t\t\t\tif (getProperty(options, name) === undefined) {\n\t\t\t\t\t\tsetProperty(options, name, this.defaults[name]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t/**\n\t\t\t\t * Assign result of {@link CallConfigHandler}\n\t\t\t\t */\n\t\t\t\tcase \"call\":\n\t\t\t\t\tsetProperty(\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tthis.defaults[name].call(this, getProperty(options, name), options)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t/**\n\t\t\t\t * Assign result of {@link MakeConfigHandler}, if current value is `undefined`\n\t\t\t\t */\n\t\t\t\tcase \"make\":\n\t\t\t\t\tif (getProperty(options, name) === undefined) {\n\t\t\t\t\t\tsetProperty(options, name, this.defaults[name].call(this, options));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t/**\n\t\t\t\t * Adding {@link AppendConfigValues} at the end of the current array\n\t\t\t\t */\n\t\t\t\tcase \"append\": {\n\t\t\t\t\tlet oldValue = getProperty(options, name);\n\t\t\t\t\tif (!Array.isArray(oldValue)) {\n\t\t\t\t\t\toldValue = [];\n\t\t\t\t\t}\n\t\t\t\t\toldValue.push(...this.defaults[name]);\n\t\t\t\t\tsetProperty(options, name, oldValue);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"OptionsDefaulter cannot process \" + this.config[name]\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn options;\n\t}\n\n\t/**\n\t * Builds up default values\n\t * @param {string} name option path\n\t * @param {ConfigType | any} config if {@param def} is provided, then only {@link ConfigType} is allowed\n\t * @param {MakeConfigHandler | CallConfigHandler | AppendConfigValues} [def] defaults\n\t * @returns {void}\n\t */\n\tset(name, config, def) {\n\t\tif (def !== undefined) {\n\t\t\tthis.defaults[name] = def;\n\t\t\tthis.config[name] = config;\n\t\t} else {\n\t\t\tthis.defaults[name] = config;\n\t\t\tdelete this.config[name];\n\t\t}\n\t}\n}\n\nmodule.exports = OptionsDefaulter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}