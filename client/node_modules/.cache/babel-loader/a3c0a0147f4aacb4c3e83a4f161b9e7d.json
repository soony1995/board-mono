{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst SortableSet = require(\"./SortableSet\");\n\n/**\n * @template T\n * @template K\n * Multi layer bucket sorted set\n * Supports adding non-existing items (DO NOT ADD ITEM TWICE)\n * Supports removing exiting items (DO NOT REMOVE ITEM NOT IN SET)\n * Supports popping the first items according to defined order\n * Supports iterating all items without order\n * Supports updating an item in an efficient way\n * Supports size property, which is the number of items\n * Items are lazy partially sorted when needed\n */\nclass LazyBucketSortedSet {\n  /**\n   * @param {function(T): K} getKey function to get key from item\n   * @param {function(K, K): number} comparator comparator to sort keys\n   * @param  {...((function(T): any) | (function(any, any): number))} args more pairs of getKey and comparator plus optional final comparator for the last layer\n   */\n  constructor(getKey, comparator, ...args) {\n    this._getKey = getKey;\n    this._innerArgs = args;\n    this._leaf = args.length <= 1;\n    this._keys = new SortableSet(undefined, comparator);\n    /** @type {Map<K, LazyBucketSortedSet<T, any> | SortableSet<T>>} */\n    this._map = new Map();\n    this._unsortedItems = new Set();\n    this.size = 0;\n  }\n\n  /**\n   * @param {T} item an item\n   * @returns {void}\n   */\n  add(item) {\n    this.size++;\n    this._unsortedItems.add(item);\n  }\n\n  /**\n   * @param {K} key key of item\n   * @param {T} item the item\n   * @returns {void}\n   */\n  _addInternal(key, item) {\n    let entry = this._map.get(key);\n    if (entry === undefined) {\n      entry = this._leaf ? new SortableSet(undefined, this._innerArgs[0]) : new (/** @type {any} */LazyBucketSortedSet)(...this._innerArgs);\n      this._keys.add(key);\n      this._map.set(key, entry);\n    }\n    entry.add(item);\n  }\n\n  /**\n   * @param {T} item an item\n   * @returns {void}\n   */\n  delete(item) {\n    this.size--;\n    if (this._unsortedItems.has(item)) {\n      this._unsortedItems.delete(item);\n      return;\n    }\n    const key = this._getKey(item);\n    const entry = this._map.get(key);\n    entry.delete(item);\n    if (entry.size === 0) {\n      this._deleteKey(key);\n    }\n  }\n\n  /**\n   * @param {K} key key to be removed\n   * @returns {void}\n   */\n  _deleteKey(key) {\n    this._keys.delete(key);\n    this._map.delete(key);\n  }\n\n  /**\n   * @returns {T | undefined} an item\n   */\n  popFirst() {\n    if (this.size === 0) return undefined;\n    this.size--;\n    if (this._unsortedItems.size > 0) {\n      for (const item of this._unsortedItems) {\n        const key = this._getKey(item);\n        this._addInternal(key, item);\n      }\n      this._unsortedItems.clear();\n    }\n    this._keys.sort();\n    const key = this._keys.values().next().value;\n    const entry = this._map.get(key);\n    if (this._leaf) {\n      const leafEntry = /** @type {SortableSet<T>} */entry;\n      leafEntry.sort();\n      const item = leafEntry.values().next().value;\n      leafEntry.delete(item);\n      if (leafEntry.size === 0) {\n        this._deleteKey(key);\n      }\n      return item;\n    } else {\n      const nodeEntry = /** @type {LazyBucketSortedSet<T, any>} */entry;\n      const item = nodeEntry.popFirst();\n      if (nodeEntry.size === 0) {\n        this._deleteKey(key);\n      }\n      return item;\n    }\n  }\n\n  /**\n   * @param {T} item to be updated item\n   * @returns {function(true=): void} finish update\n   */\n  startUpdate(item) {\n    if (this._unsortedItems.has(item)) {\n      return remove => {\n        if (remove) {\n          this._unsortedItems.delete(item);\n          this.size--;\n          return;\n        }\n      };\n    }\n    const key = this._getKey(item);\n    if (this._leaf) {\n      const oldEntry = /** @type {SortableSet<T>} */this._map.get(key);\n      return remove => {\n        if (remove) {\n          this.size--;\n          oldEntry.delete(item);\n          if (oldEntry.size === 0) {\n            this._deleteKey(key);\n          }\n          return;\n        }\n        const newKey = this._getKey(item);\n        if (key === newKey) {\n          // This flags the sortable set as unordered\n          oldEntry.add(item);\n        } else {\n          oldEntry.delete(item);\n          if (oldEntry.size === 0) {\n            this._deleteKey(key);\n          }\n          this._addInternal(newKey, item);\n        }\n      };\n    } else {\n      const oldEntry = /** @type {LazyBucketSortedSet<T, any>} */this._map.get(key);\n      const finishUpdate = oldEntry.startUpdate(item);\n      return remove => {\n        if (remove) {\n          this.size--;\n          finishUpdate(true);\n          if (oldEntry.size === 0) {\n            this._deleteKey(key);\n          }\n          return;\n        }\n        const newKey = this._getKey(item);\n        if (key === newKey) {\n          finishUpdate();\n        } else {\n          finishUpdate(true);\n          if (oldEntry.size === 0) {\n            this._deleteKey(key);\n          }\n          this._addInternal(newKey, item);\n        }\n      };\n    }\n  }\n\n  /**\n   * @param {Iterator<T>[]} iterators list of iterators to append to\n   * @returns {void}\n   */\n  _appendIterators(iterators) {\n    if (this._unsortedItems.size > 0) iterators.push(this._unsortedItems[Symbol.iterator]());\n    for (const key of this._keys) {\n      const entry = this._map.get(key);\n      if (this._leaf) {\n        const leafEntry = /** @type {SortableSet<T>} */entry;\n        const iterator = leafEntry[Symbol.iterator]();\n        iterators.push(iterator);\n      } else {\n        const nodeEntry = /** @type {LazyBucketSortedSet<T, any>} */entry;\n        nodeEntry._appendIterators(iterators);\n      }\n    }\n  }\n\n  /**\n   * @returns {Iterator<T>} the iterator\n   */\n  [Symbol.iterator]() {\n    const iterators = [];\n    this._appendIterators(iterators);\n    iterators.reverse();\n    let currentIterator = iterators.pop();\n    return {\n      next: () => {\n        const res = currentIterator.next();\n        if (res.done) {\n          if (iterators.length === 0) return res;\n          currentIterator = iterators.pop();\n          return currentIterator.next();\n        }\n        return res;\n      }\n    };\n  }\n}\nmodule.exports = LazyBucketSortedSet;","map":{"version":3,"names":["SortableSet","require","LazyBucketSortedSet","constructor","getKey","comparator","args","_getKey","_innerArgs","_leaf","length","_keys","undefined","_map","Map","_unsortedItems","Set","size","add","item","_addInternal","key","entry","get","set","delete","has","_deleteKey","popFirst","clear","sort","values","next","value","leafEntry","nodeEntry","startUpdate","remove","oldEntry","newKey","finishUpdate","_appendIterators","iterators","push","Symbol","iterator","reverse","currentIterator","pop","res","done","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/util/LazyBucketSortedSet.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst SortableSet = require(\"./SortableSet\");\n\n/**\n * @template T\n * @template K\n * Multi layer bucket sorted set\n * Supports adding non-existing items (DO NOT ADD ITEM TWICE)\n * Supports removing exiting items (DO NOT REMOVE ITEM NOT IN SET)\n * Supports popping the first items according to defined order\n * Supports iterating all items without order\n * Supports updating an item in an efficient way\n * Supports size property, which is the number of items\n * Items are lazy partially sorted when needed\n */\nclass LazyBucketSortedSet {\n\t/**\n\t * @param {function(T): K} getKey function to get key from item\n\t * @param {function(K, K): number} comparator comparator to sort keys\n\t * @param  {...((function(T): any) | (function(any, any): number))} args more pairs of getKey and comparator plus optional final comparator for the last layer\n\t */\n\tconstructor(getKey, comparator, ...args) {\n\t\tthis._getKey = getKey;\n\t\tthis._innerArgs = args;\n\t\tthis._leaf = args.length <= 1;\n\t\tthis._keys = new SortableSet(undefined, comparator);\n\t\t/** @type {Map<K, LazyBucketSortedSet<T, any> | SortableSet<T>>} */\n\t\tthis._map = new Map();\n\t\tthis._unsortedItems = new Set();\n\t\tthis.size = 0;\n\t}\n\n\t/**\n\t * @param {T} item an item\n\t * @returns {void}\n\t */\n\tadd(item) {\n\t\tthis.size++;\n\t\tthis._unsortedItems.add(item);\n\t}\n\n\t/**\n\t * @param {K} key key of item\n\t * @param {T} item the item\n\t * @returns {void}\n\t */\n\t_addInternal(key, item) {\n\t\tlet entry = this._map.get(key);\n\t\tif (entry === undefined) {\n\t\t\tentry = this._leaf\n\t\t\t\t? new SortableSet(undefined, this._innerArgs[0])\n\t\t\t\t: new /** @type {any} */ (LazyBucketSortedSet)(...this._innerArgs);\n\t\t\tthis._keys.add(key);\n\t\t\tthis._map.set(key, entry);\n\t\t}\n\t\tentry.add(item);\n\t}\n\n\t/**\n\t * @param {T} item an item\n\t * @returns {void}\n\t */\n\tdelete(item) {\n\t\tthis.size--;\n\t\tif (this._unsortedItems.has(item)) {\n\t\t\tthis._unsortedItems.delete(item);\n\t\t\treturn;\n\t\t}\n\t\tconst key = this._getKey(item);\n\t\tconst entry = this._map.get(key);\n\t\tentry.delete(item);\n\t\tif (entry.size === 0) {\n\t\t\tthis._deleteKey(key);\n\t\t}\n\t}\n\n\t/**\n\t * @param {K} key key to be removed\n\t * @returns {void}\n\t */\n\t_deleteKey(key) {\n\t\tthis._keys.delete(key);\n\t\tthis._map.delete(key);\n\t}\n\n\t/**\n\t * @returns {T | undefined} an item\n\t */\n\tpopFirst() {\n\t\tif (this.size === 0) return undefined;\n\t\tthis.size--;\n\t\tif (this._unsortedItems.size > 0) {\n\t\t\tfor (const item of this._unsortedItems) {\n\t\t\t\tconst key = this._getKey(item);\n\t\t\t\tthis._addInternal(key, item);\n\t\t\t}\n\t\t\tthis._unsortedItems.clear();\n\t\t}\n\t\tthis._keys.sort();\n\t\tconst key = this._keys.values().next().value;\n\t\tconst entry = this._map.get(key);\n\t\tif (this._leaf) {\n\t\t\tconst leafEntry = /** @type {SortableSet<T>} */ (entry);\n\t\t\tleafEntry.sort();\n\t\t\tconst item = leafEntry.values().next().value;\n\t\t\tleafEntry.delete(item);\n\t\t\tif (leafEntry.size === 0) {\n\t\t\t\tthis._deleteKey(key);\n\t\t\t}\n\t\t\treturn item;\n\t\t} else {\n\t\t\tconst nodeEntry = /** @type {LazyBucketSortedSet<T, any>} */ (entry);\n\t\t\tconst item = nodeEntry.popFirst();\n\t\t\tif (nodeEntry.size === 0) {\n\t\t\t\tthis._deleteKey(key);\n\t\t\t}\n\t\t\treturn item;\n\t\t}\n\t}\n\n\t/**\n\t * @param {T} item to be updated item\n\t * @returns {function(true=): void} finish update\n\t */\n\tstartUpdate(item) {\n\t\tif (this._unsortedItems.has(item)) {\n\t\t\treturn remove => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tthis._unsortedItems.delete(item);\n\t\t\t\t\tthis.size--;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tconst key = this._getKey(item);\n\t\tif (this._leaf) {\n\t\t\tconst oldEntry = /** @type {SortableSet<T>} */ (this._map.get(key));\n\t\t\treturn remove => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tthis.size--;\n\t\t\t\t\toldEntry.delete(item);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newKey = this._getKey(item);\n\t\t\t\tif (key === newKey) {\n\t\t\t\t\t// This flags the sortable set as unordered\n\t\t\t\t\toldEntry.add(item);\n\t\t\t\t} else {\n\t\t\t\t\toldEntry.delete(item);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\tthis._addInternal(newKey, item);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\tconst oldEntry = /** @type {LazyBucketSortedSet<T, any>} */ (this._map.get(\n\t\t\t\tkey\n\t\t\t));\n\t\t\tconst finishUpdate = oldEntry.startUpdate(item);\n\t\t\treturn remove => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tthis.size--;\n\t\t\t\t\tfinishUpdate(true);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newKey = this._getKey(item);\n\t\t\t\tif (key === newKey) {\n\t\t\t\t\tfinishUpdate();\n\t\t\t\t} else {\n\t\t\t\t\tfinishUpdate(true);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\tthis._addInternal(newKey, item);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * @param {Iterator<T>[]} iterators list of iterators to append to\n\t * @returns {void}\n\t */\n\t_appendIterators(iterators) {\n\t\tif (this._unsortedItems.size > 0)\n\t\t\titerators.push(this._unsortedItems[Symbol.iterator]());\n\t\tfor (const key of this._keys) {\n\t\t\tconst entry = this._map.get(key);\n\t\t\tif (this._leaf) {\n\t\t\t\tconst leafEntry = /** @type {SortableSet<T>} */ (entry);\n\t\t\t\tconst iterator = leafEntry[Symbol.iterator]();\n\t\t\t\titerators.push(iterator);\n\t\t\t} else {\n\t\t\t\tconst nodeEntry = /** @type {LazyBucketSortedSet<T, any>} */ (entry);\n\t\t\t\tnodeEntry._appendIterators(iterators);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Iterator<T>} the iterator\n\t */\n\t[Symbol.iterator]() {\n\t\tconst iterators = [];\n\t\tthis._appendIterators(iterators);\n\t\titerators.reverse();\n\t\tlet currentIterator = iterators.pop();\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tconst res = currentIterator.next();\n\t\t\t\tif (res.done) {\n\t\t\t\t\tif (iterators.length === 0) return res;\n\t\t\t\t\tcurrentIterator = iterators.pop();\n\t\t\t\t\treturn currentIterator.next();\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t}\n\t\t};\n\t}\n}\n\nmodule.exports = LazyBucketSortedSet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}