{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst ModuleHotAcceptDependency = require(\"../dependencies/ModuleHotAcceptDependency\");\nconst ModuleHotDeclineDependency = require(\"../dependencies/ModuleHotDeclineDependency\");\nconst ConcatenatedModule = require(\"./ConcatenatedModule\");\nconst HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\nconst StackedSetMap = require(\"../util/StackedSetMap\");\nconst formatBailoutReason = msg => {\n  return \"ModuleConcatenation bailout: \" + msg;\n};\nclass ModuleConcatenationPlugin {\n  constructor(options) {\n    if (typeof options !== \"object\") options = {};\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ModuleConcatenationPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const handler = (parser, parserOptions) => {\n        parser.hooks.call.for(\"eval\").tap(\"ModuleConcatenationPlugin\", () => {\n          // Because of variable renaming we can't use modules with eval.\n          parser.state.module.buildMeta.moduleConcatenationBailout = \"eval()\";\n        });\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ModuleConcatenationPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ModuleConcatenationPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ModuleConcatenationPlugin\", handler);\n      const bailoutReasonMap = new Map();\n      const setBailoutReason = (module, reason) => {\n        bailoutReasonMap.set(module, reason);\n        module.optimizationBailout.push(typeof reason === \"function\" ? rs => formatBailoutReason(reason(rs)) : formatBailoutReason(reason));\n      };\n      const getBailoutReason = (module, requestShortener) => {\n        const reason = bailoutReasonMap.get(module);\n        if (typeof reason === \"function\") return reason(requestShortener);\n        return reason;\n      };\n      compilation.hooks.optimizeChunkModules.tap(\"ModuleConcatenationPlugin\", (allChunks, modules) => {\n        const relevantModules = [];\n        const possibleInners = new Set();\n        for (const module of modules) {\n          // Only harmony modules are valid for optimization\n          if (!module.buildMeta || module.buildMeta.exportsType !== \"namespace\" || !module.dependencies.some(d => d instanceof HarmonyCompatibilityDependency)) {\n            setBailoutReason(module, \"Module is not an ECMAScript module\");\n            continue;\n          }\n\n          // Some expressions are not compatible with module concatenation\n          // because they may produce unexpected results. The plugin bails out\n          // if some were detected upfront.\n          if (module.buildMeta && module.buildMeta.moduleConcatenationBailout) {\n            setBailoutReason(module, `Module uses ${module.buildMeta.moduleConcatenationBailout}`);\n            continue;\n          }\n\n          // Exports must be known (and not dynamic)\n          if (!Array.isArray(module.buildMeta.providedExports)) {\n            setBailoutReason(module, \"Module exports are unknown\");\n            continue;\n          }\n\n          // Using dependency variables is not possible as this wraps the code in a function\n          if (module.variables.length > 0) {\n            setBailoutReason(module, `Module uses injected variables (${module.variables.map(v => v.name).join(\", \")})`);\n            continue;\n          }\n\n          // Hot Module Replacement need it's own module to work correctly\n          if (module.dependencies.some(dep => dep instanceof ModuleHotAcceptDependency || dep instanceof ModuleHotDeclineDependency)) {\n            setBailoutReason(module, \"Module uses Hot Module Replacement\");\n            continue;\n          }\n          relevantModules.push(module);\n\n          // Module must not be the entry points\n          if (module.isEntryModule()) {\n            setBailoutReason(module, \"Module is an entry point\");\n            continue;\n          }\n\n          // Module must be in any chunk (we don't want to do useless work)\n          if (module.getNumberOfChunks() === 0) {\n            setBailoutReason(module, \"Module is not in any chunk\");\n            continue;\n          }\n\n          // Module must only be used by Harmony Imports\n          const nonHarmonyReasons = module.reasons.filter(reason => !reason.dependency || !(reason.dependency instanceof HarmonyImportDependency));\n          if (nonHarmonyReasons.length > 0) {\n            const importingModules = new Set(nonHarmonyReasons.map(r => r.module).filter(Boolean));\n            const importingExplanations = new Set(nonHarmonyReasons.map(r => r.explanation).filter(Boolean));\n            const importingModuleTypes = new Map(Array.from(importingModules).map(m => (/** @type {[string, Set]} */[m, new Set(nonHarmonyReasons.filter(r => r.module === m).map(r => r.dependency.type).sort())])));\n            setBailoutReason(module, requestShortener => {\n              const names = Array.from(importingModules).map(m => `${m.readableIdentifier(requestShortener)} (referenced with ${Array.from(importingModuleTypes.get(m)).join(\", \")})`).sort();\n              const explanations = Array.from(importingExplanations).sort();\n              if (names.length > 0 && explanations.length === 0) {\n                return `Module is referenced from these modules with unsupported syntax: ${names.join(\", \")}`;\n              } else if (names.length === 0 && explanations.length > 0) {\n                return `Module is referenced by: ${explanations.join(\", \")}`;\n              } else if (names.length > 0 && explanations.length > 0) {\n                return `Module is referenced from these modules with unsupported syntax: ${names.join(\", \")} and by: ${explanations.join(\", \")}`;\n              } else {\n                return \"Module is referenced in a unsupported way\";\n              }\n            });\n            continue;\n          }\n          possibleInners.add(module);\n        }\n        // sort by depth\n        // modules with lower depth are more likely suited as roots\n        // this improves performance, because modules already selected as inner are skipped\n        relevantModules.sort((a, b) => {\n          return a.depth - b.depth;\n        });\n        const concatConfigurations = [];\n        const usedAsInner = new Set();\n        for (const currentRoot of relevantModules) {\n          // when used by another configuration as inner:\n          // the other configuration is better and we can skip this one\n          if (usedAsInner.has(currentRoot)) continue;\n\n          // create a configuration with the root\n          const currentConfiguration = new ConcatConfiguration(currentRoot);\n\n          // cache failures to add modules\n          const failureCache = new Map();\n\n          // try to add all imports\n          for (const imp of this._getImports(compilation, currentRoot)) {\n            const problem = this._tryToAdd(compilation, currentConfiguration, imp, possibleInners, failureCache);\n            if (problem) {\n              failureCache.set(imp, problem);\n              currentConfiguration.addWarning(imp, problem);\n            }\n          }\n          if (!currentConfiguration.isEmpty()) {\n            concatConfigurations.push(currentConfiguration);\n            for (const module of currentConfiguration.getModules()) {\n              if (module !== currentConfiguration.rootModule) {\n                usedAsInner.add(module);\n              }\n            }\n          }\n        }\n        // HACK: Sort configurations by length and start with the longest one\n        // to get the biggers groups possible. Used modules are marked with usedModules\n        // TODO: Allow to reuse existing configuration while trying to add dependencies.\n        // This would improve performance. O(n^2) -> O(n)\n        concatConfigurations.sort((a, b) => {\n          return b.modules.size - a.modules.size;\n        });\n        const usedModules = new Set();\n        for (const concatConfiguration of concatConfigurations) {\n          if (usedModules.has(concatConfiguration.rootModule)) continue;\n          const modules = concatConfiguration.getModules();\n          const rootModule = concatConfiguration.rootModule;\n          const newModule = new ConcatenatedModule(rootModule, Array.from(modules), ConcatenatedModule.createConcatenationList(rootModule, modules, compilation));\n          for (const warning of concatConfiguration.getWarningsSorted()) {\n            newModule.optimizationBailout.push(requestShortener => {\n              const reason = getBailoutReason(warning[0], requestShortener);\n              const reasonWithPrefix = reason ? ` (<- ${reason})` : \"\";\n              if (warning[0] === warning[1]) {\n                return formatBailoutReason(`Cannot concat with ${warning[0].readableIdentifier(requestShortener)}${reasonWithPrefix}`);\n              } else {\n                return formatBailoutReason(`Cannot concat with ${warning[0].readableIdentifier(requestShortener)} because of ${warning[1].readableIdentifier(requestShortener)}${reasonWithPrefix}`);\n              }\n            });\n          }\n          const chunks = concatConfiguration.rootModule.getChunks();\n          for (const m of modules) {\n            usedModules.add(m);\n            for (const chunk of chunks) {\n              chunk.removeModule(m);\n            }\n          }\n          for (const chunk of chunks) {\n            chunk.addModule(newModule);\n            newModule.addChunk(chunk);\n          }\n          for (const chunk of allChunks) {\n            if (chunk.entryModule === concatConfiguration.rootModule) {\n              chunk.entryModule = newModule;\n            }\n          }\n          compilation.modules.push(newModule);\n          for (const reason of newModule.reasons) {\n            if (reason.dependency.module === concatConfiguration.rootModule) reason.dependency.module = newModule;\n            if (reason.dependency.redirectedModule === concatConfiguration.rootModule) reason.dependency.redirectedModule = newModule;\n          }\n          // TODO: remove when LTS node version contains fixed v8 version\n          // @see https://github.com/webpack/webpack/pull/6613\n          // Turbofan does not correctly inline for-of loops with polymorphic input arrays.\n          // Work around issue by using a standard for loop and assigning dep.module.reasons\n          for (let i = 0; i < newModule.dependencies.length; i++) {\n            let dep = newModule.dependencies[i];\n            if (dep.module) {\n              let reasons = dep.module.reasons;\n              for (let j = 0; j < reasons.length; j++) {\n                let reason = reasons[j];\n                if (reason.dependency === dep) {\n                  reason.module = newModule;\n                }\n              }\n            }\n          }\n        }\n        compilation.modules = compilation.modules.filter(m => !usedModules.has(m));\n      });\n    });\n  }\n  _getImports(compilation, module) {\n    return new Set(module.dependencies\n\n    // Get reference info only for harmony Dependencies\n    .map(dep => {\n      if (!(dep instanceof HarmonyImportDependency)) return null;\n      if (!compilation) return dep.getReference();\n      return compilation.getDependencyReference(module, dep);\n    })\n\n    // Reference is valid and has a module\n    // Dependencies are simple enough to concat them\n    .filter(ref => ref && ref.module && (Array.isArray(ref.importedNames) || Array.isArray(ref.module.buildMeta.providedExports)))\n\n    // Take the imported module\n    .map(ref => ref.module));\n  }\n  _tryToAdd(compilation, config, module, possibleModules, failureCache) {\n    const cacheEntry = failureCache.get(module);\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n\n    // Already added?\n    if (config.has(module)) {\n      return null;\n    }\n\n    // Not possible to add?\n    if (!possibleModules.has(module)) {\n      failureCache.set(module, module); // cache failures for performance\n      return module;\n    }\n\n    // module must be in the same chunks\n    if (!config.rootModule.hasEqualsChunks(module)) {\n      failureCache.set(module, module); // cache failures for performance\n      return module;\n    }\n\n    // Clone config to make experimental changes\n    const testConfig = config.clone();\n\n    // Add the module\n    testConfig.add(module);\n\n    // Every module which depends on the added module must be in the configuration too.\n    for (const reason of module.reasons) {\n      // Modules that are not used can be ignored\n      if (reason.module.factoryMeta.sideEffectFree && reason.module.used === false) continue;\n      const problem = this._tryToAdd(compilation, testConfig, reason.module, possibleModules, failureCache);\n      if (problem) {\n        failureCache.set(module, problem); // cache failures for performance\n        return problem;\n      }\n    }\n\n    // Commit experimental changes\n    config.set(testConfig);\n\n    // Eagerly try to add imports too if possible\n    for (const imp of this._getImports(compilation, module)) {\n      const problem = this._tryToAdd(compilation, config, imp, possibleModules, failureCache);\n      if (problem) {\n        config.addWarning(imp, problem);\n      }\n    }\n    return null;\n  }\n}\nclass ConcatConfiguration {\n  constructor(rootModule, cloneFrom) {\n    this.rootModule = rootModule;\n    if (cloneFrom) {\n      this.modules = cloneFrom.modules.createChild(5);\n      this.warnings = cloneFrom.warnings.createChild(5);\n    } else {\n      this.modules = new StackedSetMap();\n      this.modules.add(rootModule);\n      this.warnings = new StackedSetMap();\n    }\n  }\n  add(module) {\n    this.modules.add(module);\n  }\n  has(module) {\n    return this.modules.has(module);\n  }\n  isEmpty() {\n    return this.modules.size === 1;\n  }\n  addWarning(module, problem) {\n    this.warnings.set(module, problem);\n  }\n  getWarningsSorted() {\n    return new Map(this.warnings.asPairArray().sort((a, b) => {\n      const ai = a[0].identifier();\n      const bi = b[0].identifier();\n      if (ai < bi) return -1;\n      if (ai > bi) return 1;\n      return 0;\n    }));\n  }\n  getModules() {\n    return this.modules.asSet();\n  }\n  clone() {\n    return new ConcatConfiguration(this.rootModule, this);\n  }\n  set(config) {\n    this.rootModule = config.rootModule;\n    this.modules = config.modules;\n    this.warnings = config.warnings;\n  }\n}\nmodule.exports = ModuleConcatenationPlugin;","map":{"version":3,"names":["HarmonyImportDependency","require","ModuleHotAcceptDependency","ModuleHotDeclineDependency","ConcatenatedModule","HarmonyCompatibilityDependency","StackedSetMap","formatBailoutReason","msg","ModuleConcatenationPlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","handler","parser","parserOptions","call","for","state","module","buildMeta","moduleConcatenationBailout","bailoutReasonMap","Map","setBailoutReason","reason","set","optimizationBailout","push","rs","getBailoutReason","requestShortener","get","optimizeChunkModules","allChunks","modules","relevantModules","possibleInners","Set","exportsType","dependencies","some","d","Array","isArray","providedExports","variables","length","map","v","name","join","dep","isEntryModule","getNumberOfChunks","nonHarmonyReasons","reasons","filter","dependency","importingModules","r","Boolean","importingExplanations","explanation","importingModuleTypes","from","m","type","sort","names","readableIdentifier","explanations","add","a","b","depth","concatConfigurations","usedAsInner","currentRoot","has","currentConfiguration","ConcatConfiguration","failureCache","imp","_getImports","problem","_tryToAdd","addWarning","isEmpty","getModules","rootModule","size","usedModules","concatConfiguration","newModule","createConcatenationList","warning","getWarningsSorted","reasonWithPrefix","chunks","getChunks","chunk","removeModule","addModule","addChunk","entryModule","redirectedModule","i","j","getReference","getDependencyReference","ref","importedNames","config","possibleModules","cacheEntry","hasEqualsChunks","testConfig","clone","factoryMeta","sideEffectFree","used","cloneFrom","createChild","warnings","asPairArray","ai","identifier","bi","asSet","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/optimize/ModuleConcatenationPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst ModuleHotAcceptDependency = require(\"../dependencies/ModuleHotAcceptDependency\");\nconst ModuleHotDeclineDependency = require(\"../dependencies/ModuleHotDeclineDependency\");\nconst ConcatenatedModule = require(\"./ConcatenatedModule\");\nconst HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\nconst StackedSetMap = require(\"../util/StackedSetMap\");\n\nconst formatBailoutReason = msg => {\n\treturn \"ModuleConcatenation bailout: \" + msg;\n};\n\nclass ModuleConcatenationPlugin {\n\tconstructor(options) {\n\t\tif (typeof options !== \"object\") options = {};\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ModuleConcatenationPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tparser.hooks.call.for(\"eval\").tap(\"ModuleConcatenationPlugin\", () => {\n\t\t\t\t\t\t// Because of variable renaming we can't use modules with eval.\n\t\t\t\t\t\tparser.state.module.buildMeta.moduleConcatenationBailout = \"eval()\";\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"ModuleConcatenationPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"ModuleConcatenationPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"ModuleConcatenationPlugin\", handler);\n\n\t\t\t\tconst bailoutReasonMap = new Map();\n\n\t\t\t\tconst setBailoutReason = (module, reason) => {\n\t\t\t\t\tbailoutReasonMap.set(module, reason);\n\t\t\t\t\tmodule.optimizationBailout.push(\n\t\t\t\t\t\ttypeof reason === \"function\"\n\t\t\t\t\t\t\t? rs => formatBailoutReason(reason(rs))\n\t\t\t\t\t\t\t: formatBailoutReason(reason)\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst getBailoutReason = (module, requestShortener) => {\n\t\t\t\t\tconst reason = bailoutReasonMap.get(module);\n\t\t\t\t\tif (typeof reason === \"function\") return reason(requestShortener);\n\t\t\t\t\treturn reason;\n\t\t\t\t};\n\n\t\t\t\tcompilation.hooks.optimizeChunkModules.tap(\n\t\t\t\t\t\"ModuleConcatenationPlugin\",\n\t\t\t\t\t(allChunks, modules) => {\n\t\t\t\t\t\tconst relevantModules = [];\n\t\t\t\t\t\tconst possibleInners = new Set();\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\t// Only harmony modules are valid for optimization\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!module.buildMeta ||\n\t\t\t\t\t\t\t\tmodule.buildMeta.exportsType !== \"namespace\" ||\n\t\t\t\t\t\t\t\t!module.dependencies.some(\n\t\t\t\t\t\t\t\t\td => d instanceof HarmonyCompatibilityDependency\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module is not an ECMAScript module\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Some expressions are not compatible with module concatenation\n\t\t\t\t\t\t\t// because they may produce unexpected results. The plugin bails out\n\t\t\t\t\t\t\t// if some were detected upfront.\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmodule.buildMeta &&\n\t\t\t\t\t\t\t\tmodule.buildMeta.moduleConcatenationBailout\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsetBailoutReason(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t`Module uses ${module.buildMeta.moduleConcatenationBailout}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Exports must be known (and not dynamic)\n\t\t\t\t\t\t\tif (!Array.isArray(module.buildMeta.providedExports)) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module exports are unknown\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Using dependency variables is not possible as this wraps the code in a function\n\t\t\t\t\t\t\tif (module.variables.length > 0) {\n\t\t\t\t\t\t\t\tsetBailoutReason(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t`Module uses injected variables (${module.variables\n\t\t\t\t\t\t\t\t\t\t.map(v => v.name)\n\t\t\t\t\t\t\t\t\t\t.join(\", \")})`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Hot Module Replacement need it's own module to work correctly\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmodule.dependencies.some(\n\t\t\t\t\t\t\t\t\tdep =>\n\t\t\t\t\t\t\t\t\t\tdep instanceof ModuleHotAcceptDependency ||\n\t\t\t\t\t\t\t\t\t\tdep instanceof ModuleHotDeclineDependency\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module uses Hot Module Replacement\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trelevantModules.push(module);\n\n\t\t\t\t\t\t\t// Module must not be the entry points\n\t\t\t\t\t\t\tif (module.isEntryModule()) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module is an entry point\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Module must be in any chunk (we don't want to do useless work)\n\t\t\t\t\t\t\tif (module.getNumberOfChunks() === 0) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module is not in any chunk\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Module must only be used by Harmony Imports\n\t\t\t\t\t\t\tconst nonHarmonyReasons = module.reasons.filter(\n\t\t\t\t\t\t\t\treason =>\n\t\t\t\t\t\t\t\t\t!reason.dependency ||\n\t\t\t\t\t\t\t\t\t!(reason.dependency instanceof HarmonyImportDependency)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (nonHarmonyReasons.length > 0) {\n\t\t\t\t\t\t\t\tconst importingModules = new Set(\n\t\t\t\t\t\t\t\t\tnonHarmonyReasons.map(r => r.module).filter(Boolean)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst importingExplanations = new Set(\n\t\t\t\t\t\t\t\t\tnonHarmonyReasons.map(r => r.explanation).filter(Boolean)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst importingModuleTypes = new Map(\n\t\t\t\t\t\t\t\t\tArray.from(importingModules).map(\n\t\t\t\t\t\t\t\t\t\tm => /** @type {[string, Set]} */ ([\n\t\t\t\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t\t\t\tnew Set(\n\t\t\t\t\t\t\t\t\t\t\t\tnonHarmonyReasons\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(r => r.module === m)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map(r => r.dependency.type)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.sort()\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tsetBailoutReason(module, requestShortener => {\n\t\t\t\t\t\t\t\t\tconst names = Array.from(importingModules)\n\t\t\t\t\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t\t\t\t\tm =>\n\t\t\t\t\t\t\t\t\t\t\t\t`${m.readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t\t)} (referenced with ${Array.from(\n\t\t\t\t\t\t\t\t\t\t\t\t\timportingModuleTypes.get(m)\n\t\t\t\t\t\t\t\t\t\t\t\t).join(\", \")})`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.sort();\n\t\t\t\t\t\t\t\t\tconst explanations = Array.from(importingExplanations).sort();\n\t\t\t\t\t\t\t\t\tif (names.length > 0 && explanations.length === 0) {\n\t\t\t\t\t\t\t\t\t\treturn `Module is referenced from these modules with unsupported syntax: ${names.join(\n\t\t\t\t\t\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t\t\t\t)}`;\n\t\t\t\t\t\t\t\t\t} else if (names.length === 0 && explanations.length > 0) {\n\t\t\t\t\t\t\t\t\t\treturn `Module is referenced by: ${explanations.join(\n\t\t\t\t\t\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t\t\t\t)}`;\n\t\t\t\t\t\t\t\t\t} else if (names.length > 0 && explanations.length > 0) {\n\t\t\t\t\t\t\t\t\t\treturn `Module is referenced from these modules with unsupported syntax: ${names.join(\n\t\t\t\t\t\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t\t\t\t)} and by: ${explanations.join(\", \")}`;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn \"Module is referenced in a unsupported way\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpossibleInners.add(module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// sort by depth\n\t\t\t\t\t\t// modules with lower depth are more likely suited as roots\n\t\t\t\t\t\t// this improves performance, because modules already selected as inner are skipped\n\t\t\t\t\t\trelevantModules.sort((a, b) => {\n\t\t\t\t\t\t\treturn a.depth - b.depth;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst concatConfigurations = [];\n\t\t\t\t\t\tconst usedAsInner = new Set();\n\t\t\t\t\t\tfor (const currentRoot of relevantModules) {\n\t\t\t\t\t\t\t// when used by another configuration as inner:\n\t\t\t\t\t\t\t// the other configuration is better and we can skip this one\n\t\t\t\t\t\t\tif (usedAsInner.has(currentRoot)) continue;\n\n\t\t\t\t\t\t\t// create a configuration with the root\n\t\t\t\t\t\t\tconst currentConfiguration = new ConcatConfiguration(currentRoot);\n\n\t\t\t\t\t\t\t// cache failures to add modules\n\t\t\t\t\t\t\tconst failureCache = new Map();\n\n\t\t\t\t\t\t\t// try to add all imports\n\t\t\t\t\t\t\tfor (const imp of this._getImports(compilation, currentRoot)) {\n\t\t\t\t\t\t\t\tconst problem = this._tryToAdd(\n\t\t\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\t\t\tcurrentConfiguration,\n\t\t\t\t\t\t\t\t\timp,\n\t\t\t\t\t\t\t\t\tpossibleInners,\n\t\t\t\t\t\t\t\t\tfailureCache\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (problem) {\n\t\t\t\t\t\t\t\t\tfailureCache.set(imp, problem);\n\t\t\t\t\t\t\t\t\tcurrentConfiguration.addWarning(imp, problem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!currentConfiguration.isEmpty()) {\n\t\t\t\t\t\t\t\tconcatConfigurations.push(currentConfiguration);\n\t\t\t\t\t\t\t\tfor (const module of currentConfiguration.getModules()) {\n\t\t\t\t\t\t\t\t\tif (module !== currentConfiguration.rootModule) {\n\t\t\t\t\t\t\t\t\t\tusedAsInner.add(module);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// HACK: Sort configurations by length and start with the longest one\n\t\t\t\t\t\t// to get the biggers groups possible. Used modules are marked with usedModules\n\t\t\t\t\t\t// TODO: Allow to reuse existing configuration while trying to add dependencies.\n\t\t\t\t\t\t// This would improve performance. O(n^2) -> O(n)\n\t\t\t\t\t\tconcatConfigurations.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.modules.size - a.modules.size;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst usedModules = new Set();\n\t\t\t\t\t\tfor (const concatConfiguration of concatConfigurations) {\n\t\t\t\t\t\t\tif (usedModules.has(concatConfiguration.rootModule)) continue;\n\t\t\t\t\t\t\tconst modules = concatConfiguration.getModules();\n\t\t\t\t\t\t\tconst rootModule = concatConfiguration.rootModule;\n\t\t\t\t\t\t\tconst newModule = new ConcatenatedModule(\n\t\t\t\t\t\t\t\trootModule,\n\t\t\t\t\t\t\t\tArray.from(modules),\n\t\t\t\t\t\t\t\tConcatenatedModule.createConcatenationList(\n\t\t\t\t\t\t\t\t\trootModule,\n\t\t\t\t\t\t\t\t\tmodules,\n\t\t\t\t\t\t\t\t\tcompilation\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const warning of concatConfiguration.getWarningsSorted()) {\n\t\t\t\t\t\t\t\tnewModule.optimizationBailout.push(requestShortener => {\n\t\t\t\t\t\t\t\t\tconst reason = getBailoutReason(warning[0], requestShortener);\n\t\t\t\t\t\t\t\t\tconst reasonWithPrefix = reason ? ` (<- ${reason})` : \"\";\n\t\t\t\t\t\t\t\t\tif (warning[0] === warning[1]) {\n\t\t\t\t\t\t\t\t\t\treturn formatBailoutReason(\n\t\t\t\t\t\t\t\t\t\t\t`Cannot concat with ${warning[0].readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t)}${reasonWithPrefix}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn formatBailoutReason(\n\t\t\t\t\t\t\t\t\t\t\t`Cannot concat with ${warning[0].readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t)} because of ${warning[1].readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t)}${reasonWithPrefix}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst chunks = concatConfiguration.rootModule.getChunks();\n\t\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\t\tusedModules.add(m);\n\t\t\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\t\t\tchunk.removeModule(m);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\t\tchunk.addModule(newModule);\n\t\t\t\t\t\t\t\tnewModule.addChunk(chunk);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const chunk of allChunks) {\n\t\t\t\t\t\t\t\tif (chunk.entryModule === concatConfiguration.rootModule) {\n\t\t\t\t\t\t\t\t\tchunk.entryModule = newModule;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcompilation.modules.push(newModule);\n\t\t\t\t\t\t\tfor (const reason of newModule.reasons) {\n\t\t\t\t\t\t\t\tif (reason.dependency.module === concatConfiguration.rootModule)\n\t\t\t\t\t\t\t\t\treason.dependency.module = newModule;\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\treason.dependency.redirectedModule ===\n\t\t\t\t\t\t\t\t\tconcatConfiguration.rootModule\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\treason.dependency.redirectedModule = newModule;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// TODO: remove when LTS node version contains fixed v8 version\n\t\t\t\t\t\t\t// @see https://github.com/webpack/webpack/pull/6613\n\t\t\t\t\t\t\t// Turbofan does not correctly inline for-of loops with polymorphic input arrays.\n\t\t\t\t\t\t\t// Work around issue by using a standard for loop and assigning dep.module.reasons\n\t\t\t\t\t\t\tfor (let i = 0; i < newModule.dependencies.length; i++) {\n\t\t\t\t\t\t\t\tlet dep = newModule.dependencies[i];\n\t\t\t\t\t\t\t\tif (dep.module) {\n\t\t\t\t\t\t\t\t\tlet reasons = dep.module.reasons;\n\t\t\t\t\t\t\t\t\tfor (let j = 0; j < reasons.length; j++) {\n\t\t\t\t\t\t\t\t\t\tlet reason = reasons[j];\n\t\t\t\t\t\t\t\t\t\tif (reason.dependency === dep) {\n\t\t\t\t\t\t\t\t\t\t\treason.module = newModule;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompilation.modules = compilation.modules.filter(\n\t\t\t\t\t\t\tm => !usedModules.has(m)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_getImports(compilation, module) {\n\t\treturn new Set(\n\t\t\tmodule.dependencies\n\n\t\t\t\t// Get reference info only for harmony Dependencies\n\t\t\t\t.map(dep => {\n\t\t\t\t\tif (!(dep instanceof HarmonyImportDependency)) return null;\n\t\t\t\t\tif (!compilation) return dep.getReference();\n\t\t\t\t\treturn compilation.getDependencyReference(module, dep);\n\t\t\t\t})\n\n\t\t\t\t// Reference is valid and has a module\n\t\t\t\t// Dependencies are simple enough to concat them\n\t\t\t\t.filter(\n\t\t\t\t\tref =>\n\t\t\t\t\t\tref &&\n\t\t\t\t\t\tref.module &&\n\t\t\t\t\t\t(Array.isArray(ref.importedNames) ||\n\t\t\t\t\t\t\tArray.isArray(ref.module.buildMeta.providedExports))\n\t\t\t\t)\n\n\t\t\t\t// Take the imported module\n\t\t\t\t.map(ref => ref.module)\n\t\t);\n\t}\n\n\t_tryToAdd(compilation, config, module, possibleModules, failureCache) {\n\t\tconst cacheEntry = failureCache.get(module);\n\t\tif (cacheEntry) {\n\t\t\treturn cacheEntry;\n\t\t}\n\n\t\t// Already added?\n\t\tif (config.has(module)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Not possible to add?\n\t\tif (!possibleModules.has(module)) {\n\t\t\tfailureCache.set(module, module); // cache failures for performance\n\t\t\treturn module;\n\t\t}\n\n\t\t// module must be in the same chunks\n\t\tif (!config.rootModule.hasEqualsChunks(module)) {\n\t\t\tfailureCache.set(module, module); // cache failures for performance\n\t\t\treturn module;\n\t\t}\n\n\t\t// Clone config to make experimental changes\n\t\tconst testConfig = config.clone();\n\n\t\t// Add the module\n\t\ttestConfig.add(module);\n\n\t\t// Every module which depends on the added module must be in the configuration too.\n\t\tfor (const reason of module.reasons) {\n\t\t\t// Modules that are not used can be ignored\n\t\t\tif (\n\t\t\t\treason.module.factoryMeta.sideEffectFree &&\n\t\t\t\treason.module.used === false\n\t\t\t)\n\t\t\t\tcontinue;\n\n\t\t\tconst problem = this._tryToAdd(\n\t\t\t\tcompilation,\n\t\t\t\ttestConfig,\n\t\t\t\treason.module,\n\t\t\t\tpossibleModules,\n\t\t\t\tfailureCache\n\t\t\t);\n\t\t\tif (problem) {\n\t\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\t\treturn problem;\n\t\t\t}\n\t\t}\n\n\t\t// Commit experimental changes\n\t\tconfig.set(testConfig);\n\n\t\t// Eagerly try to add imports too if possible\n\t\tfor (const imp of this._getImports(compilation, module)) {\n\t\t\tconst problem = this._tryToAdd(\n\t\t\t\tcompilation,\n\t\t\t\tconfig,\n\t\t\t\timp,\n\t\t\t\tpossibleModules,\n\t\t\t\tfailureCache\n\t\t\t);\n\t\t\tif (problem) {\n\t\t\t\tconfig.addWarning(imp, problem);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass ConcatConfiguration {\n\tconstructor(rootModule, cloneFrom) {\n\t\tthis.rootModule = rootModule;\n\t\tif (cloneFrom) {\n\t\t\tthis.modules = cloneFrom.modules.createChild(5);\n\t\t\tthis.warnings = cloneFrom.warnings.createChild(5);\n\t\t} else {\n\t\t\tthis.modules = new StackedSetMap();\n\t\t\tthis.modules.add(rootModule);\n\t\t\tthis.warnings = new StackedSetMap();\n\t\t}\n\t}\n\n\tadd(module) {\n\t\tthis.modules.add(module);\n\t}\n\n\thas(module) {\n\t\treturn this.modules.has(module);\n\t}\n\n\tisEmpty() {\n\t\treturn this.modules.size === 1;\n\t}\n\n\taddWarning(module, problem) {\n\t\tthis.warnings.set(module, problem);\n\t}\n\n\tgetWarningsSorted() {\n\t\treturn new Map(\n\t\t\tthis.warnings.asPairArray().sort((a, b) => {\n\t\t\t\tconst ai = a[0].identifier();\n\t\t\t\tconst bi = b[0].identifier();\n\t\t\t\tif (ai < bi) return -1;\n\t\t\t\tif (ai > bi) return 1;\n\t\t\t\treturn 0;\n\t\t\t})\n\t\t);\n\t}\n\n\tgetModules() {\n\t\treturn this.modules.asSet();\n\t}\n\n\tclone() {\n\t\treturn new ConcatConfiguration(this.rootModule, this);\n\t}\n\n\tset(config) {\n\t\tthis.rootModule = config.rootModule;\n\t\tthis.modules = config.modules;\n\t\tthis.warnings = config.warnings;\n\t}\n}\n\nmodule.exports = ModuleConcatenationPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}