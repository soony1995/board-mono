{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nimport * as ieee754 from \"@webassemblyjs/ieee754\";\nimport * as utf8 from \"@webassemblyjs/utf8\";\nimport * as t from \"@webassemblyjs/ast\";\nimport { decodeInt32, decodeUInt32, MAX_NUMBER_OF_BYTE_U32, decodeInt64, decodeUInt64, MAX_NUMBER_OF_BYTE_U64 } from \"@webassemblyjs/leb128\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nfunction toHex(n) {\n  return \"0x\" + Number(n).toString(16);\n}\nfunction byteArrayEq(l, r) {\n  if (l.length !== r.length) {\n    return false;\n  }\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] !== r[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function decode(ab, opts) {\n  var buf = new Uint8Array(ab);\n  var getUniqueName = t.getUniqueNameGenerator();\n  var offset = 0;\n  function getPosition() {\n    return {\n      line: -1,\n      column: offset\n    };\n  }\n  function dump(b, msg) {\n    if (opts.dump === false) return;\n    var pad = \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n    var str = \"\";\n    if (b.length < 5) {\n      str = b.map(toHex).join(\" \");\n    } else {\n      str = \"...\";\n    }\n    console.log(toHex(offset) + \":\\t\", str, pad, \";\", msg);\n  }\n  function dumpSep(msg) {\n    if (opts.dump === false) return;\n    console.log(\";\", msg);\n  }\n  /**\n   * TODO(sven): we can atually use a same structure\n   * we are adding incrementally new features\n   */\n\n  var state = {\n    elementsInFuncSection: [],\n    elementsInExportSection: [],\n    elementsInCodeSection: [],\n    /**\n     * Decode memory from:\n     * - Memory section\n     */\n    memoriesInModule: [],\n    /**\n     * Decoded types from:\n     * - Type section\n     */\n    typesInModule: [],\n    /**\n     * Decoded functions from:\n     * - Function section\n     * - Import section\n     */\n    functionsInModule: [],\n    /**\n     * Decoded tables from:\n     * - Table section\n     */\n    tablesInModule: [],\n    /**\n     * Decoded globals from:\n     * - Global section\n     */\n    globalsInModule: []\n  };\n  function isEOF() {\n    return offset >= buf.length;\n  }\n  function eatBytes(n) {\n    offset = offset + n;\n  }\n  function readBytesAtOffset(_offset, numberOfBytes) {\n    var arr = [];\n    for (var i = 0; i < numberOfBytes; i++) {\n      arr.push(buf[_offset + i]);\n    }\n    return arr;\n  }\n  function readBytes(numberOfBytes) {\n    return readBytesAtOffset(offset, numberOfBytes);\n  }\n  function readF64() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F64);\n    var value = ieee754.decodeF64(bytes);\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n      mantissa += bytes[bytes.length - 2] % 16 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F64\n    };\n  }\n  function readF32() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F32);\n    var value = ieee754.decodeF32(bytes);\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n      mantissa += bytes[bytes.length - 2] % 128 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F32\n    };\n  }\n  function readUTF8String() {\n    var lenu32 = readU32(); // Don't eat any bytes. Instead, peek ahead of the current offset using\n    // readBytesAtOffset below. This keeps readUTF8String neutral with respect\n    // to the current offset, just like the other readX functions.\n\n    var strlen = lenu32.value;\n    dump([strlen], \"string length\");\n    var bytes = readBytesAtOffset(offset + lenu32.nextIndex, strlen);\n    var value = utf8.decode(bytes);\n    return {\n      value: value,\n      nextIndex: strlen + lenu32.nextIndex\n    };\n  }\n  /**\n   * Decode an unsigned 32bits integer\n   *\n   * The length will be handled by the leb librairy, we pass the max number of\n   * byte.\n   */\n\n  function readU32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n  function readVaruint32() {\n    // where 32 bits = max 4 bytes\n    var bytes = readBytes(4);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n  function readVaruint7() {\n    // where 7 bits = max 1 bytes\n    var bytes = readBytes(1);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n  /**\n   * Decode a signed 32bits interger\n   */\n\n  function read32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeInt32(buffer);\n  }\n  /**\n   * Decode a signed 64bits integer\n   */\n\n  function read64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeInt64(buffer);\n  }\n  function readU64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt64(buffer);\n  }\n  function readByte() {\n    return readBytes(1)[0];\n  }\n  function parseModuleHeader() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n    var header = readBytes(4);\n    if (byteArrayEq(constants.magicModuleHeader, header) === false) {\n      throw new CompileError(\"magic header not detected\");\n    }\n    dump(header, \"wasm magic header\");\n    eatBytes(4);\n  }\n  function parseVersion() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n    var version = readBytes(4);\n    if (byteArrayEq(constants.moduleVersion, version) === false) {\n      throw new CompileError(\"unknown binary version\");\n    }\n    dump(version, \"wasm version\");\n    eatBytes(4);\n  }\n  function parseVec(cast) {\n    var u32 = readU32();\n    var length = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([length], \"number\");\n    if (length === 0) {\n      return [];\n    }\n    var elements = [];\n    for (var i = 0; i < length; i++) {\n      var byte = readByte();\n      eatBytes(1);\n      var value = cast(byte);\n      dump([byte], value);\n      if (typeof value === \"undefined\") {\n        throw new CompileError(\"Internal failure: parseVec could not cast the value\");\n      }\n      elements.push(value);\n    }\n    return elements;\n  } // Type section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-typesec\n\n  function parseTypeSection(numberOfTypes) {\n    var typeInstructionNodes = [];\n    dump([numberOfTypes], \"num types\");\n    for (var i = 0; i < numberOfTypes; i++) {\n      var _startLoc = getPosition();\n      dumpSep(\"type \" + i);\n      var type = readByte();\n      eatBytes(1);\n      if (type == constants.types.func) {\n        dump([type], \"func\");\n        var paramValtypes = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        var params = paramValtypes.map(function (v) {\n          return t.funcParam(/*valtype*/\n          v);\n        });\n        var result = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        typeInstructionNodes.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.typeInstruction(undefined, t.signature(params, result)), endLoc, _startLoc);\n        }());\n        state.typesInModule.push({\n          params: params,\n          result: result\n        });\n      } else {\n        throw new Error(\"Unsupported type: \" + toHex(type));\n      }\n    }\n    return typeInstructionNodes;\n  } // Import section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-importsec\n\n  function parseImportSection(numberOfImports) {\n    var imports = [];\n    for (var i = 0; i < numberOfImports; i++) {\n      dumpSep(\"import header \" + i);\n      var _startLoc2 = getPosition();\n      /**\n       * Module name\n       */\n\n      var moduleName = readUTF8String();\n      eatBytes(moduleName.nextIndex);\n      dump([], \"module name (\".concat(moduleName.value, \")\"));\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"name (\".concat(name.value, \")\"));\n      /**\n       * Import descr\n       */\n\n      var descrTypeByte = readByte();\n      eatBytes(1);\n      var descrType = constants.importTypes[descrTypeByte];\n      dump([descrTypeByte], \"import kind\");\n      if (typeof descrType === \"undefined\") {\n        throw new CompileError(\"Unknown import description type: \" + toHex(descrTypeByte));\n      }\n      var importDescr = void 0;\n      if (descrType === \"func\") {\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n        }\n        var id = getUniqueName(\"func\");\n        importDescr = t.funcImportDescr(id, t.signature(signature.params, signature.result));\n        state.functionsInModule.push({\n          id: t.identifier(name.value),\n          signature: signature,\n          isExternal: true\n        });\n      } else if (descrType === \"global\") {\n        importDescr = parseGlobalType();\n        var globalNode = t.global(importDescr, []);\n        state.globalsInModule.push(globalNode);\n      } else if (descrType === \"table\") {\n        importDescr = parseTableType(i);\n      } else if (descrType === \"mem\") {\n        var memoryNode = parseMemoryType(0);\n        state.memoriesInModule.push(memoryNode);\n        importDescr = memoryNode;\n      } else {\n        throw new CompileError(\"Unsupported import of type: \" + descrType);\n      }\n      imports.push(function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.moduleImport(moduleName.value, name.value, importDescr), endLoc, _startLoc2);\n      }());\n    }\n    return imports;\n  } // Function section\n  // https://webassembly.github.io/spec/binary/modules.html#function-section\n\n  function parseFuncSection(numberOfFunctions) {\n    dump([numberOfFunctions], \"num funcs\");\n    for (var i = 0; i < numberOfFunctions; i++) {\n      var indexU32 = readU32();\n      var typeindex = indexU32.value;\n      eatBytes(indexU32.nextIndex);\n      dump([typeindex], \"type index\");\n      var signature = state.typesInModule[typeindex];\n      if (typeof signature === \"undefined\") {\n        throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n      } // preserve anonymous, a name might be resolved later\n\n      var id = t.withRaw(t.identifier(getUniqueName(\"func\")), \"\");\n      state.functionsInModule.push({\n        id: id,\n        signature: signature,\n        isExternal: false\n      });\n    }\n  } // Export section\n  // https://webassembly.github.io/spec/binary/modules.html#export-section\n\n  function parseExportSection(numberOfExport) {\n    dump([numberOfExport], \"num exports\"); // Parse vector of exports\n\n    for (var i = 0; i < numberOfExport; i++) {\n      var _startLoc3 = getPosition();\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"export name (\".concat(name.value, \")\"));\n      /**\n       * exportdescr\n       */\n\n      var typeIndex = readByte();\n      eatBytes(1);\n      dump([typeIndex], \"export kind\");\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      dump([index], \"export index\");\n      var id = void 0,\n        signature = void 0;\n      if (constants.exportTypes[typeIndex] === \"Func\") {\n        var func = state.functionsInModule[index];\n        if (typeof func === \"undefined\") {\n          throw new CompileError(\"unknown function (\".concat(index, \")\"));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = func.signature;\n      } else if (constants.exportTypes[typeIndex] === \"Table\") {\n        var table = state.tablesInModule[index];\n        if (typeof table === \"undefined\") {\n          throw new CompileError(\"unknown table \".concat(index));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Mem\") {\n        var memNode = state.memoriesInModule[index];\n        if (typeof memNode === \"undefined\") {\n          throw new CompileError(\"unknown memory \".concat(index));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Global\") {\n        var global = state.globalsInModule[index];\n        if (typeof global === \"undefined\") {\n          throw new CompileError(\"unknown global \".concat(index));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else {\n        console.warn(\"Unsupported export type: \" + toHex(typeIndex));\n        return;\n      }\n      var endLoc = getPosition();\n      state.elementsInExportSection.push({\n        name: name.value,\n        type: constants.exportTypes[typeIndex],\n        signature: signature,\n        id: id,\n        index: index,\n        endLoc: endLoc,\n        startLoc: _startLoc3\n      });\n    }\n  } // Code section\n  // https://webassembly.github.io/spec/binary/modules.html#code-section\n\n  function parseCodeSection(numberOfFuncs) {\n    dump([numberOfFuncs], \"number functions\"); // Parse vector of function\n\n    for (var i = 0; i < numberOfFuncs; i++) {\n      var _startLoc4 = getPosition();\n      dumpSep(\"function body \" + i); // the u32 size of the function code in bytes\n      // Ignore it for now\n\n      var bodySizeU32 = readU32();\n      eatBytes(bodySizeU32.nextIndex);\n      dump([bodySizeU32.value], \"function body size\");\n      var code = [];\n      /**\n       * Parse locals\n       */\n\n      var funcLocalNumU32 = readU32();\n      var funcLocalNum = funcLocalNumU32.value;\n      eatBytes(funcLocalNumU32.nextIndex);\n      dump([funcLocalNum], \"num locals\");\n      var locals = [];\n      for (var _i = 0; _i < funcLocalNum; _i++) {\n        var _startLoc5 = getPosition();\n        var localCountU32 = readU32();\n        var localCount = localCountU32.value;\n        eatBytes(localCountU32.nextIndex);\n        dump([localCount], \"num local\");\n        var valtypeByte = readByte();\n        eatBytes(1);\n        var type = constants.valtypes[valtypeByte];\n        var args = [];\n        for (var _i2 = 0; _i2 < localCount; _i2++) {\n          args.push(t.valtypeLiteral(type));\n        }\n        var localNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(\"local\", args), endLoc, _startLoc5);\n        }();\n        locals.push(localNode);\n        dump([valtypeByte], type);\n        if (typeof type === \"undefined\") {\n          throw new CompileError(\"Unexpected valtype: \" + toHex(valtypeByte));\n        }\n      }\n      code.push.apply(code, locals); // Decode instructions until the end\n\n      parseInstructionBlock(code);\n      var endLoc = getPosition();\n      state.elementsInCodeSection.push({\n        code: code,\n        locals: locals,\n        endLoc: endLoc,\n        startLoc: _startLoc4,\n        bodySize: bodySizeU32.value\n      });\n    }\n  }\n  function parseInstructionBlock(code) {\n    while (true) {\n      var _startLoc6 = getPosition();\n      var instructionAlreadyCreated = false;\n      var instructionByte = readByte();\n      eatBytes(1);\n      if (instructionByte === 0xfe) {\n        throw new CompileError(\"Atomic instructions are not implemented\");\n      }\n      var instruction = constants.symbolsByByte[instructionByte];\n      if (typeof instruction === \"undefined\") {\n        throw new CompileError(\"Unexpected instruction: \" + toHex(instructionByte));\n      }\n      if (typeof instruction.object === \"string\") {\n        dump([instructionByte], \"\".concat(instruction.object, \".\").concat(instruction.name));\n      } else {\n        dump([instructionByte], instruction.name);\n      }\n      /**\n       * End of the function\n       */\n\n      if (instruction.name === \"end\") {\n        var node = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(instruction.name), endLoc, _startLoc6);\n        }();\n        code.push(node);\n        break;\n      }\n      var args = [];\n      if (instruction.name === \"loop\") {\n        var _startLoc7 = getPosition();\n        var blocktypeByte = readByte();\n        eatBytes(1);\n        var blocktype = constants.blockTypes[blocktypeByte];\n        dump([blocktypeByte], \"blocktype\");\n        if (typeof blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(blocktypeByte));\n        }\n        var instr = [];\n        parseInstructionBlock(instr); // preserve anonymous\n\n        var label = t.withRaw(t.identifier(getUniqueName(\"loop\")), \"\");\n        var loopNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.loopInstruction(label, blocktype, instr), endLoc, _startLoc7);\n        }();\n        code.push(loopNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"if\") {\n        var _startLoc8 = getPosition();\n        var _blocktypeByte = readByte();\n        eatBytes(1);\n        var _blocktype = constants.blockTypes[_blocktypeByte];\n        dump([_blocktypeByte], \"blocktype\");\n        if (typeof _blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte));\n        }\n        var testIndex = t.withRaw(t.identifier(getUniqueName(\"if\")), \"\");\n        var ifBody = [];\n        parseInstructionBlock(ifBody); // Defaults to no alternate\n\n        var elseIndex = 0;\n        for (elseIndex = 0; elseIndex < ifBody.length; ++elseIndex) {\n          var _instr = ifBody[elseIndex];\n          if (_instr.type === \"Instr\" && _instr.id === \"else\") {\n            break;\n          }\n        }\n        var consequentInstr = ifBody.slice(0, elseIndex);\n        var alternate = ifBody.slice(elseIndex + 1); // wast sugar\n\n        var testInstrs = [];\n        var ifNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.ifInstruction(testIndex, testInstrs, _blocktype, consequentInstr, alternate), endLoc, _startLoc8);\n        }();\n        code.push(ifNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"block\") {\n        var _startLoc9 = getPosition();\n        var _blocktypeByte2 = readByte();\n        eatBytes(1);\n        var _blocktype2 = constants.blockTypes[_blocktypeByte2];\n        dump([_blocktypeByte2], \"blocktype\");\n        if (typeof _blocktype2 === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte2));\n        }\n        var _instr2 = [];\n        parseInstructionBlock(_instr2); // preserve anonymous\n\n        var _label = t.withRaw(t.identifier(getUniqueName(\"block\")), \"\");\n        var blockNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.blockInstruction(_label, _instr2, _blocktype2), endLoc, _startLoc9);\n        }();\n        code.push(blockNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call\") {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        var callNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.callInstruction(t.indexLiteral(index)), endLoc, _startLoc6);\n        }();\n        code.push(callNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call_indirect\") {\n        var _startLoc10 = getPosition();\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"call_indirect signature not found (\".concat(typeindex, \")\"));\n        }\n        var _callNode = t.callIndirectInstruction(t.signature(signature.params, signature.result), []);\n        var flagU32 = readU32();\n        var flag = flagU32.value; // 0x00 - reserved byte\n\n        eatBytes(flagU32.nextIndex);\n        if (flag !== 0) {\n          throw new CompileError(\"zero flag expected\");\n        }\n        code.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(_callNode, endLoc, _startLoc10);\n        }());\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"br_table\") {\n        var indicesu32 = readU32();\n        var indices = indicesu32.value;\n        eatBytes(indicesu32.nextIndex);\n        dump([indices], \"num indices\");\n        for (var i = 0; i <= indices; i++) {\n          var _indexu = readU32();\n          var _index = _indexu.value;\n          eatBytes(_indexu.nextIndex);\n          dump([_index], \"index\");\n          args.push(t.numberLiteralFromRaw(_indexu.value.toString(), \"u32\"));\n        }\n      } else if (instructionByte >= 0x28 && instructionByte <= 0x40) {\n        /**\n         * Memory instructions\n         */\n        if (instruction.name === \"grow_memory\" || instruction.name === \"current_memory\") {\n          var _indexU = readU32();\n          var _index2 = _indexU.value;\n          eatBytes(_indexU.nextIndex);\n          if (_index2 !== 0) {\n            throw new Error(\"zero flag expected\");\n          }\n          dump([_index2], \"index\");\n        } else {\n          var aligun32 = readU32();\n          var align = aligun32.value;\n          eatBytes(aligun32.nextIndex);\n          dump([align], \"align\");\n          var offsetu32 = readU32();\n          var _offset2 = offsetu32.value;\n          eatBytes(offsetu32.nextIndex);\n          dump([_offset2], \"offset\");\n        }\n      } else if (instructionByte >= 0x41 && instructionByte <= 0x44) {\n        /**\n         * Numeric instructions\n         */\n        if (instruction.object === \"i32\") {\n          var value32 = read32();\n          var value = value32.value;\n          eatBytes(value32.nextIndex);\n          dump([value], \"i32 value\");\n          args.push(t.numberLiteralFromRaw(value));\n        }\n        if (instruction.object === \"u32\") {\n          var valueu32 = readU32();\n          var _value = valueu32.value;\n          eatBytes(valueu32.nextIndex);\n          dump([_value], \"u32 value\");\n          args.push(t.numberLiteralFromRaw(_value));\n        }\n        if (instruction.object === \"i64\") {\n          var value64 = read64();\n          var _value2 = value64.value;\n          eatBytes(value64.nextIndex);\n          dump([Number(_value2.toString())], \"i64 value\");\n          var high = _value2.high,\n            low = _value2.low;\n          var _node = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: high,\n              low: low\n            }\n          };\n          args.push(_node);\n        }\n        if (instruction.object === \"u64\") {\n          var valueu64 = readU64();\n          var _value3 = valueu64.value;\n          eatBytes(valueu64.nextIndex);\n          dump([Number(_value3.toString())], \"u64 value\");\n          var _high = _value3.high,\n            _low = _value3.low;\n          var _node2 = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: _high,\n              low: _low\n            }\n          };\n          args.push(_node2);\n        }\n        if (instruction.object === \"f32\") {\n          var valuef32 = readF32();\n          var _value4 = valuef32.value;\n          eatBytes(valuef32.nextIndex);\n          dump([_value4], \"f32 value\");\n          args.push(\n          // $FlowIgnore\n          t.floatLiteral(_value4, valuef32.nan, valuef32.inf, String(_value4)));\n        }\n        if (instruction.object === \"f64\") {\n          var valuef64 = readF64();\n          var _value5 = valuef64.value;\n          eatBytes(valuef64.nextIndex);\n          dump([_value5], \"f64 value\");\n          args.push(\n          // $FlowIgnore\n          t.floatLiteral(_value5, valuef64.nan, valuef64.inf, String(_value5)));\n        }\n      } else {\n        for (var _i3 = 0; _i3 < instruction.numberOfArgs; _i3++) {\n          var u32 = readU32();\n          eatBytes(u32.nextIndex);\n          dump([u32.value], \"argument \" + _i3);\n          args.push(t.numberLiteralFromRaw(u32.value));\n        }\n      }\n      if (instructionAlreadyCreated === false) {\n        if (typeof instruction.object === \"string\") {\n          var _node3 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.objectInstruction(instruction.name, instruction.object, args), endLoc, _startLoc6);\n          }();\n          code.push(_node3);\n        } else {\n          var _node4 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.instruction(instruction.name, args), endLoc, _startLoc6);\n          }();\n          code.push(_node4);\n        }\n      }\n    }\n  } // https://webassembly.github.io/spec/core/binary/types.html#limits\n\n  function parseLimits() {\n    var limitType = readByte();\n    eatBytes(1);\n    dump([limitType], \"limit type\");\n    var min, max;\n    if (limitType === 0x01 || limitType === 0x03 // shared limits\n    ) {\n      var u32min = readU32();\n      min = parseInt(u32min.value);\n      eatBytes(u32min.nextIndex);\n      dump([min], \"min\");\n      var u32max = readU32();\n      max = parseInt(u32max.value);\n      eatBytes(u32max.nextIndex);\n      dump([max], \"max\");\n    }\n    if (limitType === 0x00) {\n      var _u32min = readU32();\n      min = parseInt(_u32min.value);\n      eatBytes(_u32min.nextIndex);\n      dump([min], \"min\");\n    }\n    return t.limit(min, max);\n  } // https://webassembly.github.io/spec/core/binary/types.html#binary-tabletype\n\n  function parseTableType(index) {\n    var name = t.withRaw(t.identifier(getUniqueName(\"table\")), String(index));\n    var elementTypeByte = readByte();\n    eatBytes(1);\n    dump([elementTypeByte], \"element type\");\n    var elementType = constants.tableTypes[elementTypeByte];\n    if (typeof elementType === \"undefined\") {\n      throw new CompileError(\"Unknown element type in table: \" + toHex(elementType));\n    }\n    var limits = parseLimits();\n    return t.table(elementType, limits, name);\n  } // https://webassembly.github.io/spec/binary/types.html#global-types\n\n  function parseGlobalType() {\n    var valtypeByte = readByte();\n    eatBytes(1);\n    var type = constants.valtypes[valtypeByte];\n    dump([valtypeByte], type);\n    if (typeof type === \"undefined\") {\n      throw new CompileError(\"Unknown valtype: \" + toHex(valtypeByte));\n    }\n    var globalTypeByte = readByte();\n    eatBytes(1);\n    var globalType = constants.globalTypes[globalTypeByte];\n    dump([globalTypeByte], \"global type (\".concat(globalType, \")\"));\n    if (typeof globalType === \"undefined\") {\n      throw new CompileError(\"Invalid mutability: \" + toHex(globalTypeByte));\n    }\n    return t.globalType(type, globalType);\n  } // function parseNameModule() {\n  //   const lenu32 = readVaruint32();\n  //   eatBytes(lenu32.nextIndex);\n  //   console.log(\"len\", lenu32);\n  //   const strlen = lenu32.value;\n  //   dump([strlen], \"string length\");\n  //   const bytes = readBytes(strlen);\n  //   eatBytes(strlen);\n  //   const value = utf8.decode(bytes);\n  //   return [t.moduleNameMetadata(value)];\n  // }\n  // this section contains an array of function names and indices\n\n  function parseNameSectionFunctions() {\n    var functionNames = [];\n    var numberOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numberOfFunctionsu32.value;\n    eatBytes(numberOfFunctionsu32.nextIndex);\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      functionNames.push(t.functionNameMetadata(name.value, index));\n    }\n    return functionNames;\n  }\n  function parseNameSectionLocals() {\n    var localNames = [];\n    var numbeOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numbeOfFunctionsu32.value;\n    eatBytes(numbeOfFunctionsu32.nextIndex);\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var functionIndexu32 = readU32();\n      var functionIndex = functionIndexu32.value;\n      eatBytes(functionIndexu32.nextIndex);\n      var numLocalsu32 = readU32();\n      var numLocals = numLocalsu32.value;\n      eatBytes(numLocalsu32.nextIndex);\n      for (var _i4 = 0; _i4 < numLocals; _i4++) {\n        var localIndexu32 = readU32();\n        var localIndex = localIndexu32.value;\n        eatBytes(localIndexu32.nextIndex);\n        var name = readUTF8String();\n        eatBytes(name.nextIndex);\n        localNames.push(t.localNameMetadata(name.value, localIndex, functionIndex));\n      }\n    }\n    return localNames;\n  } // this is a custom section used for name resolution\n  // https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n\n  function parseNameSection(remainingBytes) {\n    var nameMetadata = [];\n    var initialOffset = offset;\n    while (offset - initialOffset < remainingBytes) {\n      // name_type\n      var sectionTypeByte = readVaruint7();\n      eatBytes(sectionTypeByte.nextIndex); // name_payload_len\n\n      var subSectionSizeInBytesu32 = readVaruint32();\n      eatBytes(subSectionSizeInBytesu32.nextIndex);\n      switch (sectionTypeByte.value) {\n        // case 0: {\n        // TODO(sven): re-enable that\n        // Current status: it seems that when we decode the module's name\n        // no name_payload_len is used.\n        //\n        // See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n        //\n        // nameMetadata.push(...parseNameModule());\n        // break;\n        // }\n        case 1:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionFunctions()));\n            break;\n          }\n        case 2:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionLocals()));\n            break;\n          }\n        default:\n          {\n            // skip unknown subsection\n            eatBytes(subSectionSizeInBytesu32.value);\n          }\n      }\n    }\n    return nameMetadata;\n  } // this is a custom setion used for information about the producers\n  // https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md\n\n  function parseProducersSection() {\n    var metadata = t.producersSectionMetadata([]); // field_count\n\n    var sectionTypeByte = readVaruint32();\n    eatBytes(sectionTypeByte.nextIndex);\n    dump([sectionTypeByte.value], \"num of producers\");\n    var fields = {\n      language: [],\n      \"processed-by\": [],\n      sdk: []\n    }; // fields\n\n    for (var fieldI = 0; fieldI < sectionTypeByte.value; fieldI++) {\n      // field_name\n      var fieldName = readUTF8String();\n      eatBytes(fieldName.nextIndex); // field_value_count\n\n      var valueCount = readVaruint32();\n      eatBytes(valueCount.nextIndex); // field_values\n\n      for (var producerI = 0; producerI < valueCount.value; producerI++) {\n        var producerName = readUTF8String();\n        eatBytes(producerName.nextIndex);\n        var producerVersion = readUTF8String();\n        eatBytes(producerVersion.nextIndex);\n        fields[fieldName.value].push(t.producerMetadataVersionedName(producerName.value, producerVersion.value));\n      }\n      metadata.producers.push(fields[fieldName.value]);\n    }\n    return metadata;\n  }\n  function parseGlobalSection(numberOfGlobals) {\n    var globals = [];\n    dump([numberOfGlobals], \"num globals\");\n    for (var i = 0; i < numberOfGlobals; i++) {\n      var _startLoc11 = getPosition();\n      var globalType = parseGlobalType();\n      /**\n       * Global expressions\n       */\n\n      var init = [];\n      parseInstructionBlock(init);\n      var node = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.global(globalType, init), endLoc, _startLoc11);\n      }();\n      globals.push(node);\n      state.globalsInModule.push(node);\n    }\n    return globals;\n  }\n  function parseElemSection(numberOfElements) {\n    var elems = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var _startLoc12 = getPosition();\n      var tableindexu32 = readU32();\n      var tableindex = tableindexu32.value;\n      eatBytes(tableindexu32.nextIndex);\n      dump([tableindex], \"table index\");\n      /**\n       * Parse instructions\n       */\n\n      var instr = [];\n      parseInstructionBlock(instr);\n      /**\n       * Parse ( vector function index ) *\n       */\n\n      var indicesu32 = readU32();\n      var indices = indicesu32.value;\n      eatBytes(indicesu32.nextIndex);\n      dump([indices], \"num indices\");\n      var indexValues = [];\n      for (var _i5 = 0; _i5 < indices; _i5++) {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        indexValues.push(t.indexLiteral(index));\n      }\n      var elemNode = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.elem(t.indexLiteral(tableindex), instr, indexValues), endLoc, _startLoc12);\n      }();\n      elems.push(elemNode);\n    }\n    return elems;\n  } // https://webassembly.github.io/spec/core/binary/types.html#memory-types\n\n  function parseMemoryType(i) {\n    var limits = parseLimits();\n    return t.memory(limits, t.indexLiteral(i));\n  } // https://webassembly.github.io/spec/binary/modules.html#table-section\n\n  function parseTableSection(numberOfElements) {\n    var tables = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var tablesNode = parseTableType(i);\n      state.tablesInModule.push(tablesNode);\n      tables.push(tablesNode);\n    }\n    return tables;\n  } // https://webassembly.github.io/spec/binary/modules.html#memory-section\n\n  function parseMemorySection(numberOfElements) {\n    var memories = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryNode = parseMemoryType(i);\n      state.memoriesInModule.push(memoryNode);\n      memories.push(memoryNode);\n    }\n    return memories;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-startsec\n\n  function parseStartSection() {\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var startFuncIndex = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([startFuncIndex], \"index\");\n    return function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.start(t.indexLiteral(startFuncIndex)), endLoc, startLoc);\n    }();\n  } // https://webassembly.github.io/spec/binary/modules.html#data-section\n\n  function parseDataSection(numberOfElements) {\n    var dataEntries = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryIndexu32 = readU32();\n      var memoryIndex = memoryIndexu32.value;\n      eatBytes(memoryIndexu32.nextIndex);\n      dump([memoryIndex], \"memory index\");\n      var instrs = [];\n      parseInstructionBlock(instrs);\n      var hasExtraInstrs = instrs.filter(function (i) {\n        return i.id !== \"end\";\n      }).length !== 1;\n      if (hasExtraInstrs) {\n        throw new CompileError(\"data section offset must be a single instruction\");\n      }\n      var bytes = parseVec(function (b) {\n        return b;\n      });\n      dump([], \"init\");\n      dataEntries.push(t.data(t.memIndexLiteral(memoryIndex), instrs[0], t.byteArray(bytes)));\n    }\n    return dataEntries;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-section\n\n  function parseSection(sectionIndex) {\n    var sectionId = readByte();\n    eatBytes(1);\n    if (sectionId >= sectionIndex || sectionIndex === constants.sections.custom) {\n      sectionIndex = sectionId + 1;\n    } else {\n      if (sectionId !== constants.sections.custom) throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n    }\n    var nextSectionIndex = sectionIndex;\n    var startOffset = offset;\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var sectionSizeInBytes = u32.value;\n    eatBytes(u32.nextIndex);\n    var sectionSizeInBytesNode = function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.numberLiteralFromRaw(sectionSizeInBytes), endLoc, startLoc);\n    }();\n    switch (sectionId) {\n      case constants.sections.type:\n        {\n          dumpSep(\"section Type\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc13 = getPosition();\n          var _u = readU32();\n          var numberOfTypes = _u.value;\n          eatBytes(_u.nextIndex);\n          var _metadata = t.sectionMetadata(\"type\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTypes), endLoc, _startLoc13);\n          }());\n          var _nodes = parseTypeSection(numberOfTypes);\n          return {\n            nodes: _nodes,\n            metadata: _metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.table:\n        {\n          dumpSep(\"section Table\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc14 = getPosition();\n          var _u2 = readU32();\n          var numberOfTable = _u2.value;\n          eatBytes(_u2.nextIndex);\n          dump([numberOfTable], \"num tables\");\n          var _metadata2 = t.sectionMetadata(\"table\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTable), endLoc, _startLoc14);\n          }());\n          var _nodes2 = parseTableSection(numberOfTable);\n          return {\n            nodes: _nodes2,\n            metadata: _metadata2,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.import:\n        {\n          dumpSep(\"section Import\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc15 = getPosition();\n          var numberOfImportsu32 = readU32();\n          var numberOfImports = numberOfImportsu32.value;\n          eatBytes(numberOfImportsu32.nextIndex);\n          dump([numberOfImports], \"number of imports\");\n          var _metadata3 = t.sectionMetadata(\"import\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfImports), endLoc, _startLoc15);\n          }());\n          var _nodes3 = parseImportSection(numberOfImports);\n          return {\n            nodes: _nodes3,\n            metadata: _metadata3,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.func:\n        {\n          dumpSep(\"section Function\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc16 = getPosition();\n          var numberOfFunctionsu32 = readU32();\n          var numberOfFunctions = numberOfFunctionsu32.value;\n          eatBytes(numberOfFunctionsu32.nextIndex);\n          var _metadata4 = t.sectionMetadata(\"func\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFunctions), endLoc, _startLoc16);\n          }());\n          parseFuncSection(numberOfFunctions);\n          var _nodes4 = [];\n          return {\n            nodes: _nodes4,\n            metadata: _metadata4,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.export:\n        {\n          dumpSep(\"section Export\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc17 = getPosition();\n          var _u3 = readU32();\n          var numberOfExport = _u3.value;\n          eatBytes(_u3.nextIndex);\n          var _metadata5 = t.sectionMetadata(\"export\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfExport), endLoc, _startLoc17);\n          }());\n          parseExportSection(numberOfExport);\n          var _nodes5 = [];\n          return {\n            nodes: _nodes5,\n            metadata: _metadata5,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.code:\n        {\n          dumpSep(\"section Code\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc18 = getPosition();\n          var _u4 = readU32();\n          var numberOfFuncs = _u4.value;\n          eatBytes(_u4.nextIndex);\n          var _metadata6 = t.sectionMetadata(\"code\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFuncs), endLoc, _startLoc18);\n          }());\n          if (opts.ignoreCodeSection === true) {\n            var remainingBytes = sectionSizeInBytes - _u4.nextIndex;\n            eatBytes(remainingBytes); // eat the entire section\n          } else {\n            parseCodeSection(numberOfFuncs);\n          }\n          var _nodes6 = [];\n          return {\n            nodes: _nodes6,\n            metadata: _metadata6,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.start:\n        {\n          dumpSep(\"section Start\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata7 = t.sectionMetadata(\"start\", startOffset, sectionSizeInBytesNode);\n          var _nodes7 = [parseStartSection()];\n          return {\n            nodes: _nodes7,\n            metadata: _metadata7,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.element:\n        {\n          dumpSep(\"section Element\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc19 = getPosition();\n          var numberOfElementsu32 = readU32();\n          var numberOfElements = numberOfElementsu32.value;\n          eatBytes(numberOfElementsu32.nextIndex);\n          var _metadata8 = t.sectionMetadata(\"element\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfElements), endLoc, _startLoc19);\n          }());\n          var _nodes8 = parseElemSection(numberOfElements);\n          return {\n            nodes: _nodes8,\n            metadata: _metadata8,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.global:\n        {\n          dumpSep(\"section Global\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc20 = getPosition();\n          var numberOfGlobalsu32 = readU32();\n          var numberOfGlobals = numberOfGlobalsu32.value;\n          eatBytes(numberOfGlobalsu32.nextIndex);\n          var _metadata9 = t.sectionMetadata(\"global\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfGlobals), endLoc, _startLoc20);\n          }());\n          var _nodes9 = parseGlobalSection(numberOfGlobals);\n          return {\n            nodes: _nodes9,\n            metadata: _metadata9,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.memory:\n        {\n          dumpSep(\"section Memory\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc21 = getPosition();\n          var _numberOfElementsu = readU32();\n          var _numberOfElements = _numberOfElementsu.value;\n          eatBytes(_numberOfElementsu.nextIndex);\n          var _metadata10 = t.sectionMetadata(\"memory\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements), endLoc, _startLoc21);\n          }());\n          var _nodes10 = parseMemorySection(_numberOfElements);\n          return {\n            nodes: _nodes10,\n            metadata: _metadata10,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case constants.sections.data:\n        {\n          dumpSep(\"section Data\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata11 = t.sectionMetadata(\"data\", startOffset, sectionSizeInBytesNode);\n          var _startLoc22 = getPosition();\n          var _numberOfElementsu2 = readU32();\n          var _numberOfElements2 = _numberOfElementsu2.value;\n          eatBytes(_numberOfElementsu2.nextIndex);\n          _metadata11.vectorOfSize = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements2), endLoc, _startLoc22);\n          }();\n          if (opts.ignoreDataSection === true) {\n            var _remainingBytes = sectionSizeInBytes - _numberOfElementsu2.nextIndex;\n            eatBytes(_remainingBytes); // eat the entire section\n\n            dumpSep(\"ignore data (\" + sectionSizeInBytes + \" bytes)\");\n            return {\n              nodes: [],\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          } else {\n            var _nodes11 = parseDataSection(_numberOfElements2);\n            return {\n              nodes: _nodes11,\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          }\n        }\n      case constants.sections.custom:\n        {\n          dumpSep(\"section Custom\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata12 = [t.sectionMetadata(\"custom\", startOffset, sectionSizeInBytesNode)];\n          var sectionName = readUTF8String();\n          eatBytes(sectionName.nextIndex);\n          dump([], \"section name (\".concat(sectionName.value, \")\"));\n          var _remainingBytes2 = sectionSizeInBytes - sectionName.nextIndex;\n          if (sectionName.value === \"name\") {\n            var initialOffset = offset;\n            try {\n              _metadata12.push.apply(_metadata12, _toConsumableArray(parseNameSection(_remainingBytes2)));\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"name\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (initialOffset + _remainingBytes2));\n            }\n          } else if (sectionName.value === \"producers\") {\n            var _initialOffset = offset;\n            try {\n              _metadata12.push(parseProducersSection());\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"producers\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (_initialOffset + _remainingBytes2));\n            }\n          } else {\n            // We don't parse the custom section\n            eatBytes(_remainingBytes2);\n            dumpSep(\"ignore custom \" + JSON.stringify(sectionName.value) + \" section (\" + _remainingBytes2 + \" bytes)\");\n          }\n          return {\n            nodes: [],\n            metadata: _metadata12,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n    }\n    throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n  }\n  parseModuleHeader();\n  parseVersion();\n  var moduleFields = [];\n  var sectionIndex = 0;\n  var moduleMetadata = {\n    sections: [],\n    functionNames: [],\n    localNames: [],\n    producers: []\n  };\n  /**\n   * All the generate declaration are going to be stored in our state\n   */\n\n  while (offset < buf.length) {\n    var _parseSection = parseSection(sectionIndex),\n      _nodes12 = _parseSection.nodes,\n      _metadata13 = _parseSection.metadata,\n      nextSectionIndex = _parseSection.nextSectionIndex;\n    moduleFields.push.apply(moduleFields, _toConsumableArray(_nodes12));\n    var metadataArray = Array.isArray(_metadata13) ? _metadata13 : [_metadata13];\n    metadataArray.forEach(function (metadataItem) {\n      if (metadataItem.type === \"FunctionNameMetadata\") {\n        moduleMetadata.functionNames.push(metadataItem);\n      } else if (metadataItem.type === \"LocalNameMetadata\") {\n        moduleMetadata.localNames.push(metadataItem);\n      } else if (metadataItem.type === \"ProducersSectionMetadata\") {\n        moduleMetadata.producers.push(metadataItem);\n      } else {\n        moduleMetadata.sections.push(metadataItem);\n      }\n    }); // Ignore custom section\n\n    if (nextSectionIndex) {\n      sectionIndex = nextSectionIndex;\n    }\n  }\n  /**\n   * Transform the state into AST nodes\n   */\n\n  var funcIndex = 0;\n  state.functionsInModule.forEach(function (func) {\n    var params = func.signature.params;\n    var result = func.signature.result;\n    var body = []; // External functions doesn't provide any code, can skip it here\n\n    if (func.isExternal === true) {\n      return;\n    }\n    var decodedElementInCodeSection = state.elementsInCodeSection[funcIndex];\n    if (opts.ignoreCodeSection === false) {\n      if (typeof decodedElementInCodeSection === \"undefined\") {\n        throw new CompileError(\"func \" + toHex(funcIndex) + \" code not found\");\n      }\n      body = decodedElementInCodeSection.code;\n    }\n    funcIndex++;\n    var funcNode = t.func(func.id, t.signature(params, result), body);\n    if (func.isExternal === true) {\n      funcNode.isExternal = func.isExternal;\n    } // Add function position in the binary if possible\n\n    if (opts.ignoreCodeSection === false) {\n      var _startLoc23 = decodedElementInCodeSection.startLoc,\n        endLoc = decodedElementInCodeSection.endLoc,\n        bodySize = decodedElementInCodeSection.bodySize;\n      funcNode = t.withLoc(funcNode, endLoc, _startLoc23);\n      funcNode.metadata = {\n        bodySize: bodySize\n      };\n    }\n    moduleFields.push(funcNode);\n  });\n  state.elementsInExportSection.forEach(function (moduleExport) {\n    /**\n     * If the export has no id, we won't be able to call it from the outside\n     * so we can omit it\n     */\n    if (moduleExport.id != null) {\n      moduleFields.push(t.withLoc(t.moduleExport(moduleExport.name, t.moduleExportDescr(moduleExport.type, moduleExport.id)), moduleExport.endLoc, moduleExport.startLoc));\n    }\n  });\n  dumpSep(\"end of program\");\n  var module = t.module(null, moduleFields, t.moduleMetadata(moduleMetadata.sections, moduleMetadata.functionNames, moduleMetadata.localNames, moduleMetadata.producers));\n  return t.program([module]);\n}","map":{"version":3,"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","CompileError","ieee754","utf8","t","decodeInt32","decodeUInt32","MAX_NUMBER_OF_BYTE_U32","decodeInt64","decodeUInt64","MAX_NUMBER_OF_BYTE_U64","constants","toHex","n","Number","toString","byteArrayEq","l","r","decode","ab","opts","buf","Uint8Array","getUniqueName","getUniqueNameGenerator","offset","getPosition","line","column","dump","b","msg","pad","str","map","join","console","log","dumpSep","state","elementsInFuncSection","elementsInExportSection","elementsInCodeSection","memoriesInModule","typesInModule","functionsInModule","tablesInModule","globalsInModule","isEOF","eatBytes","readBytesAtOffset","_offset","numberOfBytes","push","readBytes","readF64","bytes","NUMBER_OF_BYTE_F64","value","decodeF64","Math","sign","Infinity","inf","nextIndex","isNaN","mantissa","pow","nan","readF32","NUMBER_OF_BYTE_F32","decodeF32","readUTF8String","lenu32","readU32","strlen","buffer","Buffer","readVaruint32","readVaruint7","read32","read64","readU64","readByte","parseModuleHeader","Error","header","magicModuleHeader","parseVersion","version","moduleVersion","parseVec","cast","u32","elements","byte","parseTypeSection","numberOfTypes","typeInstructionNodes","_startLoc","type","types","func","paramValtypes","valtypes","params","v","funcParam","result","endLoc","withLoc","typeInstruction","undefined","signature","parseImportSection","numberOfImports","imports","_startLoc2","moduleName","concat","name","descrTypeByte","descrType","importTypes","importDescr","indexU32","typeindex","id","funcImportDescr","identifier","isExternal","parseGlobalType","globalNode","global","parseTableType","memoryNode","parseMemoryType","moduleImport","parseFuncSection","numberOfFunctions","withRaw","parseExportSection","numberOfExport","_startLoc3","typeIndex","indexu32","index","exportTypes","numberLiteralFromRaw","String","table","memNode","warn","startLoc","parseCodeSection","numberOfFuncs","_startLoc4","bodySizeU32","code","funcLocalNumU32","funcLocalNum","locals","_i","_startLoc5","localCountU32","localCount","valtypeByte","args","_i2","valtypeLiteral","localNode","instruction","apply","parseInstructionBlock","bodySize","_startLoc6","instructionAlreadyCreated","instructionByte","symbolsByByte","object","node","_startLoc7","blocktypeByte","blocktype","blockTypes","instr","label","loopNode","loopInstruction","_startLoc8","_blocktypeByte","_blocktype","testIndex","ifBody","elseIndex","_instr","consequentInstr","slice","alternate","testInstrs","ifNode","ifInstruction","_startLoc9","_blocktypeByte2","_blocktype2","_instr2","_label","blockNode","blockInstruction","callNode","callInstruction","indexLiteral","_startLoc10","_callNode","callIndirectInstruction","flagU32","flag","indicesu32","indices","_indexu","_index","_indexU","_index2","aligun32","align","offsetu32","_offset2","value32","valueu32","_value","value64","_value2","high","low","_node","valueu64","_value3","_high","_low","_node2","valuef32","_value4","floatLiteral","valuef64","_value5","_i3","numberOfArgs","_node3","objectInstruction","_node4","parseLimits","limitType","min","max","u32min","parseInt","u32max","_u32min","limit","elementTypeByte","elementType","tableTypes","limits","globalTypeByte","globalType","globalTypes","parseNameSectionFunctions","functionNames","numberOfFunctionsu32","numbeOfFunctions","functionNameMetadata","parseNameSectionLocals","localNames","numbeOfFunctionsu32","functionIndexu32","functionIndex","numLocalsu32","numLocals","_i4","localIndexu32","localIndex","localNameMetadata","parseNameSection","remainingBytes","nameMetadata","initialOffset","sectionTypeByte","subSectionSizeInBytesu32","parseProducersSection","metadata","producersSectionMetadata","fields","language","sdk","fieldI","fieldName","valueCount","producerI","producerName","producerVersion","producerMetadataVersionedName","producers","parseGlobalSection","numberOfGlobals","globals","_startLoc11","init","parseElemSection","numberOfElements","elems","_startLoc12","tableindexu32","tableindex","indexValues","_i5","elemNode","elem","memory","parseTableSection","tables","tablesNode","parseMemorySection","memories","parseStartSection","startFuncIndex","start","parseDataSection","dataEntries","memoryIndexu32","memoryIndex","instrs","hasExtraInstrs","filter","data","memIndexLiteral","byteArray","parseSection","sectionIndex","sectionId","sections","custom","nextSectionIndex","startOffset","sectionSizeInBytes","sectionSizeInBytesNode","_startLoc13","_u","_metadata","sectionMetadata","_nodes","nodes","_startLoc14","_u2","numberOfTable","_metadata2","_nodes2","import","_startLoc15","numberOfImportsu32","_metadata3","_nodes3","_startLoc16","_metadata4","_nodes4","export","_startLoc17","_u3","_metadata5","_nodes5","_startLoc18","_u4","_metadata6","ignoreCodeSection","_nodes6","_metadata7","_nodes7","element","_startLoc19","numberOfElementsu32","_metadata8","_nodes8","_startLoc20","numberOfGlobalsu32","_metadata9","_nodes9","_startLoc21","_numberOfElementsu","_numberOfElements","_metadata10","_nodes10","_metadata11","_startLoc22","_numberOfElementsu2","_numberOfElements2","vectorOfSize","ignoreDataSection","_remainingBytes","_nodes11","_metadata12","sectionName","_remainingBytes2","e","message","_initialOffset","JSON","stringify","moduleFields","moduleMetadata","_parseSection","_nodes12","_metadata13","metadataArray","forEach","metadataItem","funcIndex","body","decodedElementInCodeSection","funcNode","_startLoc23","moduleExport","moduleExportDescr","module","program"],"sources":["/home/soon/bulletin-board/node_modules/@webassemblyjs/wasm-parser/esm/decoder.js"],"sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nimport * as ieee754 from \"@webassemblyjs/ieee754\";\nimport * as utf8 from \"@webassemblyjs/utf8\";\nimport * as t from \"@webassemblyjs/ast\";\nimport { decodeInt32, decodeUInt32, MAX_NUMBER_OF_BYTE_U32, decodeInt64, decodeUInt64, MAX_NUMBER_OF_BYTE_U64 } from \"@webassemblyjs/leb128\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\n\nfunction toHex(n) {\n  return \"0x\" + Number(n).toString(16);\n}\n\nfunction byteArrayEq(l, r) {\n  if (l.length !== r.length) {\n    return false;\n  }\n\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] !== r[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function decode(ab, opts) {\n  var buf = new Uint8Array(ab);\n  var getUniqueName = t.getUniqueNameGenerator();\n  var offset = 0;\n\n  function getPosition() {\n    return {\n      line: -1,\n      column: offset\n    };\n  }\n\n  function dump(b, msg) {\n    if (opts.dump === false) return;\n    var pad = \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n    var str = \"\";\n\n    if (b.length < 5) {\n      str = b.map(toHex).join(\" \");\n    } else {\n      str = \"...\";\n    }\n\n    console.log(toHex(offset) + \":\\t\", str, pad, \";\", msg);\n  }\n\n  function dumpSep(msg) {\n    if (opts.dump === false) return;\n    console.log(\";\", msg);\n  }\n  /**\n   * TODO(sven): we can atually use a same structure\n   * we are adding incrementally new features\n   */\n\n\n  var state = {\n    elementsInFuncSection: [],\n    elementsInExportSection: [],\n    elementsInCodeSection: [],\n\n    /**\n     * Decode memory from:\n     * - Memory section\n     */\n    memoriesInModule: [],\n\n    /**\n     * Decoded types from:\n     * - Type section\n     */\n    typesInModule: [],\n\n    /**\n     * Decoded functions from:\n     * - Function section\n     * - Import section\n     */\n    functionsInModule: [],\n\n    /**\n     * Decoded tables from:\n     * - Table section\n     */\n    tablesInModule: [],\n\n    /**\n     * Decoded globals from:\n     * - Global section\n     */\n    globalsInModule: []\n  };\n\n  function isEOF() {\n    return offset >= buf.length;\n  }\n\n  function eatBytes(n) {\n    offset = offset + n;\n  }\n\n  function readBytesAtOffset(_offset, numberOfBytes) {\n    var arr = [];\n\n    for (var i = 0; i < numberOfBytes; i++) {\n      arr.push(buf[_offset + i]);\n    }\n\n    return arr;\n  }\n\n  function readBytes(numberOfBytes) {\n    return readBytesAtOffset(offset, numberOfBytes);\n  }\n\n  function readF64() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F64);\n    var value = ieee754.decodeF64(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 16 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F64\n    };\n  }\n\n  function readF32() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F32);\n    var value = ieee754.decodeF32(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 128 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F32\n    };\n  }\n\n  function readUTF8String() {\n    var lenu32 = readU32(); // Don't eat any bytes. Instead, peek ahead of the current offset using\n    // readBytesAtOffset below. This keeps readUTF8String neutral with respect\n    // to the current offset, just like the other readX functions.\n\n    var strlen = lenu32.value;\n    dump([strlen], \"string length\");\n    var bytes = readBytesAtOffset(offset + lenu32.nextIndex, strlen);\n    var value = utf8.decode(bytes);\n    return {\n      value: value,\n      nextIndex: strlen + lenu32.nextIndex\n    };\n  }\n  /**\n   * Decode an unsigned 32bits integer\n   *\n   * The length will be handled by the leb librairy, we pass the max number of\n   * byte.\n   */\n\n\n  function readU32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint32() {\n    // where 32 bits = max 4 bytes\n    var bytes = readBytes(4);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint7() {\n    // where 7 bits = max 1 bytes\n    var bytes = readBytes(1);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n  /**\n   * Decode a signed 32bits interger\n   */\n\n\n  function read32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeInt32(buffer);\n  }\n  /**\n   * Decode a signed 64bits integer\n   */\n\n\n  function read64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeInt64(buffer);\n  }\n\n  function readU64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt64(buffer);\n  }\n\n  function readByte() {\n    return readBytes(1)[0];\n  }\n\n  function parseModuleHeader() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var header = readBytes(4);\n\n    if (byteArrayEq(constants.magicModuleHeader, header) === false) {\n      throw new CompileError(\"magic header not detected\");\n    }\n\n    dump(header, \"wasm magic header\");\n    eatBytes(4);\n  }\n\n  function parseVersion() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var version = readBytes(4);\n\n    if (byteArrayEq(constants.moduleVersion, version) === false) {\n      throw new CompileError(\"unknown binary version\");\n    }\n\n    dump(version, \"wasm version\");\n    eatBytes(4);\n  }\n\n  function parseVec(cast) {\n    var u32 = readU32();\n    var length = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([length], \"number\");\n\n    if (length === 0) {\n      return [];\n    }\n\n    var elements = [];\n\n    for (var i = 0; i < length; i++) {\n      var byte = readByte();\n      eatBytes(1);\n      var value = cast(byte);\n      dump([byte], value);\n\n      if (typeof value === \"undefined\") {\n        throw new CompileError(\"Internal failure: parseVec could not cast the value\");\n      }\n\n      elements.push(value);\n    }\n\n    return elements;\n  } // Type section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-typesec\n\n\n  function parseTypeSection(numberOfTypes) {\n    var typeInstructionNodes = [];\n    dump([numberOfTypes], \"num types\");\n\n    for (var i = 0; i < numberOfTypes; i++) {\n      var _startLoc = getPosition();\n\n      dumpSep(\"type \" + i);\n      var type = readByte();\n      eatBytes(1);\n\n      if (type == constants.types.func) {\n        dump([type], \"func\");\n        var paramValtypes = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        var params = paramValtypes.map(function (v) {\n          return t.funcParam(\n          /*valtype*/\n          v);\n        });\n        var result = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        typeInstructionNodes.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.typeInstruction(undefined, t.signature(params, result)), endLoc, _startLoc);\n        }());\n        state.typesInModule.push({\n          params: params,\n          result: result\n        });\n      } else {\n        throw new Error(\"Unsupported type: \" + toHex(type));\n      }\n    }\n\n    return typeInstructionNodes;\n  } // Import section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-importsec\n\n\n  function parseImportSection(numberOfImports) {\n    var imports = [];\n\n    for (var i = 0; i < numberOfImports; i++) {\n      dumpSep(\"import header \" + i);\n\n      var _startLoc2 = getPosition();\n      /**\n       * Module name\n       */\n\n\n      var moduleName = readUTF8String();\n      eatBytes(moduleName.nextIndex);\n      dump([], \"module name (\".concat(moduleName.value, \")\"));\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"name (\".concat(name.value, \")\"));\n      /**\n       * Import descr\n       */\n\n      var descrTypeByte = readByte();\n      eatBytes(1);\n      var descrType = constants.importTypes[descrTypeByte];\n      dump([descrTypeByte], \"import kind\");\n\n      if (typeof descrType === \"undefined\") {\n        throw new CompileError(\"Unknown import description type: \" + toHex(descrTypeByte));\n      }\n\n      var importDescr = void 0;\n\n      if (descrType === \"func\") {\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var id = getUniqueName(\"func\");\n        importDescr = t.funcImportDescr(id, t.signature(signature.params, signature.result));\n        state.functionsInModule.push({\n          id: t.identifier(name.value),\n          signature: signature,\n          isExternal: true\n        });\n      } else if (descrType === \"global\") {\n        importDescr = parseGlobalType();\n        var globalNode = t.global(importDescr, []);\n        state.globalsInModule.push(globalNode);\n      } else if (descrType === \"table\") {\n        importDescr = parseTableType(i);\n      } else if (descrType === \"mem\") {\n        var memoryNode = parseMemoryType(0);\n        state.memoriesInModule.push(memoryNode);\n        importDescr = memoryNode;\n      } else {\n        throw new CompileError(\"Unsupported import of type: \" + descrType);\n      }\n\n      imports.push(function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.moduleImport(moduleName.value, name.value, importDescr), endLoc, _startLoc2);\n      }());\n    }\n\n    return imports;\n  } // Function section\n  // https://webassembly.github.io/spec/binary/modules.html#function-section\n\n\n  function parseFuncSection(numberOfFunctions) {\n    dump([numberOfFunctions], \"num funcs\");\n\n    for (var i = 0; i < numberOfFunctions; i++) {\n      var indexU32 = readU32();\n      var typeindex = indexU32.value;\n      eatBytes(indexU32.nextIndex);\n      dump([typeindex], \"type index\");\n      var signature = state.typesInModule[typeindex];\n\n      if (typeof signature === \"undefined\") {\n        throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n      } // preserve anonymous, a name might be resolved later\n\n\n      var id = t.withRaw(t.identifier(getUniqueName(\"func\")), \"\");\n      state.functionsInModule.push({\n        id: id,\n        signature: signature,\n        isExternal: false\n      });\n    }\n  } // Export section\n  // https://webassembly.github.io/spec/binary/modules.html#export-section\n\n\n  function parseExportSection(numberOfExport) {\n    dump([numberOfExport], \"num exports\"); // Parse vector of exports\n\n    for (var i = 0; i < numberOfExport; i++) {\n      var _startLoc3 = getPosition();\n      /**\n       * Name\n       */\n\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"export name (\".concat(name.value, \")\"));\n      /**\n       * exportdescr\n       */\n\n      var typeIndex = readByte();\n      eatBytes(1);\n      dump([typeIndex], \"export kind\");\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      dump([index], \"export index\");\n      var id = void 0,\n          signature = void 0;\n\n      if (constants.exportTypes[typeIndex] === \"Func\") {\n        var func = state.functionsInModule[index];\n\n        if (typeof func === \"undefined\") {\n          throw new CompileError(\"unknown function (\".concat(index, \")\"));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = func.signature;\n      } else if (constants.exportTypes[typeIndex] === \"Table\") {\n        var table = state.tablesInModule[index];\n\n        if (typeof table === \"undefined\") {\n          throw new CompileError(\"unknown table \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Mem\") {\n        var memNode = state.memoriesInModule[index];\n\n        if (typeof memNode === \"undefined\") {\n          throw new CompileError(\"unknown memory \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Global\") {\n        var global = state.globalsInModule[index];\n\n        if (typeof global === \"undefined\") {\n          throw new CompileError(\"unknown global \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else {\n        console.warn(\"Unsupported export type: \" + toHex(typeIndex));\n        return;\n      }\n\n      var endLoc = getPosition();\n      state.elementsInExportSection.push({\n        name: name.value,\n        type: constants.exportTypes[typeIndex],\n        signature: signature,\n        id: id,\n        index: index,\n        endLoc: endLoc,\n        startLoc: _startLoc3\n      });\n    }\n  } // Code section\n  // https://webassembly.github.io/spec/binary/modules.html#code-section\n\n\n  function parseCodeSection(numberOfFuncs) {\n    dump([numberOfFuncs], \"number functions\"); // Parse vector of function\n\n    for (var i = 0; i < numberOfFuncs; i++) {\n      var _startLoc4 = getPosition();\n\n      dumpSep(\"function body \" + i); // the u32 size of the function code in bytes\n      // Ignore it for now\n\n      var bodySizeU32 = readU32();\n      eatBytes(bodySizeU32.nextIndex);\n      dump([bodySizeU32.value], \"function body size\");\n      var code = [];\n      /**\n       * Parse locals\n       */\n\n      var funcLocalNumU32 = readU32();\n      var funcLocalNum = funcLocalNumU32.value;\n      eatBytes(funcLocalNumU32.nextIndex);\n      dump([funcLocalNum], \"num locals\");\n      var locals = [];\n\n      for (var _i = 0; _i < funcLocalNum; _i++) {\n        var _startLoc5 = getPosition();\n\n        var localCountU32 = readU32();\n        var localCount = localCountU32.value;\n        eatBytes(localCountU32.nextIndex);\n        dump([localCount], \"num local\");\n        var valtypeByte = readByte();\n        eatBytes(1);\n        var type = constants.valtypes[valtypeByte];\n        var args = [];\n\n        for (var _i2 = 0; _i2 < localCount; _i2++) {\n          args.push(t.valtypeLiteral(type));\n        }\n\n        var localNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(\"local\", args), endLoc, _startLoc5);\n        }();\n\n        locals.push(localNode);\n        dump([valtypeByte], type);\n\n        if (typeof type === \"undefined\") {\n          throw new CompileError(\"Unexpected valtype: \" + toHex(valtypeByte));\n        }\n      }\n\n      code.push.apply(code, locals); // Decode instructions until the end\n\n      parseInstructionBlock(code);\n      var endLoc = getPosition();\n      state.elementsInCodeSection.push({\n        code: code,\n        locals: locals,\n        endLoc: endLoc,\n        startLoc: _startLoc4,\n        bodySize: bodySizeU32.value\n      });\n    }\n  }\n\n  function parseInstructionBlock(code) {\n    while (true) {\n      var _startLoc6 = getPosition();\n\n      var instructionAlreadyCreated = false;\n      var instructionByte = readByte();\n      eatBytes(1);\n\n      if (instructionByte === 0xfe) {\n        throw new CompileError(\"Atomic instructions are not implemented\");\n      }\n\n      var instruction = constants.symbolsByByte[instructionByte];\n\n      if (typeof instruction === \"undefined\") {\n        throw new CompileError(\"Unexpected instruction: \" + toHex(instructionByte));\n      }\n\n      if (typeof instruction.object === \"string\") {\n        dump([instructionByte], \"\".concat(instruction.object, \".\").concat(instruction.name));\n      } else {\n        dump([instructionByte], instruction.name);\n      }\n      /**\n       * End of the function\n       */\n\n\n      if (instruction.name === \"end\") {\n        var node = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(instruction.name), endLoc, _startLoc6);\n        }();\n\n        code.push(node);\n        break;\n      }\n\n      var args = [];\n\n      if (instruction.name === \"loop\") {\n        var _startLoc7 = getPosition();\n\n        var blocktypeByte = readByte();\n        eatBytes(1);\n        var blocktype = constants.blockTypes[blocktypeByte];\n        dump([blocktypeByte], \"blocktype\");\n\n        if (typeof blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(blocktypeByte));\n        }\n\n        var instr = [];\n        parseInstructionBlock(instr); // preserve anonymous\n\n        var label = t.withRaw(t.identifier(getUniqueName(\"loop\")), \"\");\n\n        var loopNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.loopInstruction(label, blocktype, instr), endLoc, _startLoc7);\n        }();\n\n        code.push(loopNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"if\") {\n        var _startLoc8 = getPosition();\n\n        var _blocktypeByte = readByte();\n\n        eatBytes(1);\n        var _blocktype = constants.blockTypes[_blocktypeByte];\n        dump([_blocktypeByte], \"blocktype\");\n\n        if (typeof _blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte));\n        }\n\n        var testIndex = t.withRaw(t.identifier(getUniqueName(\"if\")), \"\");\n        var ifBody = [];\n        parseInstructionBlock(ifBody); // Defaults to no alternate\n\n        var elseIndex = 0;\n\n        for (elseIndex = 0; elseIndex < ifBody.length; ++elseIndex) {\n          var _instr = ifBody[elseIndex];\n\n          if (_instr.type === \"Instr\" && _instr.id === \"else\") {\n            break;\n          }\n        }\n\n        var consequentInstr = ifBody.slice(0, elseIndex);\n        var alternate = ifBody.slice(elseIndex + 1); // wast sugar\n\n        var testInstrs = [];\n\n        var ifNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.ifInstruction(testIndex, testInstrs, _blocktype, consequentInstr, alternate), endLoc, _startLoc8);\n        }();\n\n        code.push(ifNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"block\") {\n        var _startLoc9 = getPosition();\n\n        var _blocktypeByte2 = readByte();\n\n        eatBytes(1);\n        var _blocktype2 = constants.blockTypes[_blocktypeByte2];\n        dump([_blocktypeByte2], \"blocktype\");\n\n        if (typeof _blocktype2 === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte2));\n        }\n\n        var _instr2 = [];\n        parseInstructionBlock(_instr2); // preserve anonymous\n\n        var _label = t.withRaw(t.identifier(getUniqueName(\"block\")), \"\");\n\n        var blockNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.blockInstruction(_label, _instr2, _blocktype2), endLoc, _startLoc9);\n        }();\n\n        code.push(blockNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call\") {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n\n        var callNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.callInstruction(t.indexLiteral(index)), endLoc, _startLoc6);\n        }();\n\n        code.push(callNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call_indirect\") {\n        var _startLoc10 = getPosition();\n\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"call_indirect signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var _callNode = t.callIndirectInstruction(t.signature(signature.params, signature.result), []);\n\n        var flagU32 = readU32();\n        var flag = flagU32.value; // 0x00 - reserved byte\n\n        eatBytes(flagU32.nextIndex);\n\n        if (flag !== 0) {\n          throw new CompileError(\"zero flag expected\");\n        }\n\n        code.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(_callNode, endLoc, _startLoc10);\n        }());\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"br_table\") {\n        var indicesu32 = readU32();\n        var indices = indicesu32.value;\n        eatBytes(indicesu32.nextIndex);\n        dump([indices], \"num indices\");\n\n        for (var i = 0; i <= indices; i++) {\n          var _indexu = readU32();\n\n          var _index = _indexu.value;\n          eatBytes(_indexu.nextIndex);\n          dump([_index], \"index\");\n          args.push(t.numberLiteralFromRaw(_indexu.value.toString(), \"u32\"));\n        }\n      } else if (instructionByte >= 0x28 && instructionByte <= 0x40) {\n        /**\n         * Memory instructions\n         */\n        if (instruction.name === \"grow_memory\" || instruction.name === \"current_memory\") {\n          var _indexU = readU32();\n\n          var _index2 = _indexU.value;\n          eatBytes(_indexU.nextIndex);\n\n          if (_index2 !== 0) {\n            throw new Error(\"zero flag expected\");\n          }\n\n          dump([_index2], \"index\");\n        } else {\n          var aligun32 = readU32();\n          var align = aligun32.value;\n          eatBytes(aligun32.nextIndex);\n          dump([align], \"align\");\n          var offsetu32 = readU32();\n          var _offset2 = offsetu32.value;\n          eatBytes(offsetu32.nextIndex);\n          dump([_offset2], \"offset\");\n        }\n      } else if (instructionByte >= 0x41 && instructionByte <= 0x44) {\n        /**\n         * Numeric instructions\n         */\n        if (instruction.object === \"i32\") {\n          var value32 = read32();\n          var value = value32.value;\n          eatBytes(value32.nextIndex);\n          dump([value], \"i32 value\");\n          args.push(t.numberLiteralFromRaw(value));\n        }\n\n        if (instruction.object === \"u32\") {\n          var valueu32 = readU32();\n          var _value = valueu32.value;\n          eatBytes(valueu32.nextIndex);\n          dump([_value], \"u32 value\");\n          args.push(t.numberLiteralFromRaw(_value));\n        }\n\n        if (instruction.object === \"i64\") {\n          var value64 = read64();\n          var _value2 = value64.value;\n          eatBytes(value64.nextIndex);\n          dump([Number(_value2.toString())], \"i64 value\");\n          var high = _value2.high,\n              low = _value2.low;\n          var _node = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: high,\n              low: low\n            }\n          };\n          args.push(_node);\n        }\n\n        if (instruction.object === \"u64\") {\n          var valueu64 = readU64();\n          var _value3 = valueu64.value;\n          eatBytes(valueu64.nextIndex);\n          dump([Number(_value3.toString())], \"u64 value\");\n          var _high = _value3.high,\n              _low = _value3.low;\n          var _node2 = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: _high,\n              low: _low\n            }\n          };\n          args.push(_node2);\n        }\n\n        if (instruction.object === \"f32\") {\n          var valuef32 = readF32();\n          var _value4 = valuef32.value;\n          eatBytes(valuef32.nextIndex);\n          dump([_value4], \"f32 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value4, valuef32.nan, valuef32.inf, String(_value4)));\n        }\n\n        if (instruction.object === \"f64\") {\n          var valuef64 = readF64();\n          var _value5 = valuef64.value;\n          eatBytes(valuef64.nextIndex);\n          dump([_value5], \"f64 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value5, valuef64.nan, valuef64.inf, String(_value5)));\n        }\n      } else {\n        for (var _i3 = 0; _i3 < instruction.numberOfArgs; _i3++) {\n          var u32 = readU32();\n          eatBytes(u32.nextIndex);\n          dump([u32.value], \"argument \" + _i3);\n          args.push(t.numberLiteralFromRaw(u32.value));\n        }\n      }\n\n      if (instructionAlreadyCreated === false) {\n        if (typeof instruction.object === \"string\") {\n          var _node3 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.objectInstruction(instruction.name, instruction.object, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node3);\n        } else {\n          var _node4 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.instruction(instruction.name, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node4);\n        }\n      }\n    }\n  } // https://webassembly.github.io/spec/core/binary/types.html#limits\n\n\n  function parseLimits() {\n    var limitType = readByte();\n    eatBytes(1);\n    dump([limitType], \"limit type\");\n    var min, max;\n\n    if (limitType === 0x01 || limitType === 0x03 // shared limits\n    ) {\n        var u32min = readU32();\n        min = parseInt(u32min.value);\n        eatBytes(u32min.nextIndex);\n        dump([min], \"min\");\n        var u32max = readU32();\n        max = parseInt(u32max.value);\n        eatBytes(u32max.nextIndex);\n        dump([max], \"max\");\n      }\n\n    if (limitType === 0x00) {\n      var _u32min = readU32();\n\n      min = parseInt(_u32min.value);\n      eatBytes(_u32min.nextIndex);\n      dump([min], \"min\");\n    }\n\n    return t.limit(min, max);\n  } // https://webassembly.github.io/spec/core/binary/types.html#binary-tabletype\n\n\n  function parseTableType(index) {\n    var name = t.withRaw(t.identifier(getUniqueName(\"table\")), String(index));\n    var elementTypeByte = readByte();\n    eatBytes(1);\n    dump([elementTypeByte], \"element type\");\n    var elementType = constants.tableTypes[elementTypeByte];\n\n    if (typeof elementType === \"undefined\") {\n      throw new CompileError(\"Unknown element type in table: \" + toHex(elementType));\n    }\n\n    var limits = parseLimits();\n    return t.table(elementType, limits, name);\n  } // https://webassembly.github.io/spec/binary/types.html#global-types\n\n\n  function parseGlobalType() {\n    var valtypeByte = readByte();\n    eatBytes(1);\n    var type = constants.valtypes[valtypeByte];\n    dump([valtypeByte], type);\n\n    if (typeof type === \"undefined\") {\n      throw new CompileError(\"Unknown valtype: \" + toHex(valtypeByte));\n    }\n\n    var globalTypeByte = readByte();\n    eatBytes(1);\n    var globalType = constants.globalTypes[globalTypeByte];\n    dump([globalTypeByte], \"global type (\".concat(globalType, \")\"));\n\n    if (typeof globalType === \"undefined\") {\n      throw new CompileError(\"Invalid mutability: \" + toHex(globalTypeByte));\n    }\n\n    return t.globalType(type, globalType);\n  } // function parseNameModule() {\n  //   const lenu32 = readVaruint32();\n  //   eatBytes(lenu32.nextIndex);\n  //   console.log(\"len\", lenu32);\n  //   const strlen = lenu32.value;\n  //   dump([strlen], \"string length\");\n  //   const bytes = readBytes(strlen);\n  //   eatBytes(strlen);\n  //   const value = utf8.decode(bytes);\n  //   return [t.moduleNameMetadata(value)];\n  // }\n  // this section contains an array of function names and indices\n\n\n  function parseNameSectionFunctions() {\n    var functionNames = [];\n    var numberOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numberOfFunctionsu32.value;\n    eatBytes(numberOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      functionNames.push(t.functionNameMetadata(name.value, index));\n    }\n\n    return functionNames;\n  }\n\n  function parseNameSectionLocals() {\n    var localNames = [];\n    var numbeOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numbeOfFunctionsu32.value;\n    eatBytes(numbeOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var functionIndexu32 = readU32();\n      var functionIndex = functionIndexu32.value;\n      eatBytes(functionIndexu32.nextIndex);\n      var numLocalsu32 = readU32();\n      var numLocals = numLocalsu32.value;\n      eatBytes(numLocalsu32.nextIndex);\n\n      for (var _i4 = 0; _i4 < numLocals; _i4++) {\n        var localIndexu32 = readU32();\n        var localIndex = localIndexu32.value;\n        eatBytes(localIndexu32.nextIndex);\n        var name = readUTF8String();\n        eatBytes(name.nextIndex);\n        localNames.push(t.localNameMetadata(name.value, localIndex, functionIndex));\n      }\n    }\n\n    return localNames;\n  } // this is a custom section used for name resolution\n  // https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n\n\n  function parseNameSection(remainingBytes) {\n    var nameMetadata = [];\n    var initialOffset = offset;\n\n    while (offset - initialOffset < remainingBytes) {\n      // name_type\n      var sectionTypeByte = readVaruint7();\n      eatBytes(sectionTypeByte.nextIndex); // name_payload_len\n\n      var subSectionSizeInBytesu32 = readVaruint32();\n      eatBytes(subSectionSizeInBytesu32.nextIndex);\n\n      switch (sectionTypeByte.value) {\n        // case 0: {\n        // TODO(sven): re-enable that\n        // Current status: it seems that when we decode the module's name\n        // no name_payload_len is used.\n        //\n        // See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n        //\n        // nameMetadata.push(...parseNameModule());\n        // break;\n        // }\n        case 1:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionFunctions()));\n            break;\n          }\n\n        case 2:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionLocals()));\n            break;\n          }\n\n        default:\n          {\n            // skip unknown subsection\n            eatBytes(subSectionSizeInBytesu32.value);\n          }\n      }\n    }\n\n    return nameMetadata;\n  } // this is a custom setion used for information about the producers\n  // https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md\n\n\n  function parseProducersSection() {\n    var metadata = t.producersSectionMetadata([]); // field_count\n\n    var sectionTypeByte = readVaruint32();\n    eatBytes(sectionTypeByte.nextIndex);\n    dump([sectionTypeByte.value], \"num of producers\");\n    var fields = {\n      language: [],\n      \"processed-by\": [],\n      sdk: []\n    }; // fields\n\n    for (var fieldI = 0; fieldI < sectionTypeByte.value; fieldI++) {\n      // field_name\n      var fieldName = readUTF8String();\n      eatBytes(fieldName.nextIndex); // field_value_count\n\n      var valueCount = readVaruint32();\n      eatBytes(valueCount.nextIndex); // field_values\n\n      for (var producerI = 0; producerI < valueCount.value; producerI++) {\n        var producerName = readUTF8String();\n        eatBytes(producerName.nextIndex);\n        var producerVersion = readUTF8String();\n        eatBytes(producerVersion.nextIndex);\n        fields[fieldName.value].push(t.producerMetadataVersionedName(producerName.value, producerVersion.value));\n      }\n\n      metadata.producers.push(fields[fieldName.value]);\n    }\n\n    return metadata;\n  }\n\n  function parseGlobalSection(numberOfGlobals) {\n    var globals = [];\n    dump([numberOfGlobals], \"num globals\");\n\n    for (var i = 0; i < numberOfGlobals; i++) {\n      var _startLoc11 = getPosition();\n\n      var globalType = parseGlobalType();\n      /**\n       * Global expressions\n       */\n\n      var init = [];\n      parseInstructionBlock(init);\n\n      var node = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.global(globalType, init), endLoc, _startLoc11);\n      }();\n\n      globals.push(node);\n      state.globalsInModule.push(node);\n    }\n\n    return globals;\n  }\n\n  function parseElemSection(numberOfElements) {\n    var elems = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var _startLoc12 = getPosition();\n\n      var tableindexu32 = readU32();\n      var tableindex = tableindexu32.value;\n      eatBytes(tableindexu32.nextIndex);\n      dump([tableindex], \"table index\");\n      /**\n       * Parse instructions\n       */\n\n      var instr = [];\n      parseInstructionBlock(instr);\n      /**\n       * Parse ( vector function index ) *\n       */\n\n      var indicesu32 = readU32();\n      var indices = indicesu32.value;\n      eatBytes(indicesu32.nextIndex);\n      dump([indices], \"num indices\");\n      var indexValues = [];\n\n      for (var _i5 = 0; _i5 < indices; _i5++) {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        indexValues.push(t.indexLiteral(index));\n      }\n\n      var elemNode = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.elem(t.indexLiteral(tableindex), instr, indexValues), endLoc, _startLoc12);\n      }();\n\n      elems.push(elemNode);\n    }\n\n    return elems;\n  } // https://webassembly.github.io/spec/core/binary/types.html#memory-types\n\n\n  function parseMemoryType(i) {\n    var limits = parseLimits();\n    return t.memory(limits, t.indexLiteral(i));\n  } // https://webassembly.github.io/spec/binary/modules.html#table-section\n\n\n  function parseTableSection(numberOfElements) {\n    var tables = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var tablesNode = parseTableType(i);\n      state.tablesInModule.push(tablesNode);\n      tables.push(tablesNode);\n    }\n\n    return tables;\n  } // https://webassembly.github.io/spec/binary/modules.html#memory-section\n\n\n  function parseMemorySection(numberOfElements) {\n    var memories = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryNode = parseMemoryType(i);\n      state.memoriesInModule.push(memoryNode);\n      memories.push(memoryNode);\n    }\n\n    return memories;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-startsec\n\n\n  function parseStartSection() {\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var startFuncIndex = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([startFuncIndex], \"index\");\n    return function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.start(t.indexLiteral(startFuncIndex)), endLoc, startLoc);\n    }();\n  } // https://webassembly.github.io/spec/binary/modules.html#data-section\n\n\n  function parseDataSection(numberOfElements) {\n    var dataEntries = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryIndexu32 = readU32();\n      var memoryIndex = memoryIndexu32.value;\n      eatBytes(memoryIndexu32.nextIndex);\n      dump([memoryIndex], \"memory index\");\n      var instrs = [];\n      parseInstructionBlock(instrs);\n      var hasExtraInstrs = instrs.filter(function (i) {\n        return i.id !== \"end\";\n      }).length !== 1;\n\n      if (hasExtraInstrs) {\n        throw new CompileError(\"data section offset must be a single instruction\");\n      }\n\n      var bytes = parseVec(function (b) {\n        return b;\n      });\n      dump([], \"init\");\n      dataEntries.push(t.data(t.memIndexLiteral(memoryIndex), instrs[0], t.byteArray(bytes)));\n    }\n\n    return dataEntries;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-section\n\n\n  function parseSection(sectionIndex) {\n    var sectionId = readByte();\n    eatBytes(1);\n\n    if (sectionId >= sectionIndex || sectionIndex === constants.sections.custom) {\n      sectionIndex = sectionId + 1;\n    } else {\n      if (sectionId !== constants.sections.custom) throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n    }\n\n    var nextSectionIndex = sectionIndex;\n    var startOffset = offset;\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var sectionSizeInBytes = u32.value;\n    eatBytes(u32.nextIndex);\n\n    var sectionSizeInBytesNode = function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.numberLiteralFromRaw(sectionSizeInBytes), endLoc, startLoc);\n    }();\n\n    switch (sectionId) {\n      case constants.sections.type:\n        {\n          dumpSep(\"section Type\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc13 = getPosition();\n\n          var _u = readU32();\n\n          var numberOfTypes = _u.value;\n          eatBytes(_u.nextIndex);\n\n          var _metadata = t.sectionMetadata(\"type\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTypes), endLoc, _startLoc13);\n          }());\n\n          var _nodes = parseTypeSection(numberOfTypes);\n\n          return {\n            nodes: _nodes,\n            metadata: _metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.table:\n        {\n          dumpSep(\"section Table\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc14 = getPosition();\n\n          var _u2 = readU32();\n\n          var numberOfTable = _u2.value;\n          eatBytes(_u2.nextIndex);\n          dump([numberOfTable], \"num tables\");\n\n          var _metadata2 = t.sectionMetadata(\"table\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTable), endLoc, _startLoc14);\n          }());\n\n          var _nodes2 = parseTableSection(numberOfTable);\n\n          return {\n            nodes: _nodes2,\n            metadata: _metadata2,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.import:\n        {\n          dumpSep(\"section Import\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc15 = getPosition();\n\n          var numberOfImportsu32 = readU32();\n          var numberOfImports = numberOfImportsu32.value;\n          eatBytes(numberOfImportsu32.nextIndex);\n          dump([numberOfImports], \"number of imports\");\n\n          var _metadata3 = t.sectionMetadata(\"import\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfImports), endLoc, _startLoc15);\n          }());\n\n          var _nodes3 = parseImportSection(numberOfImports);\n\n          return {\n            nodes: _nodes3,\n            metadata: _metadata3,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.func:\n        {\n          dumpSep(\"section Function\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc16 = getPosition();\n\n          var numberOfFunctionsu32 = readU32();\n          var numberOfFunctions = numberOfFunctionsu32.value;\n          eatBytes(numberOfFunctionsu32.nextIndex);\n\n          var _metadata4 = t.sectionMetadata(\"func\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFunctions), endLoc, _startLoc16);\n          }());\n\n          parseFuncSection(numberOfFunctions);\n          var _nodes4 = [];\n          return {\n            nodes: _nodes4,\n            metadata: _metadata4,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.export:\n        {\n          dumpSep(\"section Export\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc17 = getPosition();\n\n          var _u3 = readU32();\n\n          var numberOfExport = _u3.value;\n          eatBytes(_u3.nextIndex);\n\n          var _metadata5 = t.sectionMetadata(\"export\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfExport), endLoc, _startLoc17);\n          }());\n\n          parseExportSection(numberOfExport);\n          var _nodes5 = [];\n          return {\n            nodes: _nodes5,\n            metadata: _metadata5,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.code:\n        {\n          dumpSep(\"section Code\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc18 = getPosition();\n\n          var _u4 = readU32();\n\n          var numberOfFuncs = _u4.value;\n          eatBytes(_u4.nextIndex);\n\n          var _metadata6 = t.sectionMetadata(\"code\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFuncs), endLoc, _startLoc18);\n          }());\n\n          if (opts.ignoreCodeSection === true) {\n            var remainingBytes = sectionSizeInBytes - _u4.nextIndex;\n            eatBytes(remainingBytes); // eat the entire section\n          } else {\n            parseCodeSection(numberOfFuncs);\n          }\n\n          var _nodes6 = [];\n          return {\n            nodes: _nodes6,\n            metadata: _metadata6,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.start:\n        {\n          dumpSep(\"section Start\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata7 = t.sectionMetadata(\"start\", startOffset, sectionSizeInBytesNode);\n\n          var _nodes7 = [parseStartSection()];\n          return {\n            nodes: _nodes7,\n            metadata: _metadata7,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.element:\n        {\n          dumpSep(\"section Element\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc19 = getPosition();\n\n          var numberOfElementsu32 = readU32();\n          var numberOfElements = numberOfElementsu32.value;\n          eatBytes(numberOfElementsu32.nextIndex);\n\n          var _metadata8 = t.sectionMetadata(\"element\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfElements), endLoc, _startLoc19);\n          }());\n\n          var _nodes8 = parseElemSection(numberOfElements);\n\n          return {\n            nodes: _nodes8,\n            metadata: _metadata8,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.global:\n        {\n          dumpSep(\"section Global\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc20 = getPosition();\n\n          var numberOfGlobalsu32 = readU32();\n          var numberOfGlobals = numberOfGlobalsu32.value;\n          eatBytes(numberOfGlobalsu32.nextIndex);\n\n          var _metadata9 = t.sectionMetadata(\"global\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfGlobals), endLoc, _startLoc20);\n          }());\n\n          var _nodes9 = parseGlobalSection(numberOfGlobals);\n\n          return {\n            nodes: _nodes9,\n            metadata: _metadata9,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.memory:\n        {\n          dumpSep(\"section Memory\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc21 = getPosition();\n\n          var _numberOfElementsu = readU32();\n\n          var _numberOfElements = _numberOfElementsu.value;\n          eatBytes(_numberOfElementsu.nextIndex);\n\n          var _metadata10 = t.sectionMetadata(\"memory\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements), endLoc, _startLoc21);\n          }());\n\n          var _nodes10 = parseMemorySection(_numberOfElements);\n\n          return {\n            nodes: _nodes10,\n            metadata: _metadata10,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.data:\n        {\n          dumpSep(\"section Data\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata11 = t.sectionMetadata(\"data\", startOffset, sectionSizeInBytesNode);\n\n          var _startLoc22 = getPosition();\n\n          var _numberOfElementsu2 = readU32();\n\n          var _numberOfElements2 = _numberOfElementsu2.value;\n          eatBytes(_numberOfElementsu2.nextIndex);\n\n          _metadata11.vectorOfSize = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements2), endLoc, _startLoc22);\n          }();\n\n          if (opts.ignoreDataSection === true) {\n            var _remainingBytes = sectionSizeInBytes - _numberOfElementsu2.nextIndex;\n\n            eatBytes(_remainingBytes); // eat the entire section\n\n            dumpSep(\"ignore data (\" + sectionSizeInBytes + \" bytes)\");\n            return {\n              nodes: [],\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          } else {\n            var _nodes11 = parseDataSection(_numberOfElements2);\n\n            return {\n              nodes: _nodes11,\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          }\n        }\n\n      case constants.sections.custom:\n        {\n          dumpSep(\"section Custom\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata12 = [t.sectionMetadata(\"custom\", startOffset, sectionSizeInBytesNode)];\n          var sectionName = readUTF8String();\n          eatBytes(sectionName.nextIndex);\n          dump([], \"section name (\".concat(sectionName.value, \")\"));\n\n          var _remainingBytes2 = sectionSizeInBytes - sectionName.nextIndex;\n\n          if (sectionName.value === \"name\") {\n            var initialOffset = offset;\n\n            try {\n              _metadata12.push.apply(_metadata12, _toConsumableArray(parseNameSection(_remainingBytes2)));\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"name\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (initialOffset + _remainingBytes2));\n            }\n          } else if (sectionName.value === \"producers\") {\n            var _initialOffset = offset;\n\n            try {\n              _metadata12.push(parseProducersSection());\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"producers\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (_initialOffset + _remainingBytes2));\n            }\n          } else {\n            // We don't parse the custom section\n            eatBytes(_remainingBytes2);\n            dumpSep(\"ignore custom \" + JSON.stringify(sectionName.value) + \" section (\" + _remainingBytes2 + \" bytes)\");\n          }\n\n          return {\n            nodes: [],\n            metadata: _metadata12,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n    }\n\n    throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n  }\n\n  parseModuleHeader();\n  parseVersion();\n  var moduleFields = [];\n  var sectionIndex = 0;\n  var moduleMetadata = {\n    sections: [],\n    functionNames: [],\n    localNames: [],\n    producers: []\n  };\n  /**\n   * All the generate declaration are going to be stored in our state\n   */\n\n  while (offset < buf.length) {\n    var _parseSection = parseSection(sectionIndex),\n        _nodes12 = _parseSection.nodes,\n        _metadata13 = _parseSection.metadata,\n        nextSectionIndex = _parseSection.nextSectionIndex;\n\n    moduleFields.push.apply(moduleFields, _toConsumableArray(_nodes12));\n    var metadataArray = Array.isArray(_metadata13) ? _metadata13 : [_metadata13];\n    metadataArray.forEach(function (metadataItem) {\n      if (metadataItem.type === \"FunctionNameMetadata\") {\n        moduleMetadata.functionNames.push(metadataItem);\n      } else if (metadataItem.type === \"LocalNameMetadata\") {\n        moduleMetadata.localNames.push(metadataItem);\n      } else if (metadataItem.type === \"ProducersSectionMetadata\") {\n        moduleMetadata.producers.push(metadataItem);\n      } else {\n        moduleMetadata.sections.push(metadataItem);\n      }\n    }); // Ignore custom section\n\n    if (nextSectionIndex) {\n      sectionIndex = nextSectionIndex;\n    }\n  }\n  /**\n   * Transform the state into AST nodes\n   */\n\n\n  var funcIndex = 0;\n  state.functionsInModule.forEach(function (func) {\n    var params = func.signature.params;\n    var result = func.signature.result;\n    var body = []; // External functions doesn't provide any code, can skip it here\n\n    if (func.isExternal === true) {\n      return;\n    }\n\n    var decodedElementInCodeSection = state.elementsInCodeSection[funcIndex];\n\n    if (opts.ignoreCodeSection === false) {\n      if (typeof decodedElementInCodeSection === \"undefined\") {\n        throw new CompileError(\"func \" + toHex(funcIndex) + \" code not found\");\n      }\n\n      body = decodedElementInCodeSection.code;\n    }\n\n    funcIndex++;\n    var funcNode = t.func(func.id, t.signature(params, result), body);\n\n    if (func.isExternal === true) {\n      funcNode.isExternal = func.isExternal;\n    } // Add function position in the binary if possible\n\n\n    if (opts.ignoreCodeSection === false) {\n      var _startLoc23 = decodedElementInCodeSection.startLoc,\n          endLoc = decodedElementInCodeSection.endLoc,\n          bodySize = decodedElementInCodeSection.bodySize;\n      funcNode = t.withLoc(funcNode, endLoc, _startLoc23);\n      funcNode.metadata = {\n        bodySize: bodySize\n      };\n    }\n\n    moduleFields.push(funcNode);\n  });\n  state.elementsInExportSection.forEach(function (moduleExport) {\n    /**\n     * If the export has no id, we won't be able to call it from the outside\n     * so we can omit it\n     */\n    if (moduleExport.id != null) {\n      moduleFields.push(t.withLoc(t.moduleExport(moduleExport.name, t.moduleExportDescr(moduleExport.type, moduleExport.id)), moduleExport.endLoc, moduleExport.startLoc));\n    }\n  });\n  dumpSep(\"end of program\");\n  var module = t.module(null, moduleFields, t.moduleMetadata(moduleMetadata.sections, moduleMetadata.functionNames, moduleMetadata.localNames, moduleMetadata.producers));\n  return t.program([module]);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}