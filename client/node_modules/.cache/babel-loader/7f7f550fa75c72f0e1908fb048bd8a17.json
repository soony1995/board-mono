{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\nclass SetVarMainTemplatePlugin {\n  /**\n   * @param {string} varExpression the accessor where the library is exported\n   * @param {boolean} copyObject specify copying the exports\n   */\n  constructor(varExpression, copyObject) {\n    /** @type {string} */\n    this.varExpression = varExpression;\n    /** @type {boolean} */\n    this.copyObject = copyObject;\n  }\n\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n  apply(compilation) {\n    const {\n      mainTemplate,\n      chunkTemplate\n    } = compilation;\n    const onRenderWithEntry = (source, chunk, hash) => {\n      const varExpression = mainTemplate.getAssetPath(this.varExpression, {\n        hash,\n        chunk\n      });\n      if (this.copyObject) {\n        return new ConcatSource(`(function(e, a) { for(var i in a) e[i] = a[i]; }(${varExpression}, `, source, \"))\");\n      } else {\n        const prefix = `${varExpression} =\\n`;\n        return new ConcatSource(prefix, source);\n      }\n    };\n    for (const template of [mainTemplate, chunkTemplate]) {\n      template.hooks.renderWithEntry.tap(\"SetVarMainTemplatePlugin\", onRenderWithEntry);\n    }\n    mainTemplate.hooks.globalHashPaths.tap(\"SetVarMainTemplatePlugin\", paths => {\n      if (this.varExpression) paths.push(this.varExpression);\n      return paths;\n    });\n    mainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", hash => {\n      hash.update(\"set var\");\n      hash.update(`${this.varExpression}`);\n      hash.update(`${this.copyObject}`);\n    });\n  }\n}\nmodule.exports = SetVarMainTemplatePlugin;","map":{"version":3,"names":["ConcatSource","require","SetVarMainTemplatePlugin","constructor","varExpression","copyObject","apply","compilation","mainTemplate","chunkTemplate","onRenderWithEntry","source","chunk","hash","getAssetPath","prefix","template","hooks","renderWithEntry","tap","globalHashPaths","paths","push","update","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/SetVarMainTemplatePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\nclass SetVarMainTemplatePlugin {\n\t/**\n\t * @param {string} varExpression the accessor where the library is exported\n\t * @param {boolean} copyObject specify copying the exports\n\t */\n\tconstructor(varExpression, copyObject) {\n\t\t/** @type {string} */\n\t\tthis.varExpression = varExpression;\n\t\t/** @type {boolean} */\n\t\tthis.copyObject = copyObject;\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation instance\n\t * @returns {void}\n\t */\n\tapply(compilation) {\n\t\tconst { mainTemplate, chunkTemplate } = compilation;\n\n\t\tconst onRenderWithEntry = (source, chunk, hash) => {\n\t\t\tconst varExpression = mainTemplate.getAssetPath(this.varExpression, {\n\t\t\t\thash,\n\t\t\t\tchunk\n\t\t\t});\n\t\t\tif (this.copyObject) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`(function(e, a) { for(var i in a) e[i] = a[i]; }(${varExpression}, `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"))\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst prefix = `${varExpression} =\\n`;\n\t\t\t\treturn new ConcatSource(prefix, source);\n\t\t\t}\n\t\t};\n\n\t\tfor (const template of [mainTemplate, chunkTemplate]) {\n\t\t\ttemplate.hooks.renderWithEntry.tap(\n\t\t\t\t\"SetVarMainTemplatePlugin\",\n\t\t\t\tonRenderWithEntry\n\t\t\t);\n\t\t}\n\n\t\tmainTemplate.hooks.globalHashPaths.tap(\n\t\t\t\"SetVarMainTemplatePlugin\",\n\t\t\tpaths => {\n\t\t\t\tif (this.varExpression) paths.push(this.varExpression);\n\t\t\t\treturn paths;\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"set var\");\n\t\t\thash.update(`${this.varExpression}`);\n\t\t\thash.update(`${this.copyObject}`);\n\t\t});\n\t}\n}\n\nmodule.exports = SetVarMainTemplatePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAEnD;;AAEA,MAAMC,wBAAwB,CAAC;EAC9B;AACD;AACA;AACA;EACCC,WAAWA,CAACC,aAAa,EAAEC,UAAU,EAAE;IACtC;IACA,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC;IACA,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC7B;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,WAAW,EAAE;IAClB,MAAM;MAAEC,YAAY;MAAEC;IAAc,CAAC,GAAGF,WAAW;IAEnD,MAAMG,iBAAiB,GAAGA,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,KAAK;MAClD,MAAMT,aAAa,GAAGI,YAAY,CAACM,YAAY,CAAC,IAAI,CAACV,aAAa,EAAE;QACnES,IAAI;QACJD;MACD,CAAC,CAAC;MACF,IAAI,IAAI,CAACP,UAAU,EAAE;QACpB,OAAO,IAAIL,YAAY,CACtB,oDAAoDI,aAAa,IAAI,EACrEO,MAAM,EACN,IACD,CAAC;MACF,CAAC,MAAM;QACN,MAAMI,MAAM,GAAG,GAAGX,aAAa,MAAM;QACrC,OAAO,IAAIJ,YAAY,CAACe,MAAM,EAAEJ,MAAM,CAAC;MACxC;IACD,CAAC;IAED,KAAK,MAAMK,QAAQ,IAAI,CAACR,YAAY,EAAEC,aAAa,CAAC,EAAE;MACrDO,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,0BAA0B,EAC1BT,iBACD,CAAC;IACF;IAEAF,YAAY,CAACS,KAAK,CAACG,eAAe,CAACD,GAAG,CACrC,0BAA0B,EAC1BE,KAAK,IAAI;MACR,IAAI,IAAI,CAACjB,aAAa,EAAEiB,KAAK,CAACC,IAAI,CAAC,IAAI,CAAClB,aAAa,CAAC;MACtD,OAAOiB,KAAK;IACb,CACD,CAAC;IACDb,YAAY,CAACS,KAAK,CAACJ,IAAI,CAACM,GAAG,CAAC,0BAA0B,EAAEN,IAAI,IAAI;MAC/DA,IAAI,CAACU,MAAM,CAAC,SAAS,CAAC;MACtBV,IAAI,CAACU,MAAM,CAAC,GAAG,IAAI,CAACnB,aAAa,EAAE,CAAC;MACpCS,IAAI,CAACU,MAAM,CAAC,GAAG,IAAI,CAAClB,UAAU,EAAE,CAAC;IAClC,CAAC,CAAC;EACH;AACD;AAEAmB,MAAM,CAACC,OAAO,GAAGvB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script"}