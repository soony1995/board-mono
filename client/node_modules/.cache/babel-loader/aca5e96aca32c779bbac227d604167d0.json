{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependenciesBlock = require(\"./DependenciesBlock\");\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n/** @typedef {TODO} GroupOptions */\n\nmodule.exports = class AsyncDependenciesBlock extends DependenciesBlock {\n  /**\n   * @param {GroupOptions} groupOptions options for the group\n   * @param {Module} module the Module object\n   * @param {DependencyLocation=} loc the line of code\n   * @param {TODO=} request the request\n   */\n  constructor(groupOptions, module, loc, request) {\n    super();\n    if (typeof groupOptions === \"string\") {\n      groupOptions = {\n        name: groupOptions\n      };\n    } else if (!groupOptions) {\n      groupOptions = {\n        name: undefined\n      };\n    }\n    this.groupOptions = groupOptions;\n    /** @type {ChunkGroup=} */\n    this.chunkGroup = undefined;\n    this.module = module;\n    this.loc = loc;\n    this.request = request;\n    /** @type {DependenciesBlock} */\n    this.parent = undefined;\n  }\n\n  /**\n   * @returns {string} The name of the chunk\n   */\n  get chunkName() {\n    return this.groupOptions.name;\n  }\n\n  /**\n   * @param {string} value The new chunk name\n   * @returns {void}\n   */\n  set chunkName(value) {\n    this.groupOptions.name = value;\n  }\n\n  /**\n   * @returns {never} this throws and should never be called\n   */\n  get chunks() {\n    throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n  }\n\n  /**\n   * @param {never} value setter value\n   * @returns {never} this is going to throw therefore we should throw type\n   * assertions by returning never\n   */\n  set chunks(value) {\n    throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n  }\n\n  /**\n   * @param {Hash} hash the hash used to track block changes, from \"crypto\" module\n   * @returns {void}\n   */\n  updateHash(hash) {\n    hash.update(JSON.stringify(this.groupOptions));\n    hash.update(this.chunkGroup && this.chunkGroup.chunks.map(chunk => {\n      return chunk.id !== null ? chunk.id : \"\";\n    }).join(\",\") || \"\");\n    super.updateHash(hash);\n  }\n\n  /**\n   * @returns {void}\n   */\n  disconnect() {\n    this.chunkGroup = undefined;\n    super.disconnect();\n  }\n\n  /**\n   * @returns {void}\n   */\n  unseal() {\n    this.chunkGroup = undefined;\n    super.unseal();\n  }\n\n  /**\n   * @returns {void}\n   */\n  sortItems() {\n    super.sortItems();\n  }\n};","map":{"version":3,"names":["DependenciesBlock","require","module","exports","AsyncDependenciesBlock","constructor","groupOptions","loc","request","name","undefined","chunkGroup","parent","chunkName","value","chunks","Error","updateHash","hash","update","JSON","stringify","map","chunk","id","join","disconnect","unseal","sortItems"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/AsyncDependenciesBlock.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependenciesBlock = require(\"./DependenciesBlock\");\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n/** @typedef {TODO} GroupOptions */\n\nmodule.exports = class AsyncDependenciesBlock extends DependenciesBlock {\n\t/**\n\t * @param {GroupOptions} groupOptions options for the group\n\t * @param {Module} module the Module object\n\t * @param {DependencyLocation=} loc the line of code\n\t * @param {TODO=} request the request\n\t */\n\tconstructor(groupOptions, module, loc, request) {\n\t\tsuper();\n\t\tif (typeof groupOptions === \"string\") {\n\t\t\tgroupOptions = { name: groupOptions };\n\t\t} else if (!groupOptions) {\n\t\t\tgroupOptions = { name: undefined };\n\t\t}\n\t\tthis.groupOptions = groupOptions;\n\t\t/** @type {ChunkGroup=} */\n\t\tthis.chunkGroup = undefined;\n\t\tthis.module = module;\n\t\tthis.loc = loc;\n\t\tthis.request = request;\n\t\t/** @type {DependenciesBlock} */\n\t\tthis.parent = undefined;\n\t}\n\n\t/**\n\t * @returns {string} The name of the chunk\n\t */\n\tget chunkName() {\n\t\treturn this.groupOptions.name;\n\t}\n\n\t/**\n\t * @param {string} value The new chunk name\n\t * @returns {void}\n\t */\n\tset chunkName(value) {\n\t\tthis.groupOptions.name = value;\n\t}\n\n\t/**\n\t * @returns {never} this throws and should never be called\n\t */\n\tget chunks() {\n\t\tthrow new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n\t}\n\n\t/**\n\t * @param {never} value setter value\n\t * @returns {never} this is going to throw therefore we should throw type\n\t * assertions by returning never\n\t */\n\tset chunks(value) {\n\t\tthrow new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track block changes, from \"crypto\" module\n\t * @returns {void}\n\t */\n\tupdateHash(hash) {\n\t\thash.update(JSON.stringify(this.groupOptions));\n\t\thash.update(\n\t\t\t(this.chunkGroup &&\n\t\t\t\tthis.chunkGroup.chunks\n\t\t\t\t\t.map(chunk => {\n\t\t\t\t\t\treturn chunk.id !== null ? chunk.id : \"\";\n\t\t\t\t\t})\n\t\t\t\t\t.join(\",\")) ||\n\t\t\t\t\"\"\n\t\t);\n\t\tsuper.updateHash(hash);\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tdisconnect() {\n\t\tthis.chunkGroup = undefined;\n\t\tsuper.disconnect();\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tunseal() {\n\t\tthis.chunkGroup = undefined;\n\t\tsuper.unseal();\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tsortItems() {\n\t\tsuper.sortItems();\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAExD;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,MAAMC,sBAAsB,SAASJ,iBAAiB,CAAC;EACvE;AACD;AACA;AACA;AACA;AACA;EACCK,WAAWA,CAACC,YAAY,EAAEJ,MAAM,EAAEK,GAAG,EAAEC,OAAO,EAAE;IAC/C,KAAK,CAAC,CAAC;IACP,IAAI,OAAOF,YAAY,KAAK,QAAQ,EAAE;MACrCA,YAAY,GAAG;QAAEG,IAAI,EAAEH;MAAa,CAAC;IACtC,CAAC,MAAM,IAAI,CAACA,YAAY,EAAE;MACzBA,YAAY,GAAG;QAAEG,IAAI,EAAEC;MAAU,CAAC;IACnC;IACA,IAAI,CAACJ,YAAY,GAAGA,YAAY;IAChC;IACA,IAAI,CAACK,UAAU,GAAGD,SAAS;IAC3B,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACI,MAAM,GAAGF,SAAS;EACxB;;EAEA;AACD;AACA;EACC,IAAIG,SAASA,CAAA,EAAG;IACf,OAAO,IAAI,CAACP,YAAY,CAACG,IAAI;EAC9B;;EAEA;AACD;AACA;AACA;EACC,IAAII,SAASA,CAACC,KAAK,EAAE;IACpB,IAAI,CAACR,YAAY,CAACG,IAAI,GAAGK,KAAK;EAC/B;;EAEA;AACD;AACA;EACC,IAAIC,MAAMA,CAAA,EAAG;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC9D;;EAEA;AACD;AACA;AACA;AACA;EACC,IAAID,MAAMA,CAACD,KAAK,EAAE;IACjB,MAAM,IAAIE,KAAK,CAAC,4CAA4C,CAAC;EAC9D;;EAEA;AACD;AACA;AACA;EACCC,UAAUA,CAACC,IAAI,EAAE;IAChBA,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACf,YAAY,CAAC,CAAC;IAC9CY,IAAI,CAACC,MAAM,CACT,IAAI,CAACR,UAAU,IACf,IAAI,CAACA,UAAU,CAACI,MAAM,CACpBO,GAAG,CAACC,KAAK,IAAI;MACb,OAAOA,KAAK,CAACC,EAAE,KAAK,IAAI,GAAGD,KAAK,CAACC,EAAE,GAAG,EAAE;IACzC,CAAC,CAAC,CACDC,IAAI,CAAC,GAAG,CAAC,IACX,EACF,CAAC;IACD,KAAK,CAACR,UAAU,CAACC,IAAI,CAAC;EACvB;;EAEA;AACD;AACA;EACCQ,UAAUA,CAAA,EAAG;IACZ,IAAI,CAACf,UAAU,GAAGD,SAAS;IAC3B,KAAK,CAACgB,UAAU,CAAC,CAAC;EACnB;;EAEA;AACD;AACA;EACCC,MAAMA,CAAA,EAAG;IACR,IAAI,CAAChB,UAAU,GAAGD,SAAS;IAC3B,KAAK,CAACiB,MAAM,CAAC,CAAC;EACf;;EAEA;AACD;AACA;EACCC,SAASA,CAAA,EAAG;IACX,KAAK,CAACA,SAAS,CAAC,CAAC;EAClB;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}