{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\nconst LINE_MAPPING = \";AACA\";\nclass SourceNode {\n  constructor(generatedCode, source, originalSource, startingLine) {\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.startingLine = startingLine || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n  clone() {\n    return new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n  }\n  getGeneratedCode() {\n    return this.generatedCode;\n  }\n  addGeneratedCode(code) {\n    this.generatedCode += code;\n    this._numberOfLines += getNumberOfLines(code);\n    this._endsWithNewLine = code[code.length - 1] === \"\\n\";\n  }\n  getMappings(mappingsContext) {\n    if (!this.generatedCode) return \"\";\n    const lines = this._numberOfLines;\n    const sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n    let mappings = \"A\"; // generated column 0\n    if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n    mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n    mappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n    mappings += \"A\"; // original column 0\n    mappingsContext.currentSource = sourceIdx;\n    mappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n    const unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n    mappings += Array(lines).join(LINE_MAPPING);\n    if (unfinishedGeneratedLine === 0) {\n      mappings += \";\";\n    } else {\n      if (lines !== 0) {\n        mappings += LINE_MAPPING;\n      }\n      mappingsContext.currentOriginalLine++;\n    }\n    return mappings;\n  }\n  mapGeneratedCode(fn) {\n    throw new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n  }\n  getNormalizedNodes() {\n    var results = [];\n    var currentLine = this.startingLine;\n    var generatedCode = this.generatedCode;\n    var index = 0;\n    var indexEnd = generatedCode.length;\n    while (index < indexEnd) {\n      // get one generated line\n      var nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n      if (nextLine === 0) nextLine = indexEnd;\n      var lineGenerated = generatedCode.substr(index, nextLine - index);\n      results.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine));\n\n      // move cursors\n      index = nextLine;\n      currentLine++;\n    }\n    return results;\n  }\n  merge(otherNode) {\n    if (otherNode instanceof SourceNode) {\n      return this.mergeSourceNode(otherNode);\n    } else if (otherNode instanceof SingleLineNode) {\n      return this.mergeSingleLineNode(otherNode);\n    }\n    return false;\n  }\n  mergeSourceNode(otherNode) {\n    if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.startingLine) {\n      this.generatedCode += otherNode.generatedCode;\n      this._numberOfLines += otherNode._numberOfLines;\n      this._endsWithNewLine = otherNode._endsWithNewLine;\n      return this;\n    }\n    return false;\n  }\n  mergeSingleLineNode(otherNode) {\n    if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.line && otherNode._numberOfLines <= 1) {\n      this.addSingleLineNode(otherNode);\n      return this;\n    }\n    return false;\n  }\n  addSingleLineNode(otherNode) {\n    this.generatedCode += otherNode.generatedCode;\n    this._numberOfLines += otherNode._numberOfLines;\n    this._endsWithNewLine = otherNode._endsWithNewLine;\n  }\n}\nmodule.exports = SourceNode;\nconst SingleLineNode = require(\"./SingleLineNode\"); // circular dependency","map":{"version":3,"names":["base64VLQ","require","getNumberOfLines","getUnfinishedLine","LINE_MAPPING","SourceNode","constructor","generatedCode","source","originalSource","startingLine","_numberOfLines","_endsWithNewLine","length","clone","getGeneratedCode","addGeneratedCode","code","getMappings","mappingsContext","lines","sourceIdx","ensureSource","mappings","unfinishedGeneratedLine","encode","currentSource","currentOriginalLine","Array","join","mapGeneratedCode","fn","Error","getNormalizedNodes","results","currentLine","index","indexEnd","nextLine","indexOf","lineGenerated","substr","push","SingleLineNode","merge","otherNode","mergeSourceNode","mergeSingleLineNode","line","addSingleLineNode","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/source-list-map/lib/SourceNode.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AACA\";\n\nclass SourceNode {\n\n\tconstructor(generatedCode, source, originalSource, startingLine) {\n\t\tthis.generatedCode = generatedCode;\n\t\tthis.originalSource = originalSource;\n\t\tthis.source = source;\n\t\tthis.startingLine = startingLine || 1;\n\t\tthis._numberOfLines = getNumberOfLines(this.generatedCode);\n\t\tthis._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n\t}\n\n\tclone() {\n\t\treturn new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\taddGeneratedCode(code) {\n\t\tthis.generatedCode += code;\n\t\tthis._numberOfLines += getNumberOfLines(code);\n\t\tthis._endsWithNewLine = code[code.length - 1] === \"\\n\";\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tif(!this.generatedCode)\n\t\t\treturn \"\";\n\t\tconst lines = this._numberOfLines;\n\t\tconst sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n\t\tlet mappings = \"A\"; // generated column 0\n\t\tif(mappingsContext.unfinishedGeneratedLine)\n\t\t\tmappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n\t\tmappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\t\tmappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n\t\tmappings += \"A\"; // original column 0\n\t\tmappingsContext.currentSource = sourceIdx;\n\t\tmappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n\t\tconst unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode)\n\t\tmappings += Array(lines).join(LINE_MAPPING);\n\t\tif(unfinishedGeneratedLine === 0) {\n\t\t\tmappings += \";\";\n\t\t} else {\n\t\t\tif(lines !== 0) {\n\t\t\t\tmappings += LINE_MAPPING;\n\t\t\t}\n\t\t\tmappingsContext.currentOriginalLine++;\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tthrow new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n\t}\n\n\tgetNormalizedNodes() {\n\t\tvar results = [];\n\t\tvar currentLine = this.startingLine;\n\t\tvar generatedCode = this.generatedCode;\n\t\tvar index = 0;\n\t\tvar indexEnd = generatedCode.length;\n\t\twhile(index < indexEnd) {\n\t\t\t// get one generated line\n\t\t\tvar nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n\t\t\tif(nextLine === 0) nextLine = indexEnd;\n\t\t\tvar lineGenerated = generatedCode.substr(index, nextLine - index);\n\n\t\t\tresults.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine));\n\n\t\t\t// move cursors\n\t\t\tindex = nextLine;\n\t\t\tcurrentLine++;\n\t\t}\n\t\treturn results;\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof SourceNode) {\n\t\t\treturn this.mergeSourceNode(otherNode);\n\t\t} else if(otherNode instanceof SingleLineNode) {\n\t\t\treturn this.mergeSingleLineNode(otherNode);\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSourceNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis._endsWithNewLine &&\n\t\t\tthis.startingLine + this._numberOfLines === otherNode.startingLine) {\n\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\tthis._numberOfLines += otherNode._numberOfLines;\n\t\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSingleLineNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis._endsWithNewLine &&\n\t\t\tthis.startingLine + this._numberOfLines === otherNode.line &&\n\t\t\totherNode._numberOfLines <= 1) {\n\t\t\tthis.addSingleLineNode(otherNode);\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n\n\taddSingleLineNode(otherNode) {\n\t\tthis.generatedCode += otherNode.generatedCode;\n\t\tthis._numberOfLines += otherNode._numberOfLines\n\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t}\n}\n\nmodule.exports = SourceNode;\nconst SingleLineNode = require(\"./SingleLineNode\"); // circular dependency\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}