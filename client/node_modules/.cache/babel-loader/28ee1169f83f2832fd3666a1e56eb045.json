{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass FlagIncludedChunksPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", compilation => {\n      compilation.hooks.optimizeChunkIds.tap(\"FlagIncludedChunksPlugin\", chunks => {\n        // prepare two bit integers for each module\n        // 2^31 is the max number represented as SMI in v8\n        // we want the bits distributed this way:\n        // the bit 2^31 is pretty rar and only one module should get it\n        // so it has a probability of 1 / modulesCount\n        // the first bit (2^0) is the easiest and every module could get it\n        // if it doesn't get a better bit\n        // from bit 2^n to 2^(n+1) there is a probability of p\n        // so 1 / modulesCount == p^31\n        // <=> p = sqrt31(1 / modulesCount)\n        // so we use a modulo of 1 / sqrt31(1 / modulesCount)\n        const moduleBits = new WeakMap();\n        const modulesCount = compilation.modules.length;\n\n        // precalculate the modulo values for each bit\n        const modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n        const modulos = Array.from({\n          length: 31\n        }, (x, i) => Math.pow(modulo, i) | 0);\n\n        // iterate all modules to generate bit values\n        let i = 0;\n        for (const module of compilation.modules) {\n          let bit = 30;\n          while (i % modulos[bit] !== 0) {\n            bit--;\n          }\n          moduleBits.set(module, 1 << bit);\n          i++;\n        }\n\n        // interate all chunks to generate bitmaps\n        const chunkModulesHash = new WeakMap();\n        for (const chunk of chunks) {\n          let hash = 0;\n          for (const module of chunk.modulesIterable) {\n            hash |= moduleBits.get(module);\n          }\n          chunkModulesHash.set(chunk, hash);\n        }\n        for (const chunkA of chunks) {\n          const chunkAHash = chunkModulesHash.get(chunkA);\n          const chunkAModulesCount = chunkA.getNumberOfModules();\n          if (chunkAModulesCount === 0) continue;\n          let bestModule = undefined;\n          for (const module of chunkA.modulesIterable) {\n            if (bestModule === undefined || bestModule.getNumberOfChunks() > module.getNumberOfChunks()) bestModule = module;\n          }\n          loopB: for (const chunkB of bestModule.chunksIterable) {\n            // as we iterate the same iterables twice\n            // skip if we find ourselves\n            if (chunkA === chunkB) continue;\n            const chunkBModulesCount = chunkB.getNumberOfModules();\n\n            // ids for empty chunks are not included\n            if (chunkBModulesCount === 0) continue;\n\n            // instead of swapping A and B just bail\n            // as we loop twice the current A will be B and B then A\n            if (chunkAModulesCount > chunkBModulesCount) continue;\n\n            // is chunkA in chunkB?\n\n            // we do a cheap check for the hash value\n            const chunkBHash = chunkModulesHash.get(chunkB);\n            if ((chunkBHash & chunkAHash) !== chunkAHash) continue;\n\n            // compare all modules\n            for (const m of chunkA.modulesIterable) {\n              if (!chunkB.containsModule(m)) continue loopB;\n            }\n            chunkB.ids.push(chunkA.id);\n          }\n        }\n      });\n    });\n  }\n}\nmodule.exports = FlagIncludedChunksPlugin;","map":{"version":3,"names":["FlagIncludedChunksPlugin","apply","compiler","hooks","compilation","tap","optimizeChunkIds","chunks","moduleBits","WeakMap","modulesCount","modules","length","modulo","Math","pow","modulos","Array","from","x","i","module","bit","set","chunkModulesHash","chunk","hash","modulesIterable","get","chunkA","chunkAHash","chunkAModulesCount","getNumberOfModules","bestModule","undefined","getNumberOfChunks","loopB","chunkB","chunksIterable","chunkBModulesCount","chunkBHash","m","containsModule","ids","push","id","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/optimize/FlagIncludedChunksPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass FlagIncludedChunksPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunkIds.tap(\n\t\t\t\t\"FlagIncludedChunksPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\t// prepare two bit integers for each module\n\t\t\t\t\t// 2^31 is the max number represented as SMI in v8\n\t\t\t\t\t// we want the bits distributed this way:\n\t\t\t\t\t// the bit 2^31 is pretty rar and only one module should get it\n\t\t\t\t\t// so it has a probability of 1 / modulesCount\n\t\t\t\t\t// the first bit (2^0) is the easiest and every module could get it\n\t\t\t\t\t// if it doesn't get a better bit\n\t\t\t\t\t// from bit 2^n to 2^(n+1) there is a probability of p\n\t\t\t\t\t// so 1 / modulesCount == p^31\n\t\t\t\t\t// <=> p = sqrt31(1 / modulesCount)\n\t\t\t\t\t// so we use a modulo of 1 / sqrt31(1 / modulesCount)\n\t\t\t\t\tconst moduleBits = new WeakMap();\n\t\t\t\t\tconst modulesCount = compilation.modules.length;\n\n\t\t\t\t\t// precalculate the modulo values for each bit\n\t\t\t\t\tconst modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n\t\t\t\t\tconst modulos = Array.from(\n\t\t\t\t\t\t{ length: 31 },\n\t\t\t\t\t\t(x, i) => Math.pow(modulo, i) | 0\n\t\t\t\t\t);\n\n\t\t\t\t\t// iterate all modules to generate bit values\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const module of compilation.modules) {\n\t\t\t\t\t\tlet bit = 30;\n\t\t\t\t\t\twhile (i % modulos[bit] !== 0) {\n\t\t\t\t\t\t\tbit--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoduleBits.set(module, 1 << bit);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\n\t\t\t\t\t// interate all chunks to generate bitmaps\n\t\t\t\t\tconst chunkModulesHash = new WeakMap();\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tlet hash = 0;\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\thash |= moduleBits.get(module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchunkModulesHash.set(chunk, hash);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const chunkA of chunks) {\n\t\t\t\t\t\tconst chunkAHash = chunkModulesHash.get(chunkA);\n\t\t\t\t\t\tconst chunkAModulesCount = chunkA.getNumberOfModules();\n\t\t\t\t\t\tif (chunkAModulesCount === 0) continue;\n\t\t\t\t\t\tlet bestModule = undefined;\n\t\t\t\t\t\tfor (const module of chunkA.modulesIterable) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tbestModule === undefined ||\n\t\t\t\t\t\t\t\tbestModule.getNumberOfChunks() > module.getNumberOfChunks()\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tbestModule = module;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloopB: for (const chunkB of bestModule.chunksIterable) {\n\t\t\t\t\t\t\t// as we iterate the same iterables twice\n\t\t\t\t\t\t\t// skip if we find ourselves\n\t\t\t\t\t\t\tif (chunkA === chunkB) continue;\n\n\t\t\t\t\t\t\tconst chunkBModulesCount = chunkB.getNumberOfModules();\n\n\t\t\t\t\t\t\t// ids for empty chunks are not included\n\t\t\t\t\t\t\tif (chunkBModulesCount === 0) continue;\n\n\t\t\t\t\t\t\t// instead of swapping A and B just bail\n\t\t\t\t\t\t\t// as we loop twice the current A will be B and B then A\n\t\t\t\t\t\t\tif (chunkAModulesCount > chunkBModulesCount) continue;\n\n\t\t\t\t\t\t\t// is chunkA in chunkB?\n\n\t\t\t\t\t\t\t// we do a cheap check for the hash value\n\t\t\t\t\t\t\tconst chunkBHash = chunkModulesHash.get(chunkB);\n\t\t\t\t\t\t\tif ((chunkBHash & chunkAHash) !== chunkAHash) continue;\n\n\t\t\t\t\t\t\t// compare all modules\n\t\t\t\t\t\t\tfor (const m of chunkA.modulesIterable) {\n\t\t\t\t\t\t\t\tif (!chunkB.containsModule(m)) continue loopB;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchunkB.ids.push(chunkA.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = FlagIncludedChunksPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}