{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n  content({\n    onError,\n    onResult,\n    resultReturns,\n    onDone,\n    rethrowIfPossible\n  }) {\n    return this.callTapsSeries({\n      onError: (i, err) => onError(err),\n      onResult: (i, result, next) => `if(${result} !== undefined) {\\n${onResult(result)};\\n} else {\\n${next()}}\\n`,\n      resultReturns,\n      onDone,\n      rethrowIfPossible\n    });\n  }\n}\nconst factory = new SyncBailHookCodeFactory();\nclass SyncBailHook extends Hook {\n  tapAsync() {\n    throw new Error(\"tapAsync is not supported on a SyncBailHook\");\n  }\n  tapPromise() {\n    throw new Error(\"tapPromise is not supported on a SyncBailHook\");\n  }\n  compile(options) {\n    factory.setup(this, options);\n    return factory.create(options);\n  }\n}\nmodule.exports = SyncBailHook;","map":{"version":3,"names":["Hook","require","HookCodeFactory","SyncBailHookCodeFactory","content","onError","onResult","resultReturns","onDone","rethrowIfPossible","callTapsSeries","i","err","result","next","factory","SyncBailHook","tapAsync","Error","tapPromise","compile","options","setup","create","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/tapable/lib/SyncBailHook.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) =>\n\t\t\t\t`if(${result} !== undefined) {\\n${onResult(\n\t\t\t\t\tresult\n\t\t\t\t)};\\n} else {\\n${next()}}\\n`,\n\t\t\tresultReturns,\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncBailHookCodeFactory();\n\nclass SyncBailHook extends Hook {\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncBailHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncBailHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncBailHook;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEpD,MAAME,uBAAuB,SAASD,eAAe,CAAC;EACrDE,OAAOA,CAAC;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,aAAa;IAAEC,MAAM;IAAEC;EAAkB,CAAC,EAAE;IACxE,OAAO,IAAI,CAACC,cAAc,CAAC;MAC1BL,OAAO,EAAEA,CAACM,CAAC,EAAEC,GAAG,KAAKP,OAAO,CAACO,GAAG,CAAC;MACjCN,QAAQ,EAAEA,CAACK,CAAC,EAAEE,MAAM,EAAEC,IAAI,KACzB,MAAMD,MAAM,sBAAsBP,QAAQ,CACzCO,MACD,CAAC,gBAAgBC,IAAI,CAAC,CAAC,KAAK;MAC7BP,aAAa;MACbC,MAAM;MACNC;IACD,CAAC,CAAC;EACH;AACD;AAEA,MAAMM,OAAO,GAAG,IAAIZ,uBAAuB,CAAC,CAAC;AAE7C,MAAMa,YAAY,SAAShB,IAAI,CAAC;EAC/BiB,QAAQA,CAAA,EAAG;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAC/D;EAEAC,UAAUA,CAAA,EAAG;IACZ,MAAM,IAAID,KAAK,CAAC,+CAA+C,CAAC;EACjE;EAEAE,OAAOA,CAACC,OAAO,EAAE;IAChBN,OAAO,CAACO,KAAK,CAAC,IAAI,EAAED,OAAO,CAAC;IAC5B,OAAON,OAAO,CAACQ,MAAM,CAACF,OAAO,CAAC;EAC/B;AACD;AAEAG,MAAM,CAACC,OAAO,GAAGT,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script"}