{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\nconst LINE_MAPPING = \";AAAA\";\nclass SingleLineNode {\n  constructor(generatedCode, source, originalSource, line) {\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.line = line || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n  clone() {\n    return new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n  }\n  getGeneratedCode() {\n    return this.generatedCode;\n  }\n  getMappings(mappingsContext) {\n    if (!this.generatedCode) return \"\";\n    const lines = this._numberOfLines;\n    const sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n    let mappings = \"A\"; // generated column 0\n    if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n    mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n    mappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n    mappings += \"A\"; // original column 0\n    mappingsContext.currentSource = sourceIdx;\n    mappingsContext.currentOriginalLine = this.line;\n    const unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n    mappings += Array(lines).join(LINE_MAPPING);\n    if (unfinishedGeneratedLine === 0) {\n      mappings += \";\";\n    } else {\n      if (lines !== 0) mappings += LINE_MAPPING;\n    }\n    return mappings;\n  }\n  getNormalizedNodes() {\n    return [this];\n  }\n  mapGeneratedCode(fn) {\n    const generatedCode = fn(this.generatedCode);\n    return new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n  }\n  merge(otherNode) {\n    if (otherNode instanceof SingleLineNode) {\n      return this.mergeSingleLineNode(otherNode);\n    }\n    return false;\n  }\n  mergeSingleLineNode(otherNode) {\n    if (this.source === otherNode.source && this.originalSource === otherNode.originalSource) {\n      if (this.line === otherNode.line) {\n        this.generatedCode += otherNode.generatedCode;\n        this._numberOfLines += otherNode._numberOfLines;\n        this._endsWithNewLine = otherNode._endsWithNewLine;\n        return this;\n      } else if (this.line + 1 === otherNode.line && this._endsWithNewLine && this._numberOfLines === 1 && otherNode._numberOfLines <= 1) {\n        return new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n      }\n    }\n    return false;\n  }\n}\nmodule.exports = SingleLineNode;\nconst SourceNode = require(\"./SourceNode\"); // circular dependency","map":{"version":3,"names":["base64VLQ","require","getNumberOfLines","getUnfinishedLine","LINE_MAPPING","SingleLineNode","constructor","generatedCode","source","originalSource","line","_numberOfLines","_endsWithNewLine","length","clone","getGeneratedCode","getMappings","mappingsContext","lines","sourceIdx","ensureSource","mappings","unfinishedGeneratedLine","encode","currentSource","currentOriginalLine","Array","join","getNormalizedNodes","mapGeneratedCode","fn","merge","otherNode","mergeSingleLineNode","SourceNode","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/source-list-map/lib/SingleLineNode.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AAAA\";\n\nclass SingleLineNode {\n\n\tconstructor(generatedCode, source, originalSource, line) {\n\t\tthis.generatedCode = generatedCode;\n\t\tthis.originalSource = originalSource;\n\t\tthis.source = source;\n\t\tthis.line = line || 1;\n\t\tthis._numberOfLines = getNumberOfLines(this.generatedCode);\n\t\tthis._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n\t}\n\n\tclone() {\n\t\treturn new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tif(!this.generatedCode)\n\t\t\treturn \"\";\n\t\tconst lines = this._numberOfLines;\n\t\tconst sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n\t\tlet mappings = \"A\"; // generated column 0\n\t\tif(mappingsContext.unfinishedGeneratedLine)\n\t\t\tmappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n\t\tmappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\t\tmappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n\t\tmappings += \"A\"; // original column 0\n\t\tmappingsContext.currentSource = sourceIdx;\n\t\tmappingsContext.currentOriginalLine = this.line;\n\t\tconst unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode)\n\t\tmappings += Array(lines).join(LINE_MAPPING);\n\t\tif(unfinishedGeneratedLine === 0) {\n\t\t\tmappings += \";\";\n\t\t} else {\n\t\t\tif(lines !== 0)\n\t\t\t\tmappings += LINE_MAPPING;\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tgetNormalizedNodes() {\n\t\treturn [this];\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tconst generatedCode = fn(this.generatedCode);\n\t\treturn new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof SingleLineNode) {\n\t\t\treturn this.mergeSingleLineNode(otherNode);\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSingleLineNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis.originalSource === otherNode.originalSource) {\n\t\t\tif(this.line === otherNode.line) {\n\t\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\t\tthis._numberOfLines += otherNode._numberOfLines;\n\t\t\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t\t\t\treturn this;\n\t\t\t} else if(this.line + 1 === otherNode.line && \n\t\t\t\tthis._endsWithNewLine &&\n\t\t\t\tthis._numberOfLines === 1 && \n\t\t\t\totherNode._numberOfLines <= 1) {\n\t\t\t\treturn new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nmodule.exports = SingleLineNode;\n\nconst SourceNode = require(\"./SourceNode\"); // circular dependency\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}