{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\nmodule.exports = class SizeLimitsPlugin {\n  constructor(options) {\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n\n  /**\n   * @param {Compiler} compiler webpack compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    const entrypointSizeLimit = this.maxEntrypointSize;\n    const assetSizeLimit = this.maxAssetSize;\n    const hints = this.hints;\n    const assetFilter = this.assetFilter || ((name, source, info) => !info.development);\n    compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n      const warnings = [];\n\n      /**\n       * @param {Entrypoint} entrypoint an entrypoint\n       * @returns {number} the size of the entrypoint\n       */\n      const getEntrypointSize = entrypoint => entrypoint.getFiles().reduce((currentSize, file) => {\n        const asset = compilation.getAsset(file);\n        if (asset && assetFilter(asset.name, asset.source, asset.info) && asset.source) {\n          return currentSize + (asset.info.size || asset.source.size());\n        }\n        return currentSize;\n      }, 0);\n      const assetsOverSizeLimit = [];\n      for (const {\n        name,\n        source,\n        info\n      } of compilation.getAssets()) {\n        if (!assetFilter(name, source, info) || !source) {\n          continue;\n        }\n        const size = info.size || source.size();\n        if (size > assetSizeLimit) {\n          assetsOverSizeLimit.push({\n            name,\n            size\n          });\n          /** @type {any} */\n          source.isOverSizeLimit = true;\n        }\n      }\n      const fileFilter = name => {\n        const asset = compilation.getAsset(name);\n        return asset && assetFilter(asset.name, asset.source, asset.info);\n      };\n      const entrypointsOverLimit = [];\n      for (const [name, entry] of compilation.entrypoints) {\n        const size = getEntrypointSize(entry);\n        if (size > entrypointSizeLimit) {\n          entrypointsOverLimit.push({\n            name: name,\n            size: size,\n            files: entry.getFiles().filter(fileFilter)\n          });\n          /** @type {any} */\n          entry.isOverSizeLimit = true;\n        }\n      }\n      if (hints) {\n        // 1. Individual Chunk: Size < 250kb\n        // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n        // 3. No Async Chunks\n        // if !1, then 2, if !2 return\n        if (assetsOverSizeLimit.length > 0) {\n          warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n        }\n        if (entrypointsOverLimit.length > 0) {\n          warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n        }\n        if (warnings.length > 0) {\n          const hasAsyncChunks = compilation.chunks.filter(chunk => !chunk.canBeInitial()).length > 0;\n          if (!hasAsyncChunks) {\n            warnings.push(new NoAsyncChunksWarning());\n          }\n          if (hints === \"error\") {\n            compilation.errors.push(...warnings);\n          } else {\n            compilation.warnings.push(...warnings);\n          }\n        }\n      }\n    });\n  }\n};","map":{"version":3,"names":["EntrypointsOverSizeLimitWarning","require","AssetsOverSizeLimitWarning","NoAsyncChunksWarning","module","exports","SizeLimitsPlugin","constructor","options","hints","maxAssetSize","maxEntrypointSize","assetFilter","apply","compiler","entrypointSizeLimit","assetSizeLimit","name","source","info","development","hooks","afterEmit","tap","compilation","warnings","getEntrypointSize","entrypoint","getFiles","reduce","currentSize","file","asset","getAsset","size","assetsOverSizeLimit","getAssets","push","isOverSizeLimit","fileFilter","entrypointsOverLimit","entry","entrypoints","files","filter","length","hasAsyncChunks","chunks","chunk","canBeInitial","errors"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/performance/SizeLimitsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\nmodule.exports = class SizeLimitsPlugin {\n\tconstructor(options) {\n\t\tthis.hints = options.hints;\n\t\tthis.maxAssetSize = options.maxAssetSize;\n\t\tthis.maxEntrypointSize = options.maxEntrypointSize;\n\t\tthis.assetFilter = options.assetFilter;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler webpack compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst entrypointSizeLimit = this.maxEntrypointSize;\n\t\tconst assetSizeLimit = this.maxAssetSize;\n\t\tconst hints = this.hints;\n\t\tconst assetFilter =\n\t\t\tthis.assetFilter || ((name, source, info) => !info.development);\n\n\t\tcompiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n\t\t\tconst warnings = [];\n\n\t\t\t/**\n\t\t\t * @param {Entrypoint} entrypoint an entrypoint\n\t\t\t * @returns {number} the size of the entrypoint\n\t\t\t */\n\t\t\tconst getEntrypointSize = entrypoint =>\n\t\t\t\tentrypoint.getFiles().reduce((currentSize, file) => {\n\t\t\t\t\tconst asset = compilation.getAsset(file);\n\t\t\t\t\tif (\n\t\t\t\t\t\tasset &&\n\t\t\t\t\t\tassetFilter(asset.name, asset.source, asset.info) &&\n\t\t\t\t\t\tasset.source\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn currentSize + (asset.info.size || asset.source.size());\n\t\t\t\t\t}\n\n\t\t\t\t\treturn currentSize;\n\t\t\t\t}, 0);\n\n\t\t\tconst assetsOverSizeLimit = [];\n\t\t\tfor (const { name, source, info } of compilation.getAssets()) {\n\t\t\t\tif (!assetFilter(name, source, info) || !source) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst size = info.size || source.size();\n\t\t\t\tif (size > assetSizeLimit) {\n\t\t\t\t\tassetsOverSizeLimit.push({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tsize\n\t\t\t\t\t});\n\t\t\t\t\t/** @type {any} */ (source).isOverSizeLimit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst fileFilter = name => {\n\t\t\t\tconst asset = compilation.getAsset(name);\n\t\t\t\treturn asset && assetFilter(asset.name, asset.source, asset.info);\n\t\t\t};\n\n\t\t\tconst entrypointsOverLimit = [];\n\t\t\tfor (const [name, entry] of compilation.entrypoints) {\n\t\t\t\tconst size = getEntrypointSize(entry);\n\n\t\t\t\tif (size > entrypointSizeLimit) {\n\t\t\t\t\tentrypointsOverLimit.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tsize: size,\n\t\t\t\t\t\tfiles: entry.getFiles().filter(fileFilter)\n\t\t\t\t\t});\n\t\t\t\t\t/** @type {any} */ (entry).isOverSizeLimit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hints) {\n\t\t\t\t// 1. Individual Chunk: Size < 250kb\n\t\t\t\t// 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n\t\t\t\t// 3. No Async Chunks\n\t\t\t\t// if !1, then 2, if !2 return\n\t\t\t\tif (assetsOverSizeLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (entrypointsOverLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew EntrypointsOverSizeLimitWarning(\n\t\t\t\t\t\t\tentrypointsOverLimit,\n\t\t\t\t\t\t\tentrypointSizeLimit\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (warnings.length > 0) {\n\t\t\t\t\tconst hasAsyncChunks =\n\t\t\t\t\t\tcompilation.chunks.filter(chunk => !chunk.canBeInitial()).length >\n\t\t\t\t\t\t0;\n\n\t\t\t\t\tif (!hasAsyncChunks) {\n\t\t\t\t\t\twarnings.push(new NoAsyncChunksWarning());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hints === \"error\") {\n\t\t\t\t\t\tcompilation.errors.push(...warnings);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcompilation.warnings.push(...warnings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}