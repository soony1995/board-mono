{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nconst createDefaultHandler = (profile, logger) => {\n  let lastState;\n  let lastStateTime;\n  const defaultHandler = (percentage, msg, ...args) => {\n    logger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n    if (profile) {\n      let state = msg;\n      state = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n      if (percentage === 0) {\n        lastState = null;\n        lastStateTime = Date.now();\n      } else if (state !== lastState || percentage === 1) {\n        const now = Date.now();\n        if (lastState) {\n          const diff = now - lastStateTime;\n          const stateMsg = `${diff}ms ${lastState}`;\n          if (diff > 1000) {\n            logger.warn(stateMsg);\n          } else if (diff > 10) {\n            logger.info(stateMsg);\n          } else if (diff > 0) {\n            logger.log(stateMsg);\n          } else {\n            logger.debug(stateMsg);\n          }\n        }\n        lastState = state;\n        lastStateTime = now;\n      }\n    }\n    if (percentage === 1) logger.status();\n  };\n  return defaultHandler;\n};\nclass ProgressPlugin {\n  /**\n   * @param {ProgressPluginArgument} options options\n   */\n  constructor(options) {\n    if (typeof options === \"function\") {\n      options = {\n        handler: options\n      };\n    }\n    options = options || {};\n    validateOptions(schema, options, \"Progress Plugin\");\n    options = Object.assign({}, ProgressPlugin.defaultOptions, options);\n    this.profile = options.profile;\n    this.handler = options.handler;\n    this.modulesCount = options.modulesCount;\n    this.showEntries = options.entries;\n    this.showModules = options.modules;\n    this.showActiveModules = options.activeModules;\n  }\n  apply(compiler) {\n    const {\n      modulesCount\n    } = this;\n    const handler = this.handler || createDefaultHandler(this.profile, compiler.getInfrastructureLogger(\"webpack.Progress\"));\n    const showEntries = this.showEntries;\n    const showModules = this.showModules;\n    const showActiveModules = this.showActiveModules;\n    if (compiler.compilers) {\n      const states = new Array(compiler.compilers.length);\n      compiler.compilers.forEach((compiler, idx) => {\n        new ProgressPlugin((p, msg, ...args) => {\n          states[idx] = [p, msg, ...args];\n          handler(states.map(state => state && state[0] || 0).reduce((a, b) => a + b) / states.length, `[${idx}] ${msg}`, ...args);\n        }).apply(compiler);\n      });\n    } else {\n      let lastModulesCount = 0;\n      let lastEntriesCount = 0;\n      let moduleCount = modulesCount;\n      let entriesCount = 1;\n      let doneModules = 0;\n      let doneEntries = 0;\n      const activeModules = new Set();\n      let lastActiveModule = \"\";\n      const update = () => {\n        const percentByModules = doneModules / Math.max(lastModulesCount, moduleCount);\n        const percentByEntries = doneEntries / Math.max(lastEntriesCount, entriesCount);\n        const items = [0.1 + Math.max(percentByModules, percentByEntries) * 0.6, \"building\"];\n        if (showEntries) {\n          items.push(`${doneEntries}/${entriesCount} entries`);\n        }\n        if (showModules) {\n          items.push(`${doneModules}/${moduleCount} modules`);\n        }\n        if (showActiveModules) {\n          items.push(`${activeModules.size} active`);\n          items.push(lastActiveModule);\n        }\n        handler(...items);\n      };\n      const moduleAdd = module => {\n        moduleCount++;\n        if (showActiveModules) {\n          const ident = module.identifier();\n          if (ident) {\n            activeModules.add(ident);\n            lastActiveModule = ident;\n          }\n        }\n        update();\n      };\n      const entryAdd = (entry, name) => {\n        entriesCount++;\n        update();\n      };\n      const moduleDone = module => {\n        doneModules++;\n        if (showActiveModules) {\n          const ident = module.identifier();\n          if (ident) {\n            activeModules.delete(ident);\n            if (lastActiveModule === ident) {\n              lastActiveModule = \"\";\n              for (const m of activeModules) {\n                lastActiveModule = m;\n              }\n            }\n          }\n        }\n        update();\n      };\n      const entryDone = (entry, name) => {\n        doneEntries++;\n        update();\n      };\n      compiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n        if (compilation.compiler.isChild()) return;\n        lastModulesCount = moduleCount;\n        lastEntriesCount = entriesCount;\n        moduleCount = entriesCount = 0;\n        doneModules = doneEntries = 0;\n        handler(0, \"compiling\");\n        compilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n        compilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n        compilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n        compilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n        compilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n        compilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n        const hooks = {\n          finishModules: \"finish module graph\",\n          seal: \"sealing\",\n          beforeChunks: \"chunk graph\",\n          afterChunks: \"after chunk graph\",\n          optimizeDependenciesBasic: \"basic dependencies optimization\",\n          optimizeDependencies: \"dependencies optimization\",\n          optimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n          afterOptimizeDependencies: \"after dependencies optimization\",\n          optimize: \"optimizing\",\n          optimizeModulesBasic: \"basic module optimization\",\n          optimizeModules: \"module optimization\",\n          optimizeModulesAdvanced: \"advanced module optimization\",\n          afterOptimizeModules: \"after module optimization\",\n          optimizeChunksBasic: \"basic chunk optimization\",\n          optimizeChunks: \"chunk optimization\",\n          optimizeChunksAdvanced: \"advanced chunk optimization\",\n          afterOptimizeChunks: \"after chunk optimization\",\n          optimizeTree: \"module and chunk tree optimization\",\n          afterOptimizeTree: \"after module and chunk tree optimization\",\n          optimizeChunkModulesBasic: \"basic chunk modules optimization\",\n          optimizeChunkModules: \"chunk modules optimization\",\n          optimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n          afterOptimizeChunkModules: \"after chunk modules optimization\",\n          reviveModules: \"module reviving\",\n          optimizeModuleOrder: \"module order optimization\",\n          advancedOptimizeModuleOrder: \"advanced module order optimization\",\n          beforeModuleIds: \"before module ids\",\n          moduleIds: \"module ids\",\n          optimizeModuleIds: \"module id optimization\",\n          afterOptimizeModuleIds: \"module id optimization\",\n          reviveChunks: \"chunk reviving\",\n          optimizeChunkOrder: \"chunk order optimization\",\n          beforeChunkIds: \"before chunk ids\",\n          optimizeChunkIds: \"chunk id optimization\",\n          afterOptimizeChunkIds: \"after chunk id optimization\",\n          recordModules: \"record modules\",\n          recordChunks: \"record chunks\",\n          beforeHash: \"hashing\",\n          afterHash: \"after hashing\",\n          recordHash: \"record hash\",\n          beforeModuleAssets: \"module assets processing\",\n          beforeChunkAssets: \"chunk assets processing\",\n          additionalChunkAssets: \"additional chunk assets processing\",\n          record: \"recording\",\n          additionalAssets: \"additional asset processing\",\n          optimizeChunkAssets: \"chunk asset optimization\",\n          afterOptimizeChunkAssets: \"after chunk asset optimization\",\n          optimizeAssets: \"asset optimization\",\n          afterOptimizeAssets: \"after asset optimization\",\n          afterSeal: \"after seal\"\n        };\n        const numberOfHooks = Object.keys(hooks).length;\n        Object.keys(hooks).forEach((name, idx) => {\n          const title = hooks[name];\n          const percentage = idx / numberOfHooks * 0.25 + 0.7;\n          compilation.hooks[name].intercept({\n            name: \"ProgressPlugin\",\n            context: true,\n            call: () => {\n              handler(percentage, title);\n            },\n            tap: (context, tap) => {\n              if (context) {\n                // p is percentage from 0 to 1\n                // args is any number of messages in a hierarchical matter\n                context.reportProgress = (p, ...args) => {\n                  handler(percentage, title, tap.name, ...args);\n                };\n              }\n              handler(percentage, title, tap.name);\n            }\n          });\n        });\n      });\n      compiler.hooks.emit.intercept({\n        name: \"ProgressPlugin\",\n        context: true,\n        call: () => {\n          handler(0.95, \"emitting\");\n        },\n        tap: (context, tap) => {\n          if (context) {\n            context.reportProgress = (p, ...args) => {\n              handler(0.95, \"emitting\", tap.name, ...args);\n            };\n          }\n          handler(0.95, \"emitting\", tap.name);\n        }\n      });\n      compiler.hooks.afterEmit.intercept({\n        name: \"ProgressPlugin\",\n        context: true,\n        call: () => {\n          handler(0.98, \"after emitting\");\n        },\n        tap: (context, tap) => {\n          if (context) {\n            context.reportProgress = (p, ...args) => {\n              handler(0.98, \"after emitting\", tap.name, ...args);\n            };\n          }\n          handler(0.98, \"after emitting\", tap.name);\n        }\n      });\n      compiler.hooks.done.tap(\"ProgressPlugin\", () => {\n        handler(1, \"\");\n      });\n    }\n  }\n}\nProgressPlugin.defaultOptions = {\n  profile: false,\n  modulesCount: 500,\n  modules: true,\n  activeModules: true,\n  // TODO webpack 5 default this to true\n  entries: false\n};\nmodule.exports = ProgressPlugin;","map":{"version":3,"names":["validateOptions","require","schema","createDefaultHandler","profile","logger","lastState","lastStateTime","defaultHandler","percentage","msg","args","status","Math","floor","state","replace","Date","now","diff","stateMsg","warn","info","log","debug","ProgressPlugin","constructor","options","handler","Object","assign","defaultOptions","modulesCount","showEntries","entries","showModules","modules","showActiveModules","activeModules","apply","compiler","getInfrastructureLogger","compilers","states","Array","length","forEach","idx","p","map","reduce","a","b","lastModulesCount","lastEntriesCount","moduleCount","entriesCount","doneModules","doneEntries","Set","lastActiveModule","update","percentByModules","max","percentByEntries","items","push","size","moduleAdd","module","ident","identifier","add","entryAdd","entry","name","moduleDone","delete","m","entryDone","hooks","compilation","tap","isChild","buildModule","failedModule","succeedModule","addEntry","failedEntry","succeedEntry","finishModules","seal","beforeChunks","afterChunks","optimizeDependenciesBasic","optimizeDependencies","optimizeDependenciesAdvanced","afterOptimizeDependencies","optimize","optimizeModulesBasic","optimizeModules","optimizeModulesAdvanced","afterOptimizeModules","optimizeChunksBasic","optimizeChunks","optimizeChunksAdvanced","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModulesBasic","optimizeChunkModules","optimizeChunkModulesAdvanced","afterOptimizeChunkModules","reviveModules","optimizeModuleOrder","advancedOptimizeModuleOrder","beforeModuleIds","moduleIds","optimizeModuleIds","afterOptimizeModuleIds","reviveChunks","optimizeChunkOrder","beforeChunkIds","optimizeChunkIds","afterOptimizeChunkIds","recordModules","recordChunks","beforeHash","afterHash","recordHash","beforeModuleAssets","beforeChunkAssets","additionalChunkAssets","record","additionalAssets","optimizeChunkAssets","afterOptimizeChunkAssets","optimizeAssets","afterOptimizeAssets","afterSeal","numberOfHooks","keys","title","intercept","context","call","reportProgress","emit","afterEmit","done","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/ProgressPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nconst createDefaultHandler = (profile, logger) => {\n\tlet lastState;\n\tlet lastStateTime;\n\n\tconst defaultHandler = (percentage, msg, ...args) => {\n\t\tlogger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\t\tif (profile) {\n\t\t\tlet state = msg;\n\t\t\tstate = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n\t\t\tif (percentage === 0) {\n\t\t\t\tlastState = null;\n\t\t\t\tlastStateTime = Date.now();\n\t\t\t} else if (state !== lastState || percentage === 1) {\n\t\t\t\tconst now = Date.now();\n\t\t\t\tif (lastState) {\n\t\t\t\t\tconst diff = now - lastStateTime;\n\t\t\t\t\tconst stateMsg = `${diff}ms ${lastState}`;\n\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\tlogger.warn(stateMsg);\n\t\t\t\t\t} else if (diff > 10) {\n\t\t\t\t\t\tlogger.info(stateMsg);\n\t\t\t\t\t} else if (diff > 0) {\n\t\t\t\t\t\tlogger.log(stateMsg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug(stateMsg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlastState = state;\n\t\t\t\tlastStateTime = now;\n\t\t\t}\n\t\t}\n\t\tif (percentage === 1) logger.status();\n\t};\n\n\treturn defaultHandler;\n};\n\nclass ProgressPlugin {\n\t/**\n\t * @param {ProgressPluginArgument} options options\n\t */\n\tconstructor(options) {\n\t\tif (typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\thandler: options\n\t\t\t};\n\t\t}\n\n\t\toptions = options || {};\n\t\tvalidateOptions(schema, options, \"Progress Plugin\");\n\t\toptions = Object.assign({}, ProgressPlugin.defaultOptions, options);\n\n\t\tthis.profile = options.profile;\n\t\tthis.handler = options.handler;\n\t\tthis.modulesCount = options.modulesCount;\n\t\tthis.showEntries = options.entries;\n\t\tthis.showModules = options.modules;\n\t\tthis.showActiveModules = options.activeModules;\n\t}\n\n\tapply(compiler) {\n\t\tconst { modulesCount } = this;\n\t\tconst handler =\n\t\t\tthis.handler ||\n\t\t\tcreateDefaultHandler(\n\t\t\t\tthis.profile,\n\t\t\t\tcompiler.getInfrastructureLogger(\"webpack.Progress\")\n\t\t\t);\n\t\tconst showEntries = this.showEntries;\n\t\tconst showModules = this.showModules;\n\t\tconst showActiveModules = this.showActiveModules;\n\t\tif (compiler.compilers) {\n\t\t\tconst states = new Array(compiler.compilers.length);\n\t\t\tcompiler.compilers.forEach((compiler, idx) => {\n\t\t\t\tnew ProgressPlugin((p, msg, ...args) => {\n\t\t\t\t\tstates[idx] = [p, msg, ...args];\n\t\t\t\t\thandler(\n\t\t\t\t\t\tstates\n\t\t\t\t\t\t\t.map(state => (state && state[0]) || 0)\n\t\t\t\t\t\t\t.reduce((a, b) => a + b) / states.length,\n\t\t\t\t\t\t`[${idx}] ${msg}`,\n\t\t\t\t\t\t...args\n\t\t\t\t\t);\n\t\t\t\t}).apply(compiler);\n\t\t\t});\n\t\t} else {\n\t\t\tlet lastModulesCount = 0;\n\t\t\tlet lastEntriesCount = 0;\n\t\t\tlet moduleCount = modulesCount;\n\t\t\tlet entriesCount = 1;\n\t\t\tlet doneModules = 0;\n\t\t\tlet doneEntries = 0;\n\t\t\tconst activeModules = new Set();\n\t\t\tlet lastActiveModule = \"\";\n\n\t\t\tconst update = () => {\n\t\t\t\tconst percentByModules =\n\t\t\t\t\tdoneModules / Math.max(lastModulesCount, moduleCount);\n\t\t\t\tconst percentByEntries =\n\t\t\t\t\tdoneEntries / Math.max(lastEntriesCount, entriesCount);\n\n\t\t\t\tconst items = [\n\t\t\t\t\t0.1 + Math.max(percentByModules, percentByEntries) * 0.6,\n\t\t\t\t\t\"building\"\n\t\t\t\t];\n\t\t\t\tif (showEntries) {\n\t\t\t\t\titems.push(`${doneEntries}/${entriesCount} entries`);\n\t\t\t\t}\n\t\t\t\tif (showModules) {\n\t\t\t\t\titems.push(`${doneModules}/${moduleCount} modules`);\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\titems.push(`${activeModules.size} active`);\n\t\t\t\t\titems.push(lastActiveModule);\n\t\t\t\t}\n\t\t\t\thandler(...items);\n\t\t\t};\n\n\t\t\tconst moduleAdd = module => {\n\t\t\t\tmoduleCount++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.add(ident);\n\t\t\t\t\t\tlastActiveModule = ident;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryAdd = (entry, name) => {\n\t\t\t\tentriesCount++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst moduleDone = module => {\n\t\t\t\tdoneModules++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.delete(ident);\n\t\t\t\t\t\tif (lastActiveModule === ident) {\n\t\t\t\t\t\t\tlastActiveModule = \"\";\n\t\t\t\t\t\t\tfor (const m of activeModules) {\n\t\t\t\t\t\t\t\tlastActiveModule = m;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryDone = (entry, name) => {\n\t\t\t\tdoneEntries++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tcompiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n\t\t\t\tif (compilation.compiler.isChild()) return;\n\t\t\t\tlastModulesCount = moduleCount;\n\t\t\t\tlastEntriesCount = entriesCount;\n\t\t\t\tmoduleCount = entriesCount = 0;\n\t\t\t\tdoneModules = doneEntries = 0;\n\t\t\t\thandler(0, \"compiling\");\n\n\t\t\t\tcompilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n\t\t\t\tcompilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n\t\t\t\tcompilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n\n\t\t\t\tcompilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n\t\t\t\tcompilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n\t\t\t\tcompilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n\t\t\t\tconst hooks = {\n\t\t\t\t\tfinishModules: \"finish module graph\",\n\t\t\t\t\tseal: \"sealing\",\n\t\t\t\t\tbeforeChunks: \"chunk graph\",\n\t\t\t\t\tafterChunks: \"after chunk graph\",\n\t\t\t\t\toptimizeDependenciesBasic: \"basic dependencies optimization\",\n\t\t\t\t\toptimizeDependencies: \"dependencies optimization\",\n\t\t\t\t\toptimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n\t\t\t\t\tafterOptimizeDependencies: \"after dependencies optimization\",\n\t\t\t\t\toptimize: \"optimizing\",\n\t\t\t\t\toptimizeModulesBasic: \"basic module optimization\",\n\t\t\t\t\toptimizeModules: \"module optimization\",\n\t\t\t\t\toptimizeModulesAdvanced: \"advanced module optimization\",\n\t\t\t\t\tafterOptimizeModules: \"after module optimization\",\n\t\t\t\t\toptimizeChunksBasic: \"basic chunk optimization\",\n\t\t\t\t\toptimizeChunks: \"chunk optimization\",\n\t\t\t\t\toptimizeChunksAdvanced: \"advanced chunk optimization\",\n\t\t\t\t\tafterOptimizeChunks: \"after chunk optimization\",\n\t\t\t\t\toptimizeTree: \"module and chunk tree optimization\",\n\t\t\t\t\tafterOptimizeTree: \"after module and chunk tree optimization\",\n\t\t\t\t\toptimizeChunkModulesBasic: \"basic chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModules: \"chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n\t\t\t\t\tafterOptimizeChunkModules: \"after chunk modules optimization\",\n\t\t\t\t\treviveModules: \"module reviving\",\n\t\t\t\t\toptimizeModuleOrder: \"module order optimization\",\n\t\t\t\t\tadvancedOptimizeModuleOrder: \"advanced module order optimization\",\n\t\t\t\t\tbeforeModuleIds: \"before module ids\",\n\t\t\t\t\tmoduleIds: \"module ids\",\n\t\t\t\t\toptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\tafterOptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\treviveChunks: \"chunk reviving\",\n\t\t\t\t\toptimizeChunkOrder: \"chunk order optimization\",\n\t\t\t\t\tbeforeChunkIds: \"before chunk ids\",\n\t\t\t\t\toptimizeChunkIds: \"chunk id optimization\",\n\t\t\t\t\tafterOptimizeChunkIds: \"after chunk id optimization\",\n\t\t\t\t\trecordModules: \"record modules\",\n\t\t\t\t\trecordChunks: \"record chunks\",\n\t\t\t\t\tbeforeHash: \"hashing\",\n\t\t\t\t\tafterHash: \"after hashing\",\n\t\t\t\t\trecordHash: \"record hash\",\n\t\t\t\t\tbeforeModuleAssets: \"module assets processing\",\n\t\t\t\t\tbeforeChunkAssets: \"chunk assets processing\",\n\t\t\t\t\tadditionalChunkAssets: \"additional chunk assets processing\",\n\t\t\t\t\trecord: \"recording\",\n\t\t\t\t\tadditionalAssets: \"additional asset processing\",\n\t\t\t\t\toptimizeChunkAssets: \"chunk asset optimization\",\n\t\t\t\t\tafterOptimizeChunkAssets: \"after chunk asset optimization\",\n\t\t\t\t\toptimizeAssets: \"asset optimization\",\n\t\t\t\t\tafterOptimizeAssets: \"after asset optimization\",\n\t\t\t\t\tafterSeal: \"after seal\"\n\t\t\t\t};\n\t\t\t\tconst numberOfHooks = Object.keys(hooks).length;\n\t\t\t\tObject.keys(hooks).forEach((name, idx) => {\n\t\t\t\t\tconst title = hooks[name];\n\t\t\t\t\tconst percentage = (idx / numberOfHooks) * 0.25 + 0.7;\n\t\t\t\t\tcompilation.hooks[name].intercept({\n\t\t\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\t\t\tcontext: true,\n\t\t\t\t\t\tcall: () => {\n\t\t\t\t\t\t\thandler(percentage, title);\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\t\t// p is percentage from 0 to 1\n\t\t\t\t\t\t\t\t// args is any number of messages in a hierarchical matter\n\t\t\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\t\t\thandler(percentage, title, tap.name, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thandler(percentage, title, tap.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tcompiler.hooks.emit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.95, \"emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.95, \"emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.95, \"emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.afterEmit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.98, \"after emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.98, \"after emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.98, \"after emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.done.tap(\"ProgressPlugin\", () => {\n\t\t\t\thandler(1, \"\");\n\t\t\t});\n\t\t}\n\t}\n}\n\nProgressPlugin.defaultOptions = {\n\tprofile: false,\n\tmodulesCount: 500,\n\tmodules: true,\n\tactiveModules: true,\n\t// TODO webpack 5 default this to true\n\tentries: false\n};\n\nmodule.exports = ProgressPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC/C,MAAMC,MAAM,GAAGD,OAAO,CAAC,wCAAwC,CAAC;;AAEhE;AACA;;AAEA,MAAME,oBAAoB,GAAGA,CAACC,OAAO,EAAEC,MAAM,KAAK;EACjD,IAAIC,SAAS;EACb,IAAIC,aAAa;EAEjB,MAAMC,cAAc,GAAGA,CAACC,UAAU,EAAEC,GAAG,EAAE,GAAGC,IAAI,KAAK;IACpDN,MAAM,CAACO,MAAM,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,GAAG,GAAG,CAAC,GAAG,EAAEC,GAAG,EAAE,GAAGC,IAAI,CAAC;IAC/D,IAAIP,OAAO,EAAE;MACZ,IAAIW,KAAK,GAAGL,GAAG;MACfK,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;MACzC,IAAIP,UAAU,KAAK,CAAC,EAAE;QACrBH,SAAS,GAAG,IAAI;QAChBC,aAAa,GAAGU,IAAI,CAACC,GAAG,CAAC,CAAC;MAC3B,CAAC,MAAM,IAAIH,KAAK,KAAKT,SAAS,IAAIG,UAAU,KAAK,CAAC,EAAE;QACnD,MAAMS,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;QACtB,IAAIZ,SAAS,EAAE;UACd,MAAMa,IAAI,GAAGD,GAAG,GAAGX,aAAa;UAChC,MAAMa,QAAQ,GAAG,GAAGD,IAAI,MAAMb,SAAS,EAAE;UACzC,IAAIa,IAAI,GAAG,IAAI,EAAE;YAChBd,MAAM,CAACgB,IAAI,CAACD,QAAQ,CAAC;UACtB,CAAC,MAAM,IAAID,IAAI,GAAG,EAAE,EAAE;YACrBd,MAAM,CAACiB,IAAI,CAACF,QAAQ,CAAC;UACtB,CAAC,MAAM,IAAID,IAAI,GAAG,CAAC,EAAE;YACpBd,MAAM,CAACkB,GAAG,CAACH,QAAQ,CAAC;UACrB,CAAC,MAAM;YACNf,MAAM,CAACmB,KAAK,CAACJ,QAAQ,CAAC;UACvB;QACD;QACAd,SAAS,GAAGS,KAAK;QACjBR,aAAa,GAAGW,GAAG;MACpB;IACD;IACA,IAAIT,UAAU,KAAK,CAAC,EAAEJ,MAAM,CAACO,MAAM,CAAC,CAAC;EACtC,CAAC;EAED,OAAOJ,cAAc;AACtB,CAAC;AAED,MAAMiB,cAAc,CAAC;EACpB;AACD;AACA;EACCC,WAAWA,CAACC,OAAO,EAAE;IACpB,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;MAClCA,OAAO,GAAG;QACTC,OAAO,EAAED;MACV,CAAC;IACF;IAEAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB3B,eAAe,CAACE,MAAM,EAAEyB,OAAO,EAAE,iBAAiB,CAAC;IACnDA,OAAO,GAAGE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,cAAc,CAACM,cAAc,EAAEJ,OAAO,CAAC;IAEnE,IAAI,CAACvB,OAAO,GAAGuB,OAAO,CAACvB,OAAO;IAC9B,IAAI,CAACwB,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC9B,IAAI,CAACI,YAAY,GAAGL,OAAO,CAACK,YAAY;IACxC,IAAI,CAACC,WAAW,GAAGN,OAAO,CAACO,OAAO;IAClC,IAAI,CAACC,WAAW,GAAGR,OAAO,CAACS,OAAO;IAClC,IAAI,CAACC,iBAAiB,GAAGV,OAAO,CAACW,aAAa;EAC/C;EAEAC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAM;MAAER;IAAa,CAAC,GAAG,IAAI;IAC7B,MAAMJ,OAAO,GACZ,IAAI,CAACA,OAAO,IACZzB,oBAAoB,CACnB,IAAI,CAACC,OAAO,EACZoC,QAAQ,CAACC,uBAAuB,CAAC,kBAAkB,CACpD,CAAC;IACF,MAAMR,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAME,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAME,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;IAChD,IAAIG,QAAQ,CAACE,SAAS,EAAE;MACvB,MAAMC,MAAM,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAACE,SAAS,CAACG,MAAM,CAAC;MACnDL,QAAQ,CAACE,SAAS,CAACI,OAAO,CAAC,CAACN,QAAQ,EAAEO,GAAG,KAAK;QAC7C,IAAItB,cAAc,CAAC,CAACuB,CAAC,EAAEtC,GAAG,EAAE,GAAGC,IAAI,KAAK;UACvCgC,MAAM,CAACI,GAAG,CAAC,GAAG,CAACC,CAAC,EAAEtC,GAAG,EAAE,GAAGC,IAAI,CAAC;UAC/BiB,OAAO,CACNe,MAAM,CACJM,GAAG,CAAClC,KAAK,IAAKA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAK,CAAC,CAAC,CACtCmC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,GAAGT,MAAM,CAACE,MAAM,EACzC,IAAIE,GAAG,KAAKrC,GAAG,EAAE,EACjB,GAAGC,IACJ,CAAC;QACF,CAAC,CAAC,CAAC4B,KAAK,CAACC,QAAQ,CAAC;MACnB,CAAC,CAAC;IACH,CAAC,MAAM;MACN,IAAIa,gBAAgB,GAAG,CAAC;MACxB,IAAIC,gBAAgB,GAAG,CAAC;MACxB,IAAIC,WAAW,GAAGvB,YAAY;MAC9B,IAAIwB,YAAY,GAAG,CAAC;MACpB,IAAIC,WAAW,GAAG,CAAC;MACnB,IAAIC,WAAW,GAAG,CAAC;MACnB,MAAMpB,aAAa,GAAG,IAAIqB,GAAG,CAAC,CAAC;MAC/B,IAAIC,gBAAgB,GAAG,EAAE;MAEzB,MAAMC,MAAM,GAAGA,CAAA,KAAM;QACpB,MAAMC,gBAAgB,GACrBL,WAAW,GAAG5C,IAAI,CAACkD,GAAG,CAACV,gBAAgB,EAAEE,WAAW,CAAC;QACtD,MAAMS,gBAAgB,GACrBN,WAAW,GAAG7C,IAAI,CAACkD,GAAG,CAACT,gBAAgB,EAAEE,YAAY,CAAC;QAEvD,MAAMS,KAAK,GAAG,CACb,GAAG,GAAGpD,IAAI,CAACkD,GAAG,CAACD,gBAAgB,EAAEE,gBAAgB,CAAC,GAAG,GAAG,EACxD,UAAU,CACV;QACD,IAAI/B,WAAW,EAAE;UAChBgC,KAAK,CAACC,IAAI,CAAC,GAAGR,WAAW,IAAIF,YAAY,UAAU,CAAC;QACrD;QACA,IAAIrB,WAAW,EAAE;UAChB8B,KAAK,CAACC,IAAI,CAAC,GAAGT,WAAW,IAAIF,WAAW,UAAU,CAAC;QACpD;QACA,IAAIlB,iBAAiB,EAAE;UACtB4B,KAAK,CAACC,IAAI,CAAC,GAAG5B,aAAa,CAAC6B,IAAI,SAAS,CAAC;UAC1CF,KAAK,CAACC,IAAI,CAACN,gBAAgB,CAAC;QAC7B;QACAhC,OAAO,CAAC,GAAGqC,KAAK,CAAC;MAClB,CAAC;MAED,MAAMG,SAAS,GAAGC,MAAM,IAAI;QAC3Bd,WAAW,EAAE;QACb,IAAIlB,iBAAiB,EAAE;UACtB,MAAMiC,KAAK,GAAGD,MAAM,CAACE,UAAU,CAAC,CAAC;UACjC,IAAID,KAAK,EAAE;YACVhC,aAAa,CAACkC,GAAG,CAACF,KAAK,CAAC;YACxBV,gBAAgB,GAAGU,KAAK;UACzB;QACD;QACAT,MAAM,CAAC,CAAC;MACT,CAAC;MAED,MAAMY,QAAQ,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;QACjCnB,YAAY,EAAE;QACdK,MAAM,CAAC,CAAC;MACT,CAAC;MAED,MAAMe,UAAU,GAAGP,MAAM,IAAI;QAC5BZ,WAAW,EAAE;QACb,IAAIpB,iBAAiB,EAAE;UACtB,MAAMiC,KAAK,GAAGD,MAAM,CAACE,UAAU,CAAC,CAAC;UACjC,IAAID,KAAK,EAAE;YACVhC,aAAa,CAACuC,MAAM,CAACP,KAAK,CAAC;YAC3B,IAAIV,gBAAgB,KAAKU,KAAK,EAAE;cAC/BV,gBAAgB,GAAG,EAAE;cACrB,KAAK,MAAMkB,CAAC,IAAIxC,aAAa,EAAE;gBAC9BsB,gBAAgB,GAAGkB,CAAC;cACrB;YACD;UACD;QACD;QACAjB,MAAM,CAAC,CAAC;MACT,CAAC;MAED,MAAMkB,SAAS,GAAGA,CAACL,KAAK,EAAEC,IAAI,KAAK;QAClCjB,WAAW,EAAE;QACbG,MAAM,CAAC,CAAC;MACT,CAAC;MAEDrB,QAAQ,CAACwC,KAAK,CAACC,WAAW,CAACC,GAAG,CAAC,gBAAgB,EAAED,WAAW,IAAI;QAC/D,IAAIA,WAAW,CAACzC,QAAQ,CAAC2C,OAAO,CAAC,CAAC,EAAE;QACpC9B,gBAAgB,GAAGE,WAAW;QAC9BD,gBAAgB,GAAGE,YAAY;QAC/BD,WAAW,GAAGC,YAAY,GAAG,CAAC;QAC9BC,WAAW,GAAGC,WAAW,GAAG,CAAC;QAC7B9B,OAAO,CAAC,CAAC,EAAE,WAAW,CAAC;QAEvBqD,WAAW,CAACD,KAAK,CAACI,WAAW,CAACF,GAAG,CAAC,gBAAgB,EAAEd,SAAS,CAAC;QAC9Da,WAAW,CAACD,KAAK,CAACK,YAAY,CAACH,GAAG,CAAC,gBAAgB,EAAEN,UAAU,CAAC;QAChEK,WAAW,CAACD,KAAK,CAACM,aAAa,CAACJ,GAAG,CAAC,gBAAgB,EAAEN,UAAU,CAAC;QAEjEK,WAAW,CAACD,KAAK,CAACO,QAAQ,CAACL,GAAG,CAAC,gBAAgB,EAAET,QAAQ,CAAC;QAC1DQ,WAAW,CAACD,KAAK,CAACQ,WAAW,CAACN,GAAG,CAAC,gBAAgB,EAAEH,SAAS,CAAC;QAC9DE,WAAW,CAACD,KAAK,CAACS,YAAY,CAACP,GAAG,CAAC,gBAAgB,EAAEH,SAAS,CAAC;QAE/D,MAAMC,KAAK,GAAG;UACbU,aAAa,EAAE,qBAAqB;UACpCC,IAAI,EAAE,SAAS;UACfC,YAAY,EAAE,aAAa;UAC3BC,WAAW,EAAE,mBAAmB;UAChCC,yBAAyB,EAAE,iCAAiC;UAC5DC,oBAAoB,EAAE,2BAA2B;UACjDC,4BAA4B,EAAE,oCAAoC;UAClEC,yBAAyB,EAAE,iCAAiC;UAC5DC,QAAQ,EAAE,YAAY;UACtBC,oBAAoB,EAAE,2BAA2B;UACjDC,eAAe,EAAE,qBAAqB;UACtCC,uBAAuB,EAAE,8BAA8B;UACvDC,oBAAoB,EAAE,2BAA2B;UACjDC,mBAAmB,EAAE,0BAA0B;UAC/CC,cAAc,EAAE,oBAAoB;UACpCC,sBAAsB,EAAE,6BAA6B;UACrDC,mBAAmB,EAAE,0BAA0B;UAC/CC,YAAY,EAAE,oCAAoC;UAClDC,iBAAiB,EAAE,0CAA0C;UAC7DC,yBAAyB,EAAE,kCAAkC;UAC7DC,oBAAoB,EAAE,4BAA4B;UAClDC,4BAA4B,EAAE,qCAAqC;UACnEC,yBAAyB,EAAE,kCAAkC;UAC7DC,aAAa,EAAE,iBAAiB;UAChCC,mBAAmB,EAAE,2BAA2B;UAChDC,2BAA2B,EAAE,oCAAoC;UACjEC,eAAe,EAAE,mBAAmB;UACpCC,SAAS,EAAE,YAAY;UACvBC,iBAAiB,EAAE,wBAAwB;UAC3CC,sBAAsB,EAAE,wBAAwB;UAChDC,YAAY,EAAE,gBAAgB;UAC9BC,kBAAkB,EAAE,0BAA0B;UAC9CC,cAAc,EAAE,kBAAkB;UAClCC,gBAAgB,EAAE,uBAAuB;UACzCC,qBAAqB,EAAE,6BAA6B;UACpDC,aAAa,EAAE,gBAAgB;UAC/BC,YAAY,EAAE,eAAe;UAC7BC,UAAU,EAAE,SAAS;UACrBC,SAAS,EAAE,eAAe;UAC1BC,UAAU,EAAE,aAAa;UACzBC,kBAAkB,EAAE,0BAA0B;UAC9CC,iBAAiB,EAAE,yBAAyB;UAC5CC,qBAAqB,EAAE,oCAAoC;UAC3DC,MAAM,EAAE,WAAW;UACnBC,gBAAgB,EAAE,6BAA6B;UAC/CC,mBAAmB,EAAE,0BAA0B;UAC/CC,wBAAwB,EAAE,gCAAgC;UAC1DC,cAAc,EAAE,oBAAoB;UACpCC,mBAAmB,EAAE,0BAA0B;UAC/CC,SAAS,EAAE;QACZ,CAAC;QACD,MAAMC,aAAa,GAAG/G,MAAM,CAACgH,IAAI,CAAC7D,KAAK,CAAC,CAACnC,MAAM;QAC/ChB,MAAM,CAACgH,IAAI,CAAC7D,KAAK,CAAC,CAAClC,OAAO,CAAC,CAAC6B,IAAI,EAAE5B,GAAG,KAAK;UACzC,MAAM+F,KAAK,GAAG9D,KAAK,CAACL,IAAI,CAAC;UACzB,MAAMlE,UAAU,GAAIsC,GAAG,GAAG6F,aAAa,GAAI,IAAI,GAAG,GAAG;UACrD3D,WAAW,CAACD,KAAK,CAACL,IAAI,CAAC,CAACoE,SAAS,CAAC;YACjCpE,IAAI,EAAE,gBAAgB;YACtBqE,OAAO,EAAE,IAAI;YACbC,IAAI,EAAEA,CAAA,KAAM;cACXrH,OAAO,CAACnB,UAAU,EAAEqI,KAAK,CAAC;YAC3B,CAAC;YACD5D,GAAG,EAAEA,CAAC8D,OAAO,EAAE9D,GAAG,KAAK;cACtB,IAAI8D,OAAO,EAAE;gBACZ;gBACA;gBACAA,OAAO,CAACE,cAAc,GAAG,CAAClG,CAAC,EAAE,GAAGrC,IAAI,KAAK;kBACxCiB,OAAO,CAACnB,UAAU,EAAEqI,KAAK,EAAE5D,GAAG,CAACP,IAAI,EAAE,GAAGhE,IAAI,CAAC;gBAC9C,CAAC;cACF;cACAiB,OAAO,CAACnB,UAAU,EAAEqI,KAAK,EAAE5D,GAAG,CAACP,IAAI,CAAC;YACrC;UACD,CAAC,CAAC;QACH,CAAC,CAAC;MACH,CAAC,CAAC;MACFnC,QAAQ,CAACwC,KAAK,CAACmE,IAAI,CAACJ,SAAS,CAAC;QAC7BpE,IAAI,EAAE,gBAAgB;QACtBqE,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEA,CAAA,KAAM;UACXrH,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC;QAC1B,CAAC;QACDsD,GAAG,EAAEA,CAAC8D,OAAO,EAAE9D,GAAG,KAAK;UACtB,IAAI8D,OAAO,EAAE;YACZA,OAAO,CAACE,cAAc,GAAG,CAAClG,CAAC,EAAE,GAAGrC,IAAI,KAAK;cACxCiB,OAAO,CAAC,IAAI,EAAE,UAAU,EAAEsD,GAAG,CAACP,IAAI,EAAE,GAAGhE,IAAI,CAAC;YAC7C,CAAC;UACF;UACAiB,OAAO,CAAC,IAAI,EAAE,UAAU,EAAEsD,GAAG,CAACP,IAAI,CAAC;QACpC;MACD,CAAC,CAAC;MACFnC,QAAQ,CAACwC,KAAK,CAACoE,SAAS,CAACL,SAAS,CAAC;QAClCpE,IAAI,EAAE,gBAAgB;QACtBqE,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEA,CAAA,KAAM;UACXrH,OAAO,CAAC,IAAI,EAAE,gBAAgB,CAAC;QAChC,CAAC;QACDsD,GAAG,EAAEA,CAAC8D,OAAO,EAAE9D,GAAG,KAAK;UACtB,IAAI8D,OAAO,EAAE;YACZA,OAAO,CAACE,cAAc,GAAG,CAAClG,CAAC,EAAE,GAAGrC,IAAI,KAAK;cACxCiB,OAAO,CAAC,IAAI,EAAE,gBAAgB,EAAEsD,GAAG,CAACP,IAAI,EAAE,GAAGhE,IAAI,CAAC;YACnD,CAAC;UACF;UACAiB,OAAO,CAAC,IAAI,EAAE,gBAAgB,EAAEsD,GAAG,CAACP,IAAI,CAAC;QAC1C;MACD,CAAC,CAAC;MACFnC,QAAQ,CAACwC,KAAK,CAACqE,IAAI,CAACnE,GAAG,CAAC,gBAAgB,EAAE,MAAM;QAC/CtD,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC;MACf,CAAC,CAAC;IACH;EACD;AACD;AAEAH,cAAc,CAACM,cAAc,GAAG;EAC/B3B,OAAO,EAAE,KAAK;EACd4B,YAAY,EAAE,GAAG;EACjBI,OAAO,EAAE,IAAI;EACbE,aAAa,EAAE,IAAI;EACnB;EACAJ,OAAO,EAAE;AACV,CAAC;AAEDmC,MAAM,CAACiF,OAAO,GAAG7H,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script"}