{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Resolver = require(\"./Resolver\");\nconst SyncAsyncFileSystemDecorator = require(\"./SyncAsyncFileSystemDecorator\");\nconst ParsePlugin = require(\"./ParsePlugin\");\nconst DescriptionFilePlugin = require(\"./DescriptionFilePlugin\");\nconst NextPlugin = require(\"./NextPlugin\");\nconst TryNextPlugin = require(\"./TryNextPlugin\");\nconst ModuleKindPlugin = require(\"./ModuleKindPlugin\");\nconst FileKindPlugin = require(\"./FileKindPlugin\");\nconst JoinRequestPlugin = require(\"./JoinRequestPlugin\");\nconst ModulesInHierachicDirectoriesPlugin = require(\"./ModulesInHierachicDirectoriesPlugin\");\nconst ModulesInRootPlugin = require(\"./ModulesInRootPlugin\");\nconst AliasPlugin = require(\"./AliasPlugin\");\nconst AliasFieldPlugin = require(\"./AliasFieldPlugin\");\nconst ConcordExtensionsPlugin = require(\"./ConcordExtensionsPlugin\");\nconst ConcordMainPlugin = require(\"./ConcordMainPlugin\");\nconst ConcordModulesPlugin = require(\"./ConcordModulesPlugin\");\nconst DirectoryExistsPlugin = require(\"./DirectoryExistsPlugin\");\nconst FileExistsPlugin = require(\"./FileExistsPlugin\");\nconst SymlinkPlugin = require(\"./SymlinkPlugin\");\nconst MainFieldPlugin = require(\"./MainFieldPlugin\");\nconst UseFilePlugin = require(\"./UseFilePlugin\");\nconst AppendPlugin = require(\"./AppendPlugin\");\nconst RootPlugin = require(\"./RootPlugin\");\nconst RestrictionsPlugin = require(\"./RestrictionsPlugin\");\nconst ResultPlugin = require(\"./ResultPlugin\");\nconst ModuleAppendPlugin = require(\"./ModuleAppendPlugin\");\nconst UnsafeCachePlugin = require(\"./UnsafeCachePlugin\");\nexports.createResolver = function (options) {\n  //// OPTIONS ////\n\n  // A list of directories to resolve modules from, can be absolute path or folder name\n  let modules = options.modules || [\"node_modules\"];\n\n  // A list of description files to read from\n  const descriptionFiles = options.descriptionFiles || [\"package.json\"];\n\n  // A list of additional resolve plugins which should be applied\n  // The slice is there to create a copy, because otherwise pushing into plugins\n  // changes the original options.plugins array, causing duplicate plugins\n  const plugins = options.plugins && options.plugins.slice() || [];\n\n  // A list of main fields in description files\n  let mainFields = options.mainFields || [\"main\"];\n\n  // A list of alias fields in description files\n  const aliasFields = options.aliasFields || [];\n\n  // A list of main files in directories\n  const mainFiles = options.mainFiles || [\"index\"];\n\n  // A list of extensions which should be tried for files\n  let extensions = options.extensions || [\".js\", \".json\", \".node\"];\n\n  // Enforce that a extension from extensions must be used\n  const enforceExtension = options.enforceExtension || false;\n\n  // A list of module extensions which should be tried for modules\n  let moduleExtensions = options.moduleExtensions || [];\n\n  // Enforce that a extension from moduleExtensions must be used\n  const enforceModuleExtension = options.enforceModuleExtension || false;\n\n  // A list of module alias configurations or an object which maps key to value\n  let alias = options.alias || [];\n\n  // Resolve symlinks to their symlinked location\n  const symlinks = typeof options.symlinks !== \"undefined\" ? options.symlinks : true;\n\n  // Resolve to a context instead of a file\n  const resolveToContext = options.resolveToContext || false;\n\n  // A list of root paths\n  const roots = options.roots || [];\n\n  // Ignore errors happening when resolving roots\n  const ignoreRootsErrors = options.ignoreRootsErrors || false;\n\n  // Prefer to resolve server-relative urls as absolute paths before falling back to resolve in roots\n  const preferAbsolute = options.preferAbsolute || false;\n  const restrictions = options.restrictions || [];\n\n  // Use this cache object to unsafely cache the successful requests\n  let unsafeCache = options.unsafeCache || false;\n\n  // Whether or not the unsafeCache should include request context as part of the cache key.\n  const cacheWithContext = typeof options.cacheWithContext !== \"undefined\" ? options.cacheWithContext : true;\n\n  // Enable concord description file instructions\n  const enableConcord = options.concord || false;\n\n  // A function which decides whether a request should be cached or not.\n  // an object is passed with `path` and `request` properties.\n  const cachePredicate = options.cachePredicate || function () {\n    return true;\n  };\n\n  // The file system which should be used\n  const fileSystem = options.fileSystem;\n\n  // Use only the sync constiants of the file system calls\n  const useSyncFileSystemCalls = options.useSyncFileSystemCalls;\n\n  // A prepared Resolver to which the plugins are attached\n  let resolver = options.resolver;\n\n  //// options processing ////\n\n  if (!resolver) {\n    resolver = new Resolver(useSyncFileSystemCalls ? new SyncAsyncFileSystemDecorator(fileSystem) : fileSystem);\n  }\n  extensions = [].concat(extensions);\n  moduleExtensions = [].concat(moduleExtensions);\n  modules = mergeFilteredToArray([].concat(modules), item => {\n    return !isAbsolutePath(item);\n  });\n  mainFields = mainFields.map(item => {\n    if (typeof item === \"string\" || Array.isArray(item)) {\n      item = {\n        name: item,\n        forceRelative: true\n      };\n    }\n    return item;\n  });\n  if (typeof alias === \"object\" && !Array.isArray(alias)) {\n    alias = Object.keys(alias).map(key => {\n      let onlyModule = false;\n      let obj = alias[key];\n      if (/\\$$/.test(key)) {\n        onlyModule = true;\n        key = key.substr(0, key.length - 1);\n      }\n      if (typeof obj === \"string\") {\n        obj = {\n          alias: obj\n        };\n      }\n      obj = Object.assign({\n        name: key,\n        onlyModule: onlyModule\n      }, obj);\n      return obj;\n    });\n  }\n  if (unsafeCache && typeof unsafeCache !== \"object\") {\n    unsafeCache = {};\n  }\n\n  //// pipeline ////\n\n  resolver.ensureHook(\"resolve\");\n  resolver.ensureHook(\"parsedResolve\");\n  resolver.ensureHook(\"describedResolve\");\n  resolver.ensureHook(\"rawModule\");\n  resolver.ensureHook(\"module\");\n  resolver.ensureHook(\"relative\");\n  resolver.ensureHook(\"describedRelative\");\n  resolver.ensureHook(\"directory\");\n  resolver.ensureHook(\"existingDirectory\");\n  resolver.ensureHook(\"undescribedRawFile\");\n  resolver.ensureHook(\"rawFile\");\n  resolver.ensureHook(\"file\");\n  resolver.ensureHook(\"existingFile\");\n  resolver.ensureHook(\"resolved\");\n\n  // resolve\n  if (unsafeCache) {\n    plugins.push(new UnsafeCachePlugin(\"resolve\", cachePredicate, unsafeCache, cacheWithContext, \"new-resolve\"));\n    plugins.push(new ParsePlugin(\"new-resolve\", \"parsed-resolve\"));\n  } else {\n    plugins.push(new ParsePlugin(\"resolve\", \"parsed-resolve\"));\n  }\n\n  // parsed-resolve\n  plugins.push(new DescriptionFilePlugin(\"parsed-resolve\", descriptionFiles, \"described-resolve\"));\n  plugins.push(new NextPlugin(\"after-parsed-resolve\", \"described-resolve\"));\n\n  // described-resolve\n  if (alias.length > 0) plugins.push(new AliasPlugin(\"described-resolve\", alias, \"resolve\"));\n  if (enableConcord) {\n    plugins.push(new ConcordModulesPlugin(\"described-resolve\", {}, \"resolve\"));\n  }\n  aliasFields.forEach(item => {\n    plugins.push(new AliasFieldPlugin(\"described-resolve\", item, \"resolve\"));\n  });\n  plugins.push(new ModuleKindPlugin(\"after-described-resolve\", \"raw-module\"));\n  if (preferAbsolute) {\n    plugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\"));\n  }\n  roots.forEach(root => {\n    plugins.push(new RootPlugin(\"after-described-resolve\", root, \"relative\", ignoreRootsErrors));\n  });\n  if (!preferAbsolute) {\n    plugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\"));\n  }\n\n  // raw-module\n  moduleExtensions.forEach(item => {\n    plugins.push(new ModuleAppendPlugin(\"raw-module\", item, \"module\"));\n  });\n  if (!enforceModuleExtension) plugins.push(new TryNextPlugin(\"raw-module\", null, \"module\"));\n\n  // module\n  modules.forEach(item => {\n    if (Array.isArray(item)) plugins.push(new ModulesInHierachicDirectoriesPlugin(\"module\", item, \"resolve\"));else plugins.push(new ModulesInRootPlugin(\"module\", item, \"resolve\"));\n  });\n\n  // relative\n  plugins.push(new DescriptionFilePlugin(\"relative\", descriptionFiles, \"described-relative\"));\n  plugins.push(new NextPlugin(\"after-relative\", \"described-relative\"));\n\n  // described-relative\n  plugins.push(new FileKindPlugin(\"described-relative\", \"raw-file\"));\n  plugins.push(new TryNextPlugin(\"described-relative\", \"as directory\", \"directory\"));\n\n  // directory\n  plugins.push(new DirectoryExistsPlugin(\"directory\", \"existing-directory\"));\n  if (resolveToContext) {\n    // existing-directory\n    plugins.push(new NextPlugin(\"existing-directory\", \"resolved\"));\n  } else {\n    // existing-directory\n    if (enableConcord) {\n      plugins.push(new ConcordMainPlugin(\"existing-directory\", {}, \"resolve\"));\n    }\n    mainFields.forEach(item => {\n      plugins.push(new MainFieldPlugin(\"existing-directory\", item, \"resolve\"));\n    });\n    mainFiles.forEach(item => {\n      plugins.push(new UseFilePlugin(\"existing-directory\", item, \"undescribed-raw-file\"));\n    });\n\n    // undescribed-raw-file\n    plugins.push(new DescriptionFilePlugin(\"undescribed-raw-file\", descriptionFiles, \"raw-file\"));\n    plugins.push(new NextPlugin(\"after-undescribed-raw-file\", \"raw-file\"));\n\n    // raw-file\n    if (!enforceExtension) {\n      plugins.push(new TryNextPlugin(\"raw-file\", \"no extension\", \"file\"));\n    }\n    if (enableConcord) {\n      plugins.push(new ConcordExtensionsPlugin(\"raw-file\", {}, \"file\"));\n    }\n    extensions.forEach(item => {\n      plugins.push(new AppendPlugin(\"raw-file\", item, \"file\"));\n    });\n\n    // file\n    if (alias.length > 0) plugins.push(new AliasPlugin(\"file\", alias, \"resolve\"));\n    if (enableConcord) {\n      plugins.push(new ConcordModulesPlugin(\"file\", {}, \"resolve\"));\n    }\n    aliasFields.forEach(item => {\n      plugins.push(new AliasFieldPlugin(\"file\", item, \"resolve\"));\n    });\n    if (symlinks) plugins.push(new SymlinkPlugin(\"file\", \"relative\"));\n    plugins.push(new FileExistsPlugin(\"file\", \"existing-file\"));\n\n    // existing-file\n    plugins.push(new NextPlugin(\"existing-file\", \"resolved\"));\n  }\n\n  // resolved\n  if (restrictions.length > 0) {\n    plugins.push(new RestrictionsPlugin(resolver.hooks.resolved, restrictions));\n  }\n  plugins.push(new ResultPlugin(resolver.hooks.resolved));\n\n  //// RESOLVER ////\n\n  plugins.forEach(plugin => {\n    plugin.apply(resolver);\n  });\n  return resolver;\n};\nfunction mergeFilteredToArray(array, filter) {\n  return array.reduce((array, item) => {\n    if (filter(item)) {\n      const lastElement = array[array.length - 1];\n      if (Array.isArray(lastElement)) {\n        lastElement.push(item);\n      } else {\n        array.push([item]);\n      }\n      return array;\n    } else {\n      array.push(item);\n      return array;\n    }\n  }, []);\n}\nfunction isAbsolutePath(path) {\n  return /^[A-Z]:|^\\//.test(path);\n}","map":{"version":3,"names":["Resolver","require","SyncAsyncFileSystemDecorator","ParsePlugin","DescriptionFilePlugin","NextPlugin","TryNextPlugin","ModuleKindPlugin","FileKindPlugin","JoinRequestPlugin","ModulesInHierachicDirectoriesPlugin","ModulesInRootPlugin","AliasPlugin","AliasFieldPlugin","ConcordExtensionsPlugin","ConcordMainPlugin","ConcordModulesPlugin","DirectoryExistsPlugin","FileExistsPlugin","SymlinkPlugin","MainFieldPlugin","UseFilePlugin","AppendPlugin","RootPlugin","RestrictionsPlugin","ResultPlugin","ModuleAppendPlugin","UnsafeCachePlugin","exports","createResolver","options","modules","descriptionFiles","plugins","slice","mainFields","aliasFields","mainFiles","extensions","enforceExtension","moduleExtensions","enforceModuleExtension","alias","symlinks","resolveToContext","roots","ignoreRootsErrors","preferAbsolute","restrictions","unsafeCache","cacheWithContext","enableConcord","concord","cachePredicate","fileSystem","useSyncFileSystemCalls","resolver","concat","mergeFilteredToArray","item","isAbsolutePath","map","Array","isArray","name","forceRelative","Object","keys","key","onlyModule","obj","test","substr","length","assign","ensureHook","push","forEach","root","hooks","resolved","plugin","apply","array","filter","reduce","lastElement","path"],"sources":["/home/soon/bulletin-board/node_modules/enhanced-resolve/lib/ResolverFactory.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Resolver = require(\"./Resolver\");\n\nconst SyncAsyncFileSystemDecorator = require(\"./SyncAsyncFileSystemDecorator\");\n\nconst ParsePlugin = require(\"./ParsePlugin\");\nconst DescriptionFilePlugin = require(\"./DescriptionFilePlugin\");\nconst NextPlugin = require(\"./NextPlugin\");\nconst TryNextPlugin = require(\"./TryNextPlugin\");\nconst ModuleKindPlugin = require(\"./ModuleKindPlugin\");\nconst FileKindPlugin = require(\"./FileKindPlugin\");\nconst JoinRequestPlugin = require(\"./JoinRequestPlugin\");\nconst ModulesInHierachicDirectoriesPlugin = require(\"./ModulesInHierachicDirectoriesPlugin\");\nconst ModulesInRootPlugin = require(\"./ModulesInRootPlugin\");\nconst AliasPlugin = require(\"./AliasPlugin\");\nconst AliasFieldPlugin = require(\"./AliasFieldPlugin\");\nconst ConcordExtensionsPlugin = require(\"./ConcordExtensionsPlugin\");\nconst ConcordMainPlugin = require(\"./ConcordMainPlugin\");\nconst ConcordModulesPlugin = require(\"./ConcordModulesPlugin\");\nconst DirectoryExistsPlugin = require(\"./DirectoryExistsPlugin\");\nconst FileExistsPlugin = require(\"./FileExistsPlugin\");\nconst SymlinkPlugin = require(\"./SymlinkPlugin\");\nconst MainFieldPlugin = require(\"./MainFieldPlugin\");\nconst UseFilePlugin = require(\"./UseFilePlugin\");\nconst AppendPlugin = require(\"./AppendPlugin\");\nconst RootPlugin = require(\"./RootPlugin\");\nconst RestrictionsPlugin = require(\"./RestrictionsPlugin\");\nconst ResultPlugin = require(\"./ResultPlugin\");\nconst ModuleAppendPlugin = require(\"./ModuleAppendPlugin\");\nconst UnsafeCachePlugin = require(\"./UnsafeCachePlugin\");\n\nexports.createResolver = function(options) {\n\t//// OPTIONS ////\n\n\t// A list of directories to resolve modules from, can be absolute path or folder name\n\tlet modules = options.modules || [\"node_modules\"];\n\n\t// A list of description files to read from\n\tconst descriptionFiles = options.descriptionFiles || [\"package.json\"];\n\n\t// A list of additional resolve plugins which should be applied\n\t// The slice is there to create a copy, because otherwise pushing into plugins\n\t// changes the original options.plugins array, causing duplicate plugins\n\tconst plugins = (options.plugins && options.plugins.slice()) || [];\n\n\t// A list of main fields in description files\n\tlet mainFields = options.mainFields || [\"main\"];\n\n\t// A list of alias fields in description files\n\tconst aliasFields = options.aliasFields || [];\n\n\t// A list of main files in directories\n\tconst mainFiles = options.mainFiles || [\"index\"];\n\n\t// A list of extensions which should be tried for files\n\tlet extensions = options.extensions || [\".js\", \".json\", \".node\"];\n\n\t// Enforce that a extension from extensions must be used\n\tconst enforceExtension = options.enforceExtension || false;\n\n\t// A list of module extensions which should be tried for modules\n\tlet moduleExtensions = options.moduleExtensions || [];\n\n\t// Enforce that a extension from moduleExtensions must be used\n\tconst enforceModuleExtension = options.enforceModuleExtension || false;\n\n\t// A list of module alias configurations or an object which maps key to value\n\tlet alias = options.alias || [];\n\n\t// Resolve symlinks to their symlinked location\n\tconst symlinks =\n\t\ttypeof options.symlinks !== \"undefined\" ? options.symlinks : true;\n\n\t// Resolve to a context instead of a file\n\tconst resolveToContext = options.resolveToContext || false;\n\n\t// A list of root paths\n\tconst roots = options.roots || [];\n\n\t// Ignore errors happening when resolving roots\n\tconst ignoreRootsErrors = options.ignoreRootsErrors || false;\n\n\t// Prefer to resolve server-relative urls as absolute paths before falling back to resolve in roots\n\tconst preferAbsolute = options.preferAbsolute || false;\n\n\tconst restrictions = options.restrictions || [];\n\n\t// Use this cache object to unsafely cache the successful requests\n\tlet unsafeCache = options.unsafeCache || false;\n\n\t// Whether or not the unsafeCache should include request context as part of the cache key.\n\tconst cacheWithContext =\n\t\ttypeof options.cacheWithContext !== \"undefined\"\n\t\t\t? options.cacheWithContext\n\t\t\t: true;\n\n\t// Enable concord description file instructions\n\tconst enableConcord = options.concord || false;\n\n\t// A function which decides whether a request should be cached or not.\n\t// an object is passed with `path` and `request` properties.\n\tconst cachePredicate =\n\t\toptions.cachePredicate ||\n\t\tfunction() {\n\t\t\treturn true;\n\t\t};\n\n\t// The file system which should be used\n\tconst fileSystem = options.fileSystem;\n\n\t// Use only the sync constiants of the file system calls\n\tconst useSyncFileSystemCalls = options.useSyncFileSystemCalls;\n\n\t// A prepared Resolver to which the plugins are attached\n\tlet resolver = options.resolver;\n\n\t//// options processing ////\n\n\tif (!resolver) {\n\t\tresolver = new Resolver(\n\t\t\tuseSyncFileSystemCalls\n\t\t\t\t? new SyncAsyncFileSystemDecorator(fileSystem)\n\t\t\t\t: fileSystem\n\t\t);\n\t}\n\n\textensions = [].concat(extensions);\n\tmoduleExtensions = [].concat(moduleExtensions);\n\n\tmodules = mergeFilteredToArray([].concat(modules), item => {\n\t\treturn !isAbsolutePath(item);\n\t});\n\n\tmainFields = mainFields.map(item => {\n\t\tif (typeof item === \"string\" || Array.isArray(item)) {\n\t\t\titem = {\n\t\t\t\tname: item,\n\t\t\t\tforceRelative: true\n\t\t\t};\n\t\t}\n\t\treturn item;\n\t});\n\n\tif (typeof alias === \"object\" && !Array.isArray(alias)) {\n\t\talias = Object.keys(alias).map(key => {\n\t\t\tlet onlyModule = false;\n\t\t\tlet obj = alias[key];\n\t\t\tif (/\\$$/.test(key)) {\n\t\t\t\tonlyModule = true;\n\t\t\t\tkey = key.substr(0, key.length - 1);\n\t\t\t}\n\t\t\tif (typeof obj === \"string\") {\n\t\t\t\tobj = {\n\t\t\t\t\talias: obj\n\t\t\t\t};\n\t\t\t}\n\t\t\tobj = Object.assign(\n\t\t\t\t{\n\t\t\t\t\tname: key,\n\t\t\t\t\tonlyModule: onlyModule\n\t\t\t\t},\n\t\t\t\tobj\n\t\t\t);\n\t\t\treturn obj;\n\t\t});\n\t}\n\n\tif (unsafeCache && typeof unsafeCache !== \"object\") {\n\t\tunsafeCache = {};\n\t}\n\n\t//// pipeline ////\n\n\tresolver.ensureHook(\"resolve\");\n\tresolver.ensureHook(\"parsedResolve\");\n\tresolver.ensureHook(\"describedResolve\");\n\tresolver.ensureHook(\"rawModule\");\n\tresolver.ensureHook(\"module\");\n\tresolver.ensureHook(\"relative\");\n\tresolver.ensureHook(\"describedRelative\");\n\tresolver.ensureHook(\"directory\");\n\tresolver.ensureHook(\"existingDirectory\");\n\tresolver.ensureHook(\"undescribedRawFile\");\n\tresolver.ensureHook(\"rawFile\");\n\tresolver.ensureHook(\"file\");\n\tresolver.ensureHook(\"existingFile\");\n\tresolver.ensureHook(\"resolved\");\n\n\t// resolve\n\tif (unsafeCache) {\n\t\tplugins.push(\n\t\t\tnew UnsafeCachePlugin(\n\t\t\t\t\"resolve\",\n\t\t\t\tcachePredicate,\n\t\t\t\tunsafeCache,\n\t\t\t\tcacheWithContext,\n\t\t\t\t\"new-resolve\"\n\t\t\t)\n\t\t);\n\t\tplugins.push(new ParsePlugin(\"new-resolve\", \"parsed-resolve\"));\n\t} else {\n\t\tplugins.push(new ParsePlugin(\"resolve\", \"parsed-resolve\"));\n\t}\n\n\t// parsed-resolve\n\tplugins.push(\n\t\tnew DescriptionFilePlugin(\n\t\t\t\"parsed-resolve\",\n\t\t\tdescriptionFiles,\n\t\t\t\"described-resolve\"\n\t\t)\n\t);\n\tplugins.push(new NextPlugin(\"after-parsed-resolve\", \"described-resolve\"));\n\n\t// described-resolve\n\tif (alias.length > 0)\n\t\tplugins.push(new AliasPlugin(\"described-resolve\", alias, \"resolve\"));\n\tif (enableConcord) {\n\t\tplugins.push(new ConcordModulesPlugin(\"described-resolve\", {}, \"resolve\"));\n\t}\n\taliasFields.forEach(item => {\n\t\tplugins.push(new AliasFieldPlugin(\"described-resolve\", item, \"resolve\"));\n\t});\n\tplugins.push(new ModuleKindPlugin(\"after-described-resolve\", \"raw-module\"));\n\tif (preferAbsolute) {\n\t\tplugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\"));\n\t}\n\troots.forEach(root => {\n\t\tplugins.push(\n\t\t\tnew RootPlugin(\n\t\t\t\t\"after-described-resolve\",\n\t\t\t\troot,\n\t\t\t\t\"relative\",\n\t\t\t\tignoreRootsErrors\n\t\t\t)\n\t\t);\n\t});\n\tif (!preferAbsolute) {\n\t\tplugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\"));\n\t}\n\n\t// raw-module\n\tmoduleExtensions.forEach(item => {\n\t\tplugins.push(new ModuleAppendPlugin(\"raw-module\", item, \"module\"));\n\t});\n\tif (!enforceModuleExtension)\n\t\tplugins.push(new TryNextPlugin(\"raw-module\", null, \"module\"));\n\n\t// module\n\tmodules.forEach(item => {\n\t\tif (Array.isArray(item))\n\t\t\tplugins.push(\n\t\t\t\tnew ModulesInHierachicDirectoriesPlugin(\"module\", item, \"resolve\")\n\t\t\t);\n\t\telse plugins.push(new ModulesInRootPlugin(\"module\", item, \"resolve\"));\n\t});\n\n\t// relative\n\tplugins.push(\n\t\tnew DescriptionFilePlugin(\n\t\t\t\"relative\",\n\t\t\tdescriptionFiles,\n\t\t\t\"described-relative\"\n\t\t)\n\t);\n\tplugins.push(new NextPlugin(\"after-relative\", \"described-relative\"));\n\n\t// described-relative\n\tplugins.push(new FileKindPlugin(\"described-relative\", \"raw-file\"));\n\tplugins.push(\n\t\tnew TryNextPlugin(\"described-relative\", \"as directory\", \"directory\")\n\t);\n\n\t// directory\n\tplugins.push(new DirectoryExistsPlugin(\"directory\", \"existing-directory\"));\n\n\tif (resolveToContext) {\n\t\t// existing-directory\n\t\tplugins.push(new NextPlugin(\"existing-directory\", \"resolved\"));\n\t} else {\n\t\t// existing-directory\n\t\tif (enableConcord) {\n\t\t\tplugins.push(new ConcordMainPlugin(\"existing-directory\", {}, \"resolve\"));\n\t\t}\n\t\tmainFields.forEach(item => {\n\t\t\tplugins.push(new MainFieldPlugin(\"existing-directory\", item, \"resolve\"));\n\t\t});\n\t\tmainFiles.forEach(item => {\n\t\t\tplugins.push(\n\t\t\t\tnew UseFilePlugin(\"existing-directory\", item, \"undescribed-raw-file\")\n\t\t\t);\n\t\t});\n\n\t\t// undescribed-raw-file\n\t\tplugins.push(\n\t\t\tnew DescriptionFilePlugin(\n\t\t\t\t\"undescribed-raw-file\",\n\t\t\t\tdescriptionFiles,\n\t\t\t\t\"raw-file\"\n\t\t\t)\n\t\t);\n\t\tplugins.push(new NextPlugin(\"after-undescribed-raw-file\", \"raw-file\"));\n\n\t\t// raw-file\n\t\tif (!enforceExtension) {\n\t\t\tplugins.push(new TryNextPlugin(\"raw-file\", \"no extension\", \"file\"));\n\t\t}\n\t\tif (enableConcord) {\n\t\t\tplugins.push(new ConcordExtensionsPlugin(\"raw-file\", {}, \"file\"));\n\t\t}\n\t\textensions.forEach(item => {\n\t\t\tplugins.push(new AppendPlugin(\"raw-file\", item, \"file\"));\n\t\t});\n\n\t\t// file\n\t\tif (alias.length > 0)\n\t\t\tplugins.push(new AliasPlugin(\"file\", alias, \"resolve\"));\n\t\tif (enableConcord) {\n\t\t\tplugins.push(new ConcordModulesPlugin(\"file\", {}, \"resolve\"));\n\t\t}\n\t\taliasFields.forEach(item => {\n\t\t\tplugins.push(new AliasFieldPlugin(\"file\", item, \"resolve\"));\n\t\t});\n\t\tif (symlinks) plugins.push(new SymlinkPlugin(\"file\", \"relative\"));\n\t\tplugins.push(new FileExistsPlugin(\"file\", \"existing-file\"));\n\n\t\t// existing-file\n\t\tplugins.push(new NextPlugin(\"existing-file\", \"resolved\"));\n\t}\n\n\t// resolved\n\tif (restrictions.length > 0) {\n\t\tplugins.push(new RestrictionsPlugin(resolver.hooks.resolved, restrictions));\n\t}\n\tplugins.push(new ResultPlugin(resolver.hooks.resolved));\n\n\t//// RESOLVER ////\n\n\tplugins.forEach(plugin => {\n\t\tplugin.apply(resolver);\n\t});\n\n\treturn resolver;\n};\n\nfunction mergeFilteredToArray(array, filter) {\n\treturn array.reduce((array, item) => {\n\t\tif (filter(item)) {\n\t\t\tconst lastElement = array[array.length - 1];\n\t\t\tif (Array.isArray(lastElement)) {\n\t\t\t\tlastElement.push(item);\n\t\t\t} else {\n\t\t\t\tarray.push([item]);\n\t\t\t}\n\t\t\treturn array;\n\t\t} else {\n\t\t\tarray.push(item);\n\t\t\treturn array;\n\t\t}\n\t}, []);\n}\n\nfunction isAbsolutePath(path) {\n\treturn /^[A-Z]:|^\\//.test(path);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}