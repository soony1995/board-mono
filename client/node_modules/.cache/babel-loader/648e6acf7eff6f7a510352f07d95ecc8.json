{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nconst WebpackError = require(\"./WebpackError\");\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nclass DllReferencePlugin {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  constructor(options) {\n    validateOptions(schema, options, \"Dll Reference Plugin\");\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());\n    });\n    compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", (params, callback) => {\n      if (\"manifest\" in this.options) {\n        const manifest = this.options.manifest;\n        if (typeof manifest === \"string\") {\n          params.compilationDependencies.add(manifest);\n          compiler.inputFileSystem.readFile(manifest, (err, result) => {\n            if (err) return callback(err);\n            // Catch errors parsing the manifest so that blank\n            // or malformed manifest files don't kill the process.\n            try {\n              params[\"dll reference \" + manifest] = parseJson(result.toString(\"utf-8\"));\n            } catch (e) {\n              // Store the error in the params so that it can\n              // be added as a compilation error later on.\n              const manifestPath = makePathsRelative(compiler.options.context, manifest);\n              params[\"dll reference parse error \" + manifest] = new DllManifestError(manifestPath, e.message);\n            }\n            return callback();\n          });\n          return;\n        }\n      }\n      return callback();\n    });\n    compiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n      let name = this.options.name;\n      let sourceType = this.options.sourceType;\n      let content = \"content\" in this.options ? this.options.content : undefined;\n      if (\"manifest\" in this.options) {\n        let manifestParameter = this.options.manifest;\n        let manifest;\n        if (typeof manifestParameter === \"string\") {\n          // If there was an error parsing the manifest\n          // file, exit now because the error will be added\n          // as a compilation error in the \"compilation\" hook.\n          if (params[\"dll reference parse error \" + manifestParameter]) {\n            return;\n          }\n          manifest = /** @type {DllReferencePluginOptionsManifest} */params[\"dll reference \" + manifestParameter];\n        } else {\n          manifest = manifestParameter;\n        }\n        if (manifest) {\n          if (!name) name = manifest.name;\n          if (!sourceType) sourceType = manifest.type;\n          if (!content) content = manifest.content;\n        }\n      }\n      const externals = {};\n      const source = \"dll-reference \" + name;\n      externals[source] = name;\n      const normalModuleFactory = params.normalModuleFactory;\n      new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n      new DelegatedModuleFactoryPlugin({\n        source: source,\n        type: this.options.type,\n        scope: this.options.scope,\n        context: this.options.context || compiler.options.context,\n        content,\n        extensions: this.options.extensions\n      }).apply(normalModuleFactory);\n    });\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, params) => {\n      if (\"manifest\" in this.options) {\n        let manifest = this.options.manifest;\n        if (typeof manifest === \"string\") {\n          // If there was an error parsing the manifest file, add the\n          // error as a compilation error to make the compilation fail.\n          let e = params[\"dll reference parse error \" + manifest];\n          if (e) {\n            compilation.errors.push(e);\n          }\n        }\n      }\n    });\n  }\n}\nclass DllManifestError extends WebpackError {\n  constructor(filename, message) {\n    super();\n    this.name = \"DllManifestError\";\n    this.message = `Dll manifest ${filename}\\n${message}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nmodule.exports = DllReferencePlugin;","map":{"version":3,"names":["parseJson","require","DelegatedSourceDependency","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","DelegatedExportsDependency","NullFactory","makePathsRelative","WebpackError","validateOptions","schema","DllReferencePlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","compilationDependencies","add","inputFileSystem","readFile","err","result","toString","e","manifestPath","context","DllManifestError","message","compile","name","sourceType","content","undefined","manifestParameter","type","externals","source","scope","extensions","errors","push","filename","Error","captureStackTrace","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/DllReferencePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nconst WebpackError = require(\"./WebpackError\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options, \"Dll Reference Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedExportsDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tparams.compilationDependencies.add(manifest);\n\t\t\t\t\t\tcompiler.inputFileSystem.readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tparams[\"dll reference \" + manifest] = parseJson(\n\t\t\t\t\t\t\t\t\tresult.toString(\"utf-8\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tparams[\n\t\t\t\t\t\t\t\t\t\"dll reference parse error \" + manifest\n\t\t\t\t\t\t\t\t] = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (params[\"dll reference parse error \" + manifestParameter]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest =\n\t\t\t\t\t\t/** @type {DllReferencePluginOptionsManifest} */ (params[\n\t\t\t\t\t\t\t\"dll reference \" + manifestParameter\n\t\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tlet e = params[\"dll reference parse error \" + manifest];\n\t\t\t\t\t\tif (e) {\n\t\t\t\t\t\t\tcompilation.errors.push(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}