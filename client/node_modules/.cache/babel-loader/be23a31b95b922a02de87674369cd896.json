{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class RuntimeChunkPlugin {\n  constructor(options) {\n    this.options = Object.assign({\n      name: entrypoint => `runtime~${entrypoint.name}`\n    }, options);\n  }\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n      compilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", () => {\n        for (const entrypoint of compilation.entrypoints.values()) {\n          const chunk = entrypoint.getRuntimeChunk();\n          let name = this.options.name;\n          if (typeof name === \"function\") {\n            name = name(entrypoint);\n          }\n          if (chunk.getNumberOfModules() > 0 || !chunk.preventIntegration || chunk.name !== name) {\n            const newChunk = compilation.addChunk(name);\n            newChunk.preventIntegration = true;\n            entrypoint.unshiftChunk(newChunk);\n            newChunk.addGroup(entrypoint);\n            entrypoint.setRuntimeChunk(newChunk);\n          }\n        }\n      });\n    });\n  }\n};","map":{"version":3,"names":["module","exports","RuntimeChunkPlugin","constructor","options","Object","assign","name","entrypoint","apply","compiler","hooks","thisCompilation","tap","compilation","optimizeChunksAdvanced","entrypoints","values","chunk","getRuntimeChunk","getNumberOfModules","preventIntegration","newChunk","addChunk","unshiftChunk","addGroup","setRuntimeChunk"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/optimize/RuntimeChunkPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class RuntimeChunkPlugin {\n\tconstructor(options) {\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tname: entrypoint => `runtime~${entrypoint.name}`\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", () => {\n\t\t\t\tfor (const entrypoint of compilation.entrypoints.values()) {\n\t\t\t\t\tconst chunk = entrypoint.getRuntimeChunk();\n\t\t\t\t\tlet name = this.options.name;\n\t\t\t\t\tif (typeof name === \"function\") {\n\t\t\t\t\t\tname = name(entrypoint);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tchunk.getNumberOfModules() > 0 ||\n\t\t\t\t\t\t!chunk.preventIntegration ||\n\t\t\t\t\t\tchunk.name !== name\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst newChunk = compilation.addChunk(name);\n\t\t\t\t\t\tnewChunk.preventIntegration = true;\n\t\t\t\t\t\tentrypoint.unshiftChunk(newChunk);\n\t\t\t\t\t\tnewChunk.addGroup(entrypoint);\n\t\t\t\t\t\tentrypoint.setRuntimeChunk(newChunk);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,MAAMC,kBAAkB,CAAC;EACzCC,WAAWA,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAC3B;MACCC,IAAI,EAAEC,UAAU,IAAI,WAAWA,UAAU,CAACD,IAAI;IAC/C,CAAC,EACDH,OACD,CAAC;EACF;EAEAK,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CAAC,oBAAoB,EAAEC,WAAW,IAAI;MACvEA,WAAW,CAACH,KAAK,CAACI,sBAAsB,CAACF,GAAG,CAAC,oBAAoB,EAAE,MAAM;QACxE,KAAK,MAAML,UAAU,IAAIM,WAAW,CAACE,WAAW,CAACC,MAAM,CAAC,CAAC,EAAE;UAC1D,MAAMC,KAAK,GAAGV,UAAU,CAACW,eAAe,CAAC,CAAC;UAC1C,IAAIZ,IAAI,GAAG,IAAI,CAACH,OAAO,CAACG,IAAI;UAC5B,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;YAC/BA,IAAI,GAAGA,IAAI,CAACC,UAAU,CAAC;UACxB;UACA,IACCU,KAAK,CAACE,kBAAkB,CAAC,CAAC,GAAG,CAAC,IAC9B,CAACF,KAAK,CAACG,kBAAkB,IACzBH,KAAK,CAACX,IAAI,KAAKA,IAAI,EAClB;YACD,MAAMe,QAAQ,GAAGR,WAAW,CAACS,QAAQ,CAAChB,IAAI,CAAC;YAC3Ce,QAAQ,CAACD,kBAAkB,GAAG,IAAI;YAClCb,UAAU,CAACgB,YAAY,CAACF,QAAQ,CAAC;YACjCA,QAAQ,CAACG,QAAQ,CAACjB,UAAU,CAAC;YAC7BA,UAAU,CAACkB,eAAe,CAACJ,QAAQ,CAAC;UACrC;QACD;MACD,CAAC,CAAC;IACH,CAAC,CAAC;EACH;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}