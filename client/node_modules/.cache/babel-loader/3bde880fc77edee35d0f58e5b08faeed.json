{"ast":null,"code":"\"use strict\";\n\n/**\n * intersect creates Set containing the intersection of elements between all sets\n * @param {Set[]} sets an array of sets being checked for shared elements\n * @returns {Set<TODO>} returns a new Set containing the intersecting items\n */\nconst intersect = sets => {\n  if (sets.length === 0) return new Set();\n  if (sets.length === 1) return new Set(sets[0]);\n  let minSize = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < sets.length; i++) {\n    const size = sets[i].size;\n    if (size < minSize) {\n      minIndex = i;\n      minSize = size;\n    }\n  }\n  const current = new Set(sets[minIndex]);\n  for (let i = 0; i < sets.length; i++) {\n    if (i === minIndex) continue;\n    const set = sets[i];\n    for (const item of current) {\n      if (!set.has(item)) {\n        current.delete(item);\n      }\n    }\n  }\n  return current;\n};\n\n/**\n * Checks if a set is the subset of another set\n * @param {Set<TODO>} bigSet a Set which contains the original elements to compare against\n * @param {Set<TODO>} smallSet the set whos elements might be contained inside of bigSet\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\n */\nconst isSubset = (bigSet, smallSet) => {\n  if (bigSet.size < smallSet.size) return false;\n  for (const item of smallSet) {\n    if (!bigSet.has(item)) return false;\n  }\n  return true;\n};\nexports.intersect = intersect;\nexports.isSubset = isSubset;","map":{"version":3,"names":["intersect","sets","length","Set","minSize","Infinity","minIndex","i","size","current","set","item","has","delete","isSubset","bigSet","smallSet","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/util/SetHelpers.js"],"sourcesContent":["\"use strict\";\n\n/**\n * intersect creates Set containing the intersection of elements between all sets\n * @param {Set[]} sets an array of sets being checked for shared elements\n * @returns {Set<TODO>} returns a new Set containing the intersecting items\n */\nconst intersect = sets => {\n\tif (sets.length === 0) return new Set();\n\tif (sets.length === 1) return new Set(sets[0]);\n\tlet minSize = Infinity;\n\tlet minIndex = -1;\n\tfor (let i = 0; i < sets.length; i++) {\n\t\tconst size = sets[i].size;\n\t\tif (size < minSize) {\n\t\t\tminIndex = i;\n\t\t\tminSize = size;\n\t\t}\n\t}\n\tconst current = new Set(sets[minIndex]);\n\tfor (let i = 0; i < sets.length; i++) {\n\t\tif (i === minIndex) continue;\n\t\tconst set = sets[i];\n\t\tfor (const item of current) {\n\t\t\tif (!set.has(item)) {\n\t\t\t\tcurrent.delete(item);\n\t\t\t}\n\t\t}\n\t}\n\treturn current;\n};\n\n/**\n * Checks if a set is the subset of another set\n * @param {Set<TODO>} bigSet a Set which contains the original elements to compare against\n * @param {Set<TODO>} smallSet the set whos elements might be contained inside of bigSet\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\n */\nconst isSubset = (bigSet, smallSet) => {\n\tif (bigSet.size < smallSet.size) return false;\n\tfor (const item of smallSet) {\n\t\tif (!bigSet.has(item)) return false;\n\t}\n\treturn true;\n};\n\nexports.intersect = intersect;\nexports.isSubset = isSubset;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,IAAI,IAAI;EACzB,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAIC,GAAG,CAAC,CAAC;EACvC,IAAIF,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAIC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;EAC9C,IAAIG,OAAO,GAAGC,QAAQ;EACtB,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACC,MAAM,EAAEK,CAAC,EAAE,EAAE;IACrC,MAAMC,IAAI,GAAGP,IAAI,CAACM,CAAC,CAAC,CAACC,IAAI;IACzB,IAAIA,IAAI,GAAGJ,OAAO,EAAE;MACnBE,QAAQ,GAAGC,CAAC;MACZH,OAAO,GAAGI,IAAI;IACf;EACD;EACA,MAAMC,OAAO,GAAG,IAAIN,GAAG,CAACF,IAAI,CAACK,QAAQ,CAAC,CAAC;EACvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACC,MAAM,EAAEK,CAAC,EAAE,EAAE;IACrC,IAAIA,CAAC,KAAKD,QAAQ,EAAE;IACpB,MAAMI,GAAG,GAAGT,IAAI,CAACM,CAAC,CAAC;IACnB,KAAK,MAAMI,IAAI,IAAIF,OAAO,EAAE;MAC3B,IAAI,CAACC,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC,EAAE;QACnBF,OAAO,CAACI,MAAM,CAACF,IAAI,CAAC;MACrB;IACD;EACD;EACA,OAAOF,OAAO;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,QAAQ,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;EACtC,IAAID,MAAM,CAACP,IAAI,GAAGQ,QAAQ,CAACR,IAAI,EAAE,OAAO,KAAK;EAC7C,KAAK,MAAMG,IAAI,IAAIK,QAAQ,EAAE;IAC5B,IAAI,CAACD,MAAM,CAACH,GAAG,CAACD,IAAI,CAAC,EAAE,OAAO,KAAK;EACpC;EACA,OAAO,IAAI;AACZ,CAAC;AAEDM,OAAO,CAACjB,SAAS,GAAGA,SAAS;AAC7BiB,OAAO,CAACH,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}