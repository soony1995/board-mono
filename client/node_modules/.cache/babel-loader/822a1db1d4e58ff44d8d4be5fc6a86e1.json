{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst DependenciesBlockVariable = require(\"./DependenciesBlockVariable\");\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./DependenciesBlockVariable\")} DependenciesBlockVariable */\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\nclass DependenciesBlock {\n  constructor() {\n    /** @type {Dependency[]} */\n    this.dependencies = [];\n    /** @type {AsyncDependenciesBlock[]} */\n    this.blocks = [];\n    /** @type {DependenciesBlockVariable[]} */\n    this.variables = [];\n  }\n\n  /**\n   * Adds a DependencyBlock to DependencyBlock relationship.\n   * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n   *\n   * @param {AsyncDependenciesBlock} block block being added\n   * @returns {void}\n   */\n  addBlock(block) {\n    this.blocks.push(block);\n    block.parent = this;\n  }\n\n  /**\n   * @param {string} name name of dependency\n   * @param {string} expression expression string for variable\n   * @param {Dependency[]} dependencies dependency instances tied to variable\n   * @returns {void}\n   */\n  addVariable(name, expression, dependencies) {\n    for (let v of this.variables) {\n      if (v.name === name && v.expression === expression) {\n        return;\n      }\n    }\n    this.variables.push(new DependenciesBlockVariable(name, expression, dependencies));\n  }\n\n  /**\n   * @param {Dependency} dependency dependency being tied to block.\n   * This is an \"edge\" pointing to another \"node\" on module graph.\n   * @returns {void}\n   */\n  addDependency(dependency) {\n    this.dependencies.push(dependency);\n  }\n\n  /**\n   * @param {Dependency} dependency dependency being removed\n   * @returns {void}\n   */\n  removeDependency(dependency) {\n    const idx = this.dependencies.indexOf(dependency);\n    if (idx >= 0) {\n      this.dependencies.splice(idx, 1);\n    }\n  }\n\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @returns {void}\n   */\n  updateHash(hash) {\n    for (const dep of this.dependencies) dep.updateHash(hash);\n    for (const block of this.blocks) block.updateHash(hash);\n    for (const variable of this.variables) variable.updateHash(hash);\n  }\n  disconnect() {\n    for (const dep of this.dependencies) dep.disconnect();\n    for (const block of this.blocks) block.disconnect();\n    for (const variable of this.variables) variable.disconnect();\n  }\n  unseal() {\n    for (const block of this.blocks) block.unseal();\n  }\n\n  /**\n   * @param {DependencyFilterFunction} filter filter function for dependencies, gets passed all dependency ties from current instance\n   * @returns {boolean} returns boolean for filter\n   */\n  hasDependencies(filter) {\n    if (filter) {\n      for (const dep of this.dependencies) {\n        if (filter(dep)) return true;\n      }\n    } else {\n      if (this.dependencies.length > 0) {\n        return true;\n      }\n    }\n    for (const block of this.blocks) {\n      if (block.hasDependencies(filter)) return true;\n    }\n    for (const variable of this.variables) {\n      if (variable.hasDependencies(filter)) return true;\n    }\n    return false;\n  }\n  sortItems() {\n    for (const block of this.blocks) block.sortItems();\n  }\n}\nmodule.exports = DependenciesBlock;","map":{"version":3,"names":["DependenciesBlockVariable","require","DependenciesBlock","constructor","dependencies","blocks","variables","addBlock","block","push","parent","addVariable","name","expression","v","addDependency","dependency","removeDependency","idx","indexOf","splice","updateHash","hash","dep","variable","disconnect","unseal","hasDependencies","filter","length","sortItems","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/DependenciesBlock.js"],"sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst DependenciesBlockVariable = require(\"./DependenciesBlockVariable\");\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./DependenciesBlockVariable\")} DependenciesBlockVariable */\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\nclass DependenciesBlock {\n\tconstructor() {\n\t\t/** @type {Dependency[]} */\n\t\tthis.dependencies = [];\n\t\t/** @type {AsyncDependenciesBlock[]} */\n\t\tthis.blocks = [];\n\t\t/** @type {DependenciesBlockVariable[]} */\n\t\tthis.variables = [];\n\t}\n\n\t/**\n\t * Adds a DependencyBlock to DependencyBlock relationship.\n\t * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n\t *\n\t * @param {AsyncDependenciesBlock} block block being added\n\t * @returns {void}\n\t */\n\taddBlock(block) {\n\t\tthis.blocks.push(block);\n\t\tblock.parent = this;\n\t}\n\n\t/**\n\t * @param {string} name name of dependency\n\t * @param {string} expression expression string for variable\n\t * @param {Dependency[]} dependencies dependency instances tied to variable\n\t * @returns {void}\n\t */\n\taddVariable(name, expression, dependencies) {\n\t\tfor (let v of this.variables) {\n\t\t\tif (v.name === name && v.expression === expression) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.variables.push(\n\t\t\tnew DependenciesBlockVariable(name, expression, dependencies)\n\t\t);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being tied to block.\n\t * This is an \"edge\" pointing to another \"node\" on module graph.\n\t * @returns {void}\n\t */\n\taddDependency(dependency) {\n\t\tthis.dependencies.push(dependency);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being removed\n\t * @returns {void}\n\t */\n\tremoveDependency(dependency) {\n\t\tconst idx = this.dependencies.indexOf(dependency);\n\t\tif (idx >= 0) {\n\t\t\tthis.dependencies.splice(idx, 1);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @returns {void}\n\t */\n\tupdateHash(hash) {\n\t\tfor (const dep of this.dependencies) dep.updateHash(hash);\n\t\tfor (const block of this.blocks) block.updateHash(hash);\n\t\tfor (const variable of this.variables) variable.updateHash(hash);\n\t}\n\n\tdisconnect() {\n\t\tfor (const dep of this.dependencies) dep.disconnect();\n\t\tfor (const block of this.blocks) block.disconnect();\n\t\tfor (const variable of this.variables) variable.disconnect();\n\t}\n\n\tunseal() {\n\t\tfor (const block of this.blocks) block.unseal();\n\t}\n\n\t/**\n\t * @param {DependencyFilterFunction} filter filter function for dependencies, gets passed all dependency ties from current instance\n\t * @returns {boolean} returns boolean for filter\n\t */\n\thasDependencies(filter) {\n\t\tif (filter) {\n\t\t\tfor (const dep of this.dependencies) {\n\t\t\t\tif (filter(dep)) return true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.dependencies.length > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tfor (const block of this.blocks) {\n\t\t\tif (block.hasDependencies(filter)) return true;\n\t\t}\n\t\tfor (const variable of this.variables) {\n\t\t\tif (variable.hasDependencies(filter)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tsortItems() {\n\t\tfor (const block of this.blocks) block.sortItems();\n\t}\n}\n\nmodule.exports = DependenciesBlock;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}