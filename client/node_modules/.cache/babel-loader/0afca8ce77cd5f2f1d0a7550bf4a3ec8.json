{"ast":null,"code":"/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/**\n * @param {ChunkGroup} chunkGroup the ChunkGroup to connect\n * @param {Chunk} chunk chunk to tie to ChunkGroup\n * @returns {void}\n */\nconst connectChunkGroupAndChunk = (chunkGroup, chunk) => {\n  if (chunkGroup.pushChunk(chunk)) {\n    chunk.addGroup(chunkGroup);\n  }\n};\n\n/**\n * @param {ChunkGroup} parent parent ChunkGroup to connect\n * @param {ChunkGroup} child child ChunkGroup to connect\n * @returns {void}\n */\nconst connectChunkGroupParentAndChild = (parent, child) => {\n  if (parent.addChild(child)) {\n    child.addParent(parent);\n  }\n};\n\n/**\n * @param {Chunk} chunk Chunk to connect to Module\n * @param {Module} module Module to connect to Chunk\n * @returns {void}\n */\nconst connectChunkAndModule = (chunk, module) => {\n  if (module.addChunk(chunk)) {\n    chunk.addModule(module);\n  }\n};\n\n/**\n * @param {Chunk} chunk Chunk being disconnected\n * @param {Module} module Module being disconnected\n * @returns {void}\n */\nconst disconnectChunkAndModule = (chunk, module) => {\n  chunk.removeModule(module);\n  module.removeChunk(chunk);\n};\n\n/**\n * @param {AsyncDependenciesBlock} depBlock DepBlock being tied to ChunkGroup\n * @param {ChunkGroup} chunkGroup ChunkGroup being tied to DepBlock\n * @returns {void}\n */\nconst connectDependenciesBlockAndChunkGroup = (depBlock, chunkGroup) => {\n  if (chunkGroup.addBlock(depBlock)) {\n    depBlock.chunkGroup = chunkGroup;\n  }\n};\nexports.connectChunkGroupAndChunk = connectChunkGroupAndChunk;\nexports.connectChunkGroupParentAndChild = connectChunkGroupParentAndChild;\nexports.connectChunkAndModule = connectChunkAndModule;\nexports.disconnectChunkAndModule = disconnectChunkAndModule;\nexports.connectDependenciesBlockAndChunkGroup = connectDependenciesBlockAndChunkGroup;","map":{"version":3,"names":["connectChunkGroupAndChunk","chunkGroup","chunk","pushChunk","addGroup","connectChunkGroupParentAndChild","parent","child","addChild","addParent","connectChunkAndModule","module","addChunk","addModule","disconnectChunkAndModule","removeModule","removeChunk","connectDependenciesBlockAndChunkGroup","depBlock","addBlock","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/GraphHelpers.js"],"sourcesContent":["/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/**\n * @param {ChunkGroup} chunkGroup the ChunkGroup to connect\n * @param {Chunk} chunk chunk to tie to ChunkGroup\n * @returns {void}\n */\nconst connectChunkGroupAndChunk = (chunkGroup, chunk) => {\n\tif (chunkGroup.pushChunk(chunk)) {\n\t\tchunk.addGroup(chunkGroup);\n\t}\n};\n\n/**\n * @param {ChunkGroup} parent parent ChunkGroup to connect\n * @param {ChunkGroup} child child ChunkGroup to connect\n * @returns {void}\n */\nconst connectChunkGroupParentAndChild = (parent, child) => {\n\tif (parent.addChild(child)) {\n\t\tchild.addParent(parent);\n\t}\n};\n\n/**\n * @param {Chunk} chunk Chunk to connect to Module\n * @param {Module} module Module to connect to Chunk\n * @returns {void}\n */\nconst connectChunkAndModule = (chunk, module) => {\n\tif (module.addChunk(chunk)) {\n\t\tchunk.addModule(module);\n\t}\n};\n\n/**\n * @param {Chunk} chunk Chunk being disconnected\n * @param {Module} module Module being disconnected\n * @returns {void}\n */\nconst disconnectChunkAndModule = (chunk, module) => {\n\tchunk.removeModule(module);\n\tmodule.removeChunk(chunk);\n};\n\n/**\n * @param {AsyncDependenciesBlock} depBlock DepBlock being tied to ChunkGroup\n * @param {ChunkGroup} chunkGroup ChunkGroup being tied to DepBlock\n * @returns {void}\n */\nconst connectDependenciesBlockAndChunkGroup = (depBlock, chunkGroup) => {\n\tif (chunkGroup.addBlock(depBlock)) {\n\t\tdepBlock.chunkGroup = chunkGroup;\n\t}\n};\n\nexports.connectChunkGroupAndChunk = connectChunkGroupAndChunk;\nexports.connectChunkGroupParentAndChild = connectChunkGroupParentAndChild;\nexports.connectChunkAndModule = connectChunkAndModule;\nexports.disconnectChunkAndModule = disconnectChunkAndModule;\nexports.connectDependenciesBlockAndChunkGroup = connectDependenciesBlockAndChunkGroup;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,yBAAyB,GAAGA,CAACC,UAAU,EAAEC,KAAK,KAAK;EACxD,IAAID,UAAU,CAACE,SAAS,CAACD,KAAK,CAAC,EAAE;IAChCA,KAAK,CAACE,QAAQ,CAACH,UAAU,CAAC;EAC3B;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMI,+BAA+B,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EAC1D,IAAID,MAAM,CAACE,QAAQ,CAACD,KAAK,CAAC,EAAE;IAC3BA,KAAK,CAACE,SAAS,CAACH,MAAM,CAAC;EACxB;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMI,qBAAqB,GAAGA,CAACR,KAAK,EAAES,MAAM,KAAK;EAChD,IAAIA,MAAM,CAACC,QAAQ,CAACV,KAAK,CAAC,EAAE;IAC3BA,KAAK,CAACW,SAAS,CAACF,MAAM,CAAC;EACxB;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMG,wBAAwB,GAAGA,CAACZ,KAAK,EAAES,MAAM,KAAK;EACnDT,KAAK,CAACa,YAAY,CAACJ,MAAM,CAAC;EAC1BA,MAAM,CAACK,WAAW,CAACd,KAAK,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMe,qCAAqC,GAAGA,CAACC,QAAQ,EAAEjB,UAAU,KAAK;EACvE,IAAIA,UAAU,CAACkB,QAAQ,CAACD,QAAQ,CAAC,EAAE;IAClCA,QAAQ,CAACjB,UAAU,GAAGA,UAAU;EACjC;AACD,CAAC;AAEDmB,OAAO,CAACpB,yBAAyB,GAAGA,yBAAyB;AAC7DoB,OAAO,CAACf,+BAA+B,GAAGA,+BAA+B;AACzEe,OAAO,CAACV,qBAAqB,GAAGA,qBAAqB;AACrDU,OAAO,CAACN,wBAAwB,GAAGA,wBAAwB;AAC3DM,OAAO,CAACH,qCAAqC,GAAGA,qCAAqC","ignoreList":[]},"metadata":{},"sourceType":"script"}