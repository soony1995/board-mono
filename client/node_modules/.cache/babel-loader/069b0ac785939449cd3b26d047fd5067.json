{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst {\n  decode\n} = require(\"@webassemblyjs/wasm-parser\");\nconst {\n  moduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\nconst {\n  Tapable\n} = require(\"tapable\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleType = signature => {\n  for (const param of signature.params) {\n    if (!JS_COMPAT_TYPES.has(param.valtype)) {\n      return `${param.valtype} as parameter`;\n    }\n  }\n  for (const type of signature.results) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n  return null;\n};\n\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\n  for (const param of signature.args) {\n    if (!JS_COMPAT_TYPES.has(param)) {\n      return `${param} as parameter`;\n    }\n  }\n  for (const type of signature.result) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n  return null;\n};\nconst decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\nclass WebAssemblyParser extends Tapable {\n  constructor(options) {\n    super();\n    this.hooks = {};\n    this.options = options;\n  }\n  parse(binary, state) {\n    // flag it as ESM\n    state.module.buildMeta.exportsType = \"namespace\";\n\n    // parse it\n    const program = decode(binary, decoderOpts);\n    const module = program.body[0];\n    const moduleContext = moduleContextFromModuleAST(module);\n\n    // extract imports and exports\n    const exports = state.module.buildMeta.providedExports = [];\n    const jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = [];\n    const importedGlobals = [];\n    t.traverse(module, {\n      ModuleExport({\n        node\n      }) {\n        const descriptor = node.descr;\n        if (descriptor.exportType === \"Func\") {\n          const funcidx = descriptor.id.value;\n\n          /** @type {t.FuncSignature} */\n          const funcSignature = moduleContext.getFunction(funcidx);\n          const incompatibleType = getJsIncompatibleTypeOfFuncSignature(funcSignature);\n          if (incompatibleType) {\n            jsIncompatibleExports[node.name] = incompatibleType;\n          }\n        }\n        exports.push(node.name);\n        if (node.descr && node.descr.exportType === \"Global\") {\n          const refNode = importedGlobals[node.descr.id.value];\n          if (refNode) {\n            const dep = new WebAssemblyExportImportedDependency(node.name, refNode.module, refNode.name, refNode.descr.valtype);\n            state.module.addDependency(dep);\n          }\n        }\n      },\n      Global({\n        node\n      }) {\n        const init = node.init[0];\n        let importNode = null;\n        if (init.id === \"get_global\") {\n          const globalIdx = init.args[0].value;\n          if (globalIdx < importedGlobals.length) {\n            importNode = importedGlobals[globalIdx];\n          }\n        }\n        importedGlobals.push(importNode);\n      },\n      ModuleImport({\n        node\n      }) {\n        /** @type {false | string} */\n        let onlyDirectImport = false;\n        if (t.isMemory(node.descr) === true) {\n          onlyDirectImport = \"Memory\";\n        } else if (t.isTable(node.descr) === true) {\n          onlyDirectImport = \"Table\";\n        } else if (t.isFuncImportDescr(node.descr) === true) {\n          const incompatibleType = getJsIncompatibleType(node.descr.signature);\n          if (incompatibleType) {\n            onlyDirectImport = `Non-JS-compatible Func Sigurature (${incompatibleType})`;\n          }\n        } else if (t.isGlobalType(node.descr) === true) {\n          const type = node.descr.valtype;\n          if (!JS_COMPAT_TYPES.has(type)) {\n            onlyDirectImport = `Non-JS-compatible Global Type (${type})`;\n          }\n        }\n        const dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, onlyDirectImport);\n        state.module.addDependency(dep);\n        if (t.isGlobalType(node.descr)) {\n          importedGlobals.push(node);\n        }\n      }\n    });\n    return state;\n  }\n}\nmodule.exports = WebAssemblyParser;","map":{"version":3,"names":["t","require","decode","moduleContextFromModuleAST","Tapable","WebAssemblyImportDependency","WebAssemblyExportImportedDependency","JS_COMPAT_TYPES","Set","getJsIncompatibleType","signature","param","params","has","valtype","type","results","getJsIncompatibleTypeOfFuncSignature","args","result","decoderOpts","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","WebAssemblyParser","constructor","options","hooks","parse","binary","state","module","buildMeta","exportsType","program","body","moduleContext","exports","providedExports","jsIncompatibleExports","importedGlobals","traverse","ModuleExport","node","descriptor","descr","exportType","funcidx","id","value","funcSignature","getFunction","incompatibleType","name","push","refNode","dep","addDependency","Global","init","importNode","globalIdx","length","ModuleImport","onlyDirectImport","isMemory","isTable","isFuncImportDescr","isGlobalType"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/wasm/WebAssemblyParser.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst {\n\tmoduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\n\nconst { Tapable } = require(\"tapable\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleType = signature => {\n\tfor (const param of signature.params) {\n\t\tif (!JS_COMPAT_TYPES.has(param.valtype)) {\n\t\t\treturn `${param.valtype} as parameter`;\n\t\t}\n\t}\n\tfor (const type of signature.results) {\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n\t}\n\treturn null;\n};\n\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\n\tfor (const param of signature.args) {\n\t\tif (!JS_COMPAT_TYPES.has(param)) {\n\t\t\treturn `${param} as parameter`;\n\t\t}\n\t}\n\tfor (const type of signature.result) {\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n\t}\n\treturn null;\n};\n\nconst decoderOpts = {\n\tignoreCodeSection: true,\n\tignoreDataSection: true,\n\n\t// this will avoid having to lookup with identifiers in the ModuleContext\n\tignoreCustomNameSection: true\n};\n\nclass WebAssemblyParser extends Tapable {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.hooks = {};\n\t\tthis.options = options;\n\t}\n\n\tparse(binary, state) {\n\t\t// flag it as ESM\n\t\tstate.module.buildMeta.exportsType = \"namespace\";\n\n\t\t// parse it\n\t\tconst program = decode(binary, decoderOpts);\n\t\tconst module = program.body[0];\n\n\t\tconst moduleContext = moduleContextFromModuleAST(module);\n\n\t\t// extract imports and exports\n\t\tconst exports = (state.module.buildMeta.providedExports = []);\n\t\tconst jsIncompatibleExports = (state.module.buildMeta.jsIncompatibleExports = []);\n\n\t\tconst importedGlobals = [];\n\t\tt.traverse(module, {\n\t\t\tModuleExport({ node }) {\n\t\t\t\tconst descriptor = node.descr;\n\n\t\t\t\tif (descriptor.exportType === \"Func\") {\n\t\t\t\t\tconst funcidx = descriptor.id.value;\n\n\t\t\t\t\t/** @type {t.FuncSignature} */\n\t\t\t\t\tconst funcSignature = moduleContext.getFunction(funcidx);\n\n\t\t\t\t\tconst incompatibleType = getJsIncompatibleTypeOfFuncSignature(\n\t\t\t\t\t\tfuncSignature\n\t\t\t\t\t);\n\n\t\t\t\t\tif (incompatibleType) {\n\t\t\t\t\t\tjsIncompatibleExports[node.name] = incompatibleType;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\texports.push(node.name);\n\n\t\t\t\tif (node.descr && node.descr.exportType === \"Global\") {\n\t\t\t\t\tconst refNode = importedGlobals[node.descr.id.value];\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tconst dep = new WebAssemblyExportImportedDependency(\n\t\t\t\t\t\t\tnode.name,\n\t\t\t\t\t\t\trefNode.module,\n\t\t\t\t\t\t\trefNode.name,\n\t\t\t\t\t\t\trefNode.descr.valtype\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tstate.module.addDependency(dep);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tGlobal({ node }) {\n\t\t\t\tconst init = node.init[0];\n\n\t\t\t\tlet importNode = null;\n\n\t\t\t\tif (init.id === \"get_global\") {\n\t\t\t\t\tconst globalIdx = init.args[0].value;\n\n\t\t\t\t\tif (globalIdx < importedGlobals.length) {\n\t\t\t\t\t\timportNode = importedGlobals[globalIdx];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\timportedGlobals.push(importNode);\n\t\t\t},\n\n\t\t\tModuleImport({ node }) {\n\t\t\t\t/** @type {false | string} */\n\t\t\t\tlet onlyDirectImport = false;\n\n\t\t\t\tif (t.isMemory(node.descr) === true) {\n\t\t\t\t\tonlyDirectImport = \"Memory\";\n\t\t\t\t} else if (t.isTable(node.descr) === true) {\n\t\t\t\t\tonlyDirectImport = \"Table\";\n\t\t\t\t} else if (t.isFuncImportDescr(node.descr) === true) {\n\t\t\t\t\tconst incompatibleType = getJsIncompatibleType(node.descr.signature);\n\t\t\t\t\tif (incompatibleType) {\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Func Sigurature (${incompatibleType})`;\n\t\t\t\t\t}\n\t\t\t\t} else if (t.isGlobalType(node.descr) === true) {\n\t\t\t\t\tconst type = node.descr.valtype;\n\t\t\t\t\tif (!JS_COMPAT_TYPES.has(type)) {\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Global Type (${type})`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dep = new WebAssemblyImportDependency(\n\t\t\t\t\tnode.module,\n\t\t\t\t\tnode.name,\n\t\t\t\t\tnode.descr,\n\t\t\t\t\tonlyDirectImport\n\t\t\t\t);\n\n\t\t\t\tstate.module.addDependency(dep);\n\n\t\t\t\tif (t.isGlobalType(node.descr)) {\n\t\t\t\t\timportedGlobals.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = WebAssemblyParser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}