{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst ParserHelpers = require(\"./ParserHelpers\");\nconst getQuery = request => {\n  const i = request.indexOf(\"?\");\n  return i !== -1 ? request.substr(i) : \"\";\n};\nconst collectDeclaration = (declarations, pattern) => {\n  const stack = [pattern];\n  while (stack.length > 0) {\n    const node = stack.pop();\n    switch (node.type) {\n      case \"Identifier\":\n        declarations.add(node.name);\n        break;\n      case \"ArrayPattern\":\n        for (const element of node.elements) {\n          if (element) {\n            stack.push(element);\n          }\n        }\n        break;\n      case \"AssignmentPattern\":\n        stack.push(node.left);\n        break;\n      case \"ObjectPattern\":\n        for (const property of node.properties) {\n          stack.push(property.value);\n        }\n        break;\n      case \"RestElement\":\n        stack.push(node.argument);\n        break;\n    }\n  }\n};\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n  const declarations = new Set();\n  const stack = [branch];\n  while (stack.length > 0) {\n    const node = stack.pop();\n    // Some node could be `null` or `undefined`.\n    if (!node) continue;\n    switch (node.type) {\n      // Walk through control statements to look for hoisted declarations.\n      // Some branches are skipped since they do not allow declarations.\n      case \"BlockStatement\":\n        for (const stmt of node.body) {\n          stack.push(stmt);\n        }\n        break;\n      case \"IfStatement\":\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n        break;\n      case \"ForStatement\":\n        stack.push(node.init);\n        stack.push(node.body);\n        break;\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        stack.push(node.left);\n        stack.push(node.body);\n        break;\n      case \"DoWhileStatement\":\n      case \"WhileStatement\":\n      case \"LabeledStatement\":\n        stack.push(node.body);\n        break;\n      case \"SwitchStatement\":\n        for (const cs of node.cases) {\n          for (const consequent of cs.consequent) {\n            stack.push(consequent);\n          }\n        }\n        break;\n      case \"TryStatement\":\n        stack.push(node.block);\n        if (node.handler) {\n          stack.push(node.handler.body);\n        }\n        stack.push(node.finalizer);\n        break;\n      case \"FunctionDeclaration\":\n        if (includeFunctionDeclarations) {\n          collectDeclaration(declarations, node.id);\n        }\n        break;\n      case \"VariableDeclaration\":\n        if (node.kind === \"var\") {\n          for (const decl of node.declarations) {\n            collectDeclaration(declarations, decl.id);\n          }\n        }\n        break;\n    }\n  }\n  return Array.from(declarations);\n};\nclass ConstPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ConstPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      const handler = parser => {\n        parser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n          if (parser.scope.isAsmJs) return;\n          const param = parser.evaluateExpression(statement.test);\n          const bool = param.asBool();\n          if (typeof bool === \"boolean\") {\n            if (statement.test.type !== \"Literal\") {\n              const dep = new ConstDependency(`${bool}`, param.range);\n              dep.loc = statement.loc;\n              parser.state.current.addDependency(dep);\n            }\n            const branchToRemove = bool ? statement.alternate : statement.consequent;\n            if (branchToRemove) {\n              // Before removing the dead branch, the hoisted declarations\n              // must be collected.\n              //\n              // Given the following code:\n              //\n              //     if (true) f() else g()\n              //     if (false) {\n              //       function f() {}\n              //       const g = function g() {}\n              //       if (someTest) {\n              //         let a = 1\n              //         var x, {y, z} = obj\n              //       }\n              //     } else {\n              //       …\n              //     }\n              //\n              // the generated code is:\n              //\n              //     if (true) f() else {}\n              //     if (false) {\n              //       var f, x, y, z;   (in loose mode)\n              //       var x, y, z;      (in strict mode)\n              //     } else {\n              //       …\n              //     }\n              //\n              // NOTE: When code runs in strict mode, `var` declarations\n              // are hoisted but `function` declarations don't.\n              //\n              let declarations;\n              if (parser.scope.isStrict) {\n                // If the code runs in strict mode, variable declarations\n                // using `var` must be hoisted.\n                declarations = getHoistedDeclarations(branchToRemove, false);\n              } else {\n                // Otherwise, collect all hoisted declaration.\n                declarations = getHoistedDeclarations(branchToRemove, true);\n              }\n              let replacement;\n              if (declarations.length > 0) {\n                replacement = `{ var ${declarations.join(\", \")}; }`;\n              } else {\n                replacement = \"{}\";\n              }\n              const dep = new ConstDependency(replacement, branchToRemove.range);\n              dep.loc = branchToRemove.loc;\n              parser.state.current.addDependency(dep);\n            }\n            return bool;\n          }\n        });\n        parser.hooks.expressionConditionalOperator.tap(\"ConstPlugin\", expression => {\n          if (parser.scope.isAsmJs) return;\n          const param = parser.evaluateExpression(expression.test);\n          const bool = param.asBool();\n          if (typeof bool === \"boolean\") {\n            if (expression.test.type !== \"Literal\") {\n              const dep = new ConstDependency(` ${bool}`, param.range);\n              dep.loc = expression.loc;\n              parser.state.current.addDependency(dep);\n            }\n            // Expressions do not hoist.\n            // It is safe to remove the dead branch.\n            //\n            // Given the following code:\n            //\n            //   false ? someExpression() : otherExpression();\n            //\n            // the generated code is:\n            //\n            //   false ? undefined : otherExpression();\n            //\n            const branchToRemove = bool ? expression.alternate : expression.consequent;\n            const dep = new ConstDependency(\"undefined\", branchToRemove.range);\n            dep.loc = branchToRemove.loc;\n            parser.state.current.addDependency(dep);\n            return bool;\n          }\n        });\n        parser.hooks.expressionLogicalOperator.tap(\"ConstPlugin\", expression => {\n          if (parser.scope.isAsmJs) return;\n          if (expression.operator === \"&&\" || expression.operator === \"||\") {\n            const param = parser.evaluateExpression(expression.left);\n            const bool = param.asBool();\n            if (typeof bool === \"boolean\") {\n              // Expressions do not hoist.\n              // It is safe to remove the dead branch.\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   falsyExpression() && false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   true && someExpression();\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   truthyExpression() || false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   false && someExpression();\n              //\n              const keepRight = expression.operator === \"&&\" && bool || expression.operator === \"||\" && !bool;\n              if (param.isBoolean() || keepRight) {\n                // for case like\n                //\n                //   return'development'===process.env.NODE_ENV&&'foo'\n                //\n                // we need a space before the bool to prevent result like\n                //\n                //   returnfalse&&'foo'\n                //\n                const dep = new ConstDependency(` ${bool}`, param.range);\n                dep.loc = expression.loc;\n                parser.state.current.addDependency(dep);\n              } else {\n                parser.walkExpression(expression.left);\n              }\n              if (!keepRight) {\n                const dep = new ConstDependency(\"false\", expression.right.range);\n                dep.loc = expression.loc;\n                parser.state.current.addDependency(dep);\n              }\n              return keepRight;\n            }\n          }\n        });\n        parser.hooks.evaluateIdentifier.for(\"__resourceQuery\").tap(\"ConstPlugin\", expr => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          return ParserHelpers.evaluateToString(getQuery(parser.state.module.resource))(expr);\n        });\n        parser.hooks.expression.for(\"__resourceQuery\").tap(\"ConstPlugin\", () => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          parser.state.current.addVariable(\"__resourceQuery\", JSON.stringify(getQuery(parser.state.module.resource)));\n          return true;\n        });\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ConstPlugin\", handler);\n    });\n  }\n}\nmodule.exports = ConstPlugin;","map":{"version":3,"names":["ConstDependency","require","NullFactory","ParserHelpers","getQuery","request","i","indexOf","substr","collectDeclaration","declarations","pattern","stack","length","node","pop","type","add","name","element","elements","push","left","property","properties","value","argument","getHoistedDeclarations","branch","includeFunctionDeclarations","Set","stmt","body","consequent","alternate","init","cs","cases","block","handler","finalizer","id","kind","decl","Array","from","ConstPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","parser","statementIf","statement","scope","isAsmJs","param","evaluateExpression","test","bool","asBool","dep","range","loc","state","current","addDependency","branchToRemove","isStrict","replacement","join","expressionConditionalOperator","expression","expressionLogicalOperator","operator","keepRight","isBoolean","walkExpression","right","evaluateIdentifier","for","expr","module","evaluateToString","resource","addVariable","JSON","stringify","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/ConstPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst ParserHelpers = require(\"./ParserHelpers\");\n\nconst getQuery = request => {\n\tconst i = request.indexOf(\"?\");\n\treturn i !== -1 ? request.substr(i) : \"\";\n};\n\nconst collectDeclaration = (declarations, pattern) => {\n\tconst stack = [pattern];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\tswitch (node.type) {\n\t\t\tcase \"Identifier\":\n\t\t\t\tdeclarations.add(node.name);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tfor (const element of node.elements) {\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\tstack.push(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tfor (const property of node.properties) {\n\t\t\t\t\tstack.push(property.value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tstack.push(node.argument);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n\tconst declarations = new Set();\n\tconst stack = [branch];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\t// Some node could be `null` or `undefined`.\n\t\tif (!node) continue;\n\t\tswitch (node.type) {\n\t\t\t// Walk through control statements to look for hoisted declarations.\n\t\t\t// Some branches are skipped since they do not allow declarations.\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tfor (const stmt of node.body) {\n\t\t\t\t\tstack.push(stmt);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tstack.push(node.consequent);\n\t\t\t\tstack.push(node.alternate);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tstack.push(node.init);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\tcase \"WhileStatement\":\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tfor (const cs of node.cases) {\n\t\t\t\t\tfor (const consequent of cs.consequent) {\n\t\t\t\t\t\tstack.push(consequent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tstack.push(node.block);\n\t\t\t\tif (node.handler) {\n\t\t\t\t\tstack.push(node.handler.body);\n\t\t\t\t}\n\t\t\t\tstack.push(node.finalizer);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (includeFunctionDeclarations) {\n\t\t\t\t\tcollectDeclaration(declarations, node.id);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tif (node.kind === \"var\") {\n\t\t\t\t\tfor (const decl of node.declarations) {\n\t\t\t\t\t\tcollectDeclaration(declarations, decl.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn Array.from(declarations);\n};\n\nclass ConstPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ConstPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(ConstDependency, new NullFactory());\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tConstDependency,\n\t\t\t\t\tnew ConstDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = parser => {\n\t\t\t\t\tparser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\tconst param = parser.evaluateExpression(statement.test);\n\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\tif (statement.test.type !== \"Literal\") {\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(`${bool}`, param.range);\n\t\t\t\t\t\t\t\tdep.loc = statement.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t? statement.alternate\n\t\t\t\t\t\t\t\t: statement.consequent;\n\t\t\t\t\t\t\tif (branchToRemove) {\n\t\t\t\t\t\t\t\t// Before removing the dead branch, the hoisted declarations\n\t\t\t\t\t\t\t\t// must be collected.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else g()\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       function f() {}\n\t\t\t\t\t\t\t\t//       const g = function g() {}\n\t\t\t\t\t\t\t\t//       if (someTest) {\n\t\t\t\t\t\t\t\t//         let a = 1\n\t\t\t\t\t\t\t\t//         var x, {y, z} = obj\n\t\t\t\t\t\t\t\t//       }\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else {}\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       var f, x, y, z;   (in loose mode)\n\t\t\t\t\t\t\t\t//       var x, y, z;      (in strict mode)\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// NOTE: When code runs in strict mode, `var` declarations\n\t\t\t\t\t\t\t\t// are hoisted but `function` declarations don't.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tlet declarations;\n\t\t\t\t\t\t\t\tif (parser.scope.isStrict) {\n\t\t\t\t\t\t\t\t\t// If the code runs in strict mode, variable declarations\n\t\t\t\t\t\t\t\t\t// using `var` must be hoisted.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Otherwise, collect all hoisted declaration.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet replacement;\n\t\t\t\t\t\t\t\tif (declarations.length > 0) {\n\t\t\t\t\t\t\t\t\treplacement = `{ var ${declarations.join(\", \")}; }`;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treplacement = \"{}\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\treplacement,\n\t\t\t\t\t\t\t\t\tbranchToRemove.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expressionConditionalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.test);\n\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\tif (expression.test.type !== \"Literal\") {\n\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? someExpression() : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? undefined : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t\t? expression.alternate\n\t\t\t\t\t\t\t\t\t: expression.consequent;\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\"undefined\",\n\t\t\t\t\t\t\t\t\tbranchToRemove.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.expressionLogicalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\texpression.operator === \"&&\" ||\n\t\t\t\t\t\t\t\texpression.operator === \"||\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.left);\n\t\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   true && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   false && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\tconst keepRight =\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"&&\" && bool) ||\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"||\" && !bool);\n\n\t\t\t\t\t\t\t\t\tif (param.isBoolean() || keepRight) {\n\t\t\t\t\t\t\t\t\t\t// for case like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   return'development'===process.env.NODE_ENV&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t// we need a space before the bool to prevent result like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   returnfalse&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tparser.walkExpression(expression.left);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!keepRight) {\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\t\t\"false\",\n\t\t\t\t\t\t\t\t\t\t\texpression.right.range\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn keepRight;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\treturn ParserHelpers.evaluateToString(\n\t\t\t\t\t\t\t\tgetQuery(parser.state.module.resource)\n\t\t\t\t\t\t\t)(expr);\n\t\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", () => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\tparser.state.current.addVariable(\n\t\t\t\t\t\t\t\t\"__resourceQuery\",\n\t\t\t\t\t\t\t\tJSON.stringify(getQuery(parser.state.module.resource))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ConstPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}