{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n// TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\nclass OccurrenceOrderPlugin {\n  constructor(preferEntry) {\n    if (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n      throw new Error(\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\");\n    }\n    this.preferEntry = preferEntry;\n  }\n  apply(compiler) {\n    const preferEntry = this.preferEntry;\n    compiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", compilation => {\n      compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderPlugin\", modules => {\n        const occursInInitialChunksMap = new Map();\n        const occursInAllChunksMap = new Map();\n        const initialChunkChunkMap = new Map();\n        const entryCountMap = new Map();\n        for (const m of modules) {\n          let initial = 0;\n          let entry = 0;\n          for (const c of m.chunksIterable) {\n            if (c.canBeInitial()) initial++;\n            if (c.entryModule === m) entry++;\n          }\n          initialChunkChunkMap.set(m, initial);\n          entryCountMap.set(m, entry);\n        }\n        const countOccursInEntry = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n          return sum + initialChunkChunkMap.get(r.module);\n        };\n        const countOccurs = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n          let factor = 1;\n          if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n            factor = r.dependency.getNumberOfIdOccurrences();\n          }\n          if (factor === 0) {\n            return sum;\n          }\n          return sum + factor * r.module.getNumberOfChunks();\n        };\n        if (preferEntry) {\n          for (const m of modules) {\n            const result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n            occursInInitialChunksMap.set(m, result);\n          }\n        }\n        const originalOrder = new Map();\n        let i = 0;\n        for (const m of modules) {\n          const result = m.reasons.reduce(countOccurs, 0) + m.getNumberOfChunks() + entryCountMap.get(m);\n          occursInAllChunksMap.set(m, result);\n          originalOrder.set(m, i++);\n        }\n        modules.sort((a, b) => {\n          if (preferEntry) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n          const aOccurs = occursInAllChunksMap.get(a);\n          const bOccurs = occursInAllChunksMap.get(b);\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n      compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderPlugin\", chunks => {\n        const occursInInitialChunksMap = new Map();\n        const originalOrder = new Map();\n        let i = 0;\n        for (const c of chunks) {\n          let occurs = 0;\n          for (const chunkGroup of c.groupsIterable) {\n            for (const parent of chunkGroup.parentsIterable) {\n              if (parent.isInitial()) occurs++;\n            }\n          }\n          occursInInitialChunksMap.set(c, occurs);\n          originalOrder.set(c, i++);\n        }\n        chunks.sort((a, b) => {\n          const aEntryOccurs = occursInInitialChunksMap.get(a);\n          const bEntryOccurs = occursInInitialChunksMap.get(b);\n          if (aEntryOccurs > bEntryOccurs) return -1;\n          if (aEntryOccurs < bEntryOccurs) return 1;\n          const aOccurs = a.getNumberOfGroups();\n          const bOccurs = b.getNumberOfGroups();\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n    });\n  }\n}\nmodule.exports = OccurrenceOrderPlugin;","map":{"version":3,"names":["OccurrenceOrderPlugin","constructor","preferEntry","undefined","Error","apply","compiler","hooks","compilation","tap","optimizeModuleOrder","modules","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","c","chunksIterable","canBeInitial","entryModule","set","countOccursInEntry","sum","r","module","get","countOccurs","factor","dependency","getNumberOfIdOccurrences","getNumberOfChunks","result","reasons","reduce","originalOrder","i","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","orgA","orgB","optimizeChunkOrder","chunks","occurs","chunkGroup","groupsIterable","parent","parentsIterable","isInitial","getNumberOfGroups","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/optimize/OccurrenceOrderPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n// TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\nclass OccurrenceOrderPlugin {\n\tconstructor(preferEntry) {\n\t\tif (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.preferEntry = preferEntry;\n\t}\n\tapply(compiler) {\n\t\tconst preferEntry = this.preferEntry;\n\t\tcompiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeModuleOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tlet initial = 0;\n\t\t\t\t\t\tlet entry = 0;\n\t\t\t\t\t\tfor (const c of m.chunksIterable) {\n\t\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\t\tif (c.entryModule === m) entry++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst countOccursInEntry = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + initialChunkChunkMap.get(r.module);\n\t\t\t\t\t};\n\t\t\t\t\tconst countOccurs = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet factor = 1;\n\t\t\t\t\t\tif (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n\t\t\t\t\t\t\tfactor = r.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (factor === 0) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + factor * r.module.getNumberOfChunks();\n\t\t\t\t\t};\n\n\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tm.reasons.reduce(countOccursInEntry, 0) +\n\t\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst originalOrder = new Map();\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tm.reasons.reduce(countOccurs, 0) +\n\t\t\t\t\t\t\tm.getNumberOfChunks() +\n\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t\t\toriginalOrder.set(m, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tmodules.sort((a, b) => {\n\t\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.optimizeChunkOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst originalOrder = new Map();\n\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t\t\toriginalOrder.set(c, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tchunks.sort((a, b) => {\n\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = OccurrenceOrderPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}