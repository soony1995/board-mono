{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst BB = require('bluebird');\nconst chmod = BB.promisify(fs.chmod);\nconst unlink = BB.promisify(fs.unlink);\nlet move;\nlet pinflight;\nmodule.exports = moveFile;\nfunction moveFile(src, dest) {\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return BB.fromNode(cb => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {\n          // file handle stayed open even past graceful-fs limits\n        } else {\n          return cb(err);\n        }\n      }\n      return cb();\n    });\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return BB.join(unlink(src), process.platform !== 'win32' && chmod(dest, '0444'));\n  }).catch(() => {\n    if (!pinflight) {\n      pinflight = require('promise-inflight');\n    }\n    return pinflight('cacache-move-file:' + dest, () => {\n      return BB.promisify(fs.stat)(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err;\n        }\n        // file doesn't already exist! let's try a rename -> copy fallback\n        if (!move) {\n          move = require('move-concurrently');\n        }\n        return move(src, dest, {\n          BB,\n          fs\n        });\n      });\n    });\n  });\n}","map":{"version":3,"names":["fs","require","BB","chmod","promisify","unlink","move","pinflight","module","exports","moveFile","src","dest","fromNode","cb","link","err","code","process","platform","then","join","catch","stat"],"sources":["/home/soon/bulletin-board/node_modules/webpack/node_modules/cacache/lib/util/move-file.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst BB = require('bluebird')\nconst chmod = BB.promisify(fs.chmod)\nconst unlink = BB.promisify(fs.unlink)\nlet move\nlet pinflight\n\nmodule.exports = moveFile\nfunction moveFile (src, dest) {\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return BB.fromNode(cb => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {\n          // file handle stayed open even past graceful-fs limits\n        } else {\n          return cb(err)\n        }\n      }\n      return cb()\n    })\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return BB.join(unlink(src), process.platform !== 'win32' && chmod(dest, '0444'))\n  }).catch(() => {\n    if (!pinflight) { pinflight = require('promise-inflight') }\n    return pinflight('cacache-move-file:' + dest, () => {\n      return BB.promisify(fs.stat)(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err\n        }\n        // file doesn't already exist! let's try a rename -> copy fallback\n        if (!move) { move = require('move-concurrently') }\n        return move(src, dest, { BB, fs })\n      })\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjC,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAU,CAAC;AAC9B,MAAME,KAAK,GAAGD,EAAE,CAACE,SAAS,CAACJ,EAAE,CAACG,KAAK,CAAC;AACpC,MAAME,MAAM,GAAGH,EAAE,CAACE,SAAS,CAACJ,EAAE,CAACK,MAAM,CAAC;AACtC,IAAIC,IAAI;AACR,IAAIC,SAAS;AAEbC,MAAM,CAACC,OAAO,GAAGC,QAAQ;AACzB,SAASA,QAAQA,CAAEC,GAAG,EAAEC,IAAI,EAAE;EAC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOV,EAAE,CAACW,QAAQ,CAACC,EAAE,IAAI;IACvBd,EAAE,CAACe,IAAI,CAACJ,GAAG,EAAEC,IAAI,EAAEI,GAAG,IAAI;MACxB,IAAIA,GAAG,EAAE;QACP,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,IAAID,GAAG,CAACC,IAAI,KAAK,OAAO,EAAE;UACjD;QAAA,CACD,MAAM,IAAID,GAAG,CAACC,IAAI,KAAK,OAAO,IAAIC,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE;UAC/D;QAAA,CACD,MAAM;UACL,OAAOL,EAAE,CAACE,GAAG,CAAC;QAChB;MACF;MACA,OAAOF,EAAE,CAAC,CAAC;IACb,CAAC,CAAC;EACJ,CAAC,CAAC,CAACM,IAAI,CAAC,MAAM;IACZ;IACA,OAAOlB,EAAE,CAACmB,IAAI,CAAChB,MAAM,CAACM,GAAG,CAAC,EAAEO,OAAO,CAACC,QAAQ,KAAK,OAAO,IAAIhB,KAAK,CAACS,IAAI,EAAE,MAAM,CAAC,CAAC;EAClF,CAAC,CAAC,CAACU,KAAK,CAAC,MAAM;IACb,IAAI,CAACf,SAAS,EAAE;MAAEA,SAAS,GAAGN,OAAO,CAAC,kBAAkB,CAAC;IAAC;IAC1D,OAAOM,SAAS,CAAC,oBAAoB,GAAGK,IAAI,EAAE,MAAM;MAClD,OAAOV,EAAE,CAACE,SAAS,CAACJ,EAAE,CAACuB,IAAI,CAAC,CAACX,IAAI,CAAC,CAACU,KAAK,CAACN,GAAG,IAAI;QAC9C,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;UACzB;UACA,MAAMD,GAAG;QACX;QACA;QACA,IAAI,CAACV,IAAI,EAAE;UAAEA,IAAI,GAAGL,OAAO,CAAC,mBAAmB,CAAC;QAAC;QACjD,OAAOK,IAAI,CAACK,GAAG,EAAEC,IAAI,EAAE;UAAEV,EAAE;UAAEF;QAAG,CAAC,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script"}