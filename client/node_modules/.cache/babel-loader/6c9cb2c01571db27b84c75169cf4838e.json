{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Naoyuki Kanezawa @nkzawa\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\nconst MultiEntryPlugin = require(\"./MultiEntryPlugin\");\nconst SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDynamic} EntryDynamic */\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryStatic} EntryStatic */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass DynamicEntryPlugin {\n  /**\n   * @param {string} context the context path\n   * @param {EntryDynamic} entry the entry value\n   */\n  constructor(context, entry) {\n    this.context = context;\n    this.entry = entry;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DynamicEntryPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const multiModuleFactory = new MultiModuleFactory();\n      compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n      compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n    });\n    compiler.hooks.make.tapAsync(\"DynamicEntryPlugin\", (compilation, callback) => {\n      /**\n       * @param {string|string[]} entry entry value or array of entry values\n       * @param {string} name name of entry\n       * @returns {Promise<EntryStatic>} returns the promise resolving the Compilation#addEntry function\n       */\n      const addEntry = (entry, name) => {\n        const dep = DynamicEntryPlugin.createDependency(entry, name);\n        return new Promise((resolve, reject) => {\n          compilation.addEntry(this.context, dep, name, err => {\n            if (err) return reject(err);\n            resolve();\n          });\n        });\n      };\n      Promise.resolve(this.entry()).then(entry => {\n        if (typeof entry === \"string\" || Array.isArray(entry)) {\n          addEntry(entry, \"main\").then(() => callback(), callback);\n        } else if (typeof entry === \"object\") {\n          Promise.all(Object.keys(entry).map(name => {\n            return addEntry(entry[name], name);\n          })).then(() => callback(), callback);\n        }\n      });\n    });\n  }\n}\nmodule.exports = DynamicEntryPlugin;\n/**\n * @param {string|string[]} entry entry value or array of entry paths\n * @param {string} name name of entry\n * @returns {SingleEntryDependency|MultiEntryDependency} returns dep\n */\nDynamicEntryPlugin.createDependency = (entry, name) => {\n  if (Array.isArray(entry)) {\n    return MultiEntryPlugin.createDependency(entry, name);\n  } else {\n    return SingleEntryPlugin.createDependency(entry, name);\n  }\n};","map":{"version":3,"names":["MultiEntryDependency","require","SingleEntryDependency","MultiModuleFactory","MultiEntryPlugin","SingleEntryPlugin","DynamicEntryPlugin","constructor","context","entry","apply","compiler","hooks","compilation","tap","normalModuleFactory","multiModuleFactory","dependencyFactories","set","make","tapAsync","callback","addEntry","name","dep","createDependency","Promise","resolve","reject","err","then","Array","isArray","all","Object","keys","map","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/DynamicEntryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Naoyuki Kanezawa @nkzawa\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\nconst MultiEntryPlugin = require(\"./MultiEntryPlugin\");\nconst SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDynamic} EntryDynamic */\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryStatic} EntryStatic */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass DynamicEntryPlugin {\n\t/**\n\t * @param {string} context the context path\n\t * @param {EntryDynamic} entry the entry value\n\t */\n\tconstructor(context, entry) {\n\t\tthis.context = context;\n\t\tthis.entry = entry;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DynamicEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst multiModuleFactory = new MultiModuleFactory();\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tMultiEntryDependency,\n\t\t\t\t\tmultiModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"DynamicEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\t/**\n\t\t\t\t * @param {string|string[]} entry entry value or array of entry values\n\t\t\t\t * @param {string} name name of entry\n\t\t\t\t * @returns {Promise<EntryStatic>} returns the promise resolving the Compilation#addEntry function\n\t\t\t\t */\n\t\t\t\tconst addEntry = (entry, name) => {\n\t\t\t\t\tconst dep = DynamicEntryPlugin.createDependency(entry, name);\n\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\tcompilation.addEntry(this.context, dep, name, err => {\n\t\t\t\t\t\t\tif (err) return reject(err);\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tPromise.resolve(this.entry()).then(entry => {\n\t\t\t\t\tif (typeof entry === \"string\" || Array.isArray(entry)) {\n\t\t\t\t\t\taddEntry(entry, \"main\").then(() => callback(), callback);\n\t\t\t\t\t} else if (typeof entry === \"object\") {\n\t\t\t\t\t\tPromise.all(\n\t\t\t\t\t\t\tObject.keys(entry).map(name => {\n\t\t\t\t\t\t\t\treturn addEntry(entry[name], name);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).then(() => callback(), callback);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = DynamicEntryPlugin;\n/**\n * @param {string|string[]} entry entry value or array of entry paths\n * @param {string} name name of entry\n * @returns {SingleEntryDependency|MultiEntryDependency} returns dep\n */\nDynamicEntryPlugin.createDependency = (entry, name) => {\n\tif (Array.isArray(entry)) {\n\t\treturn MultiEntryPlugin.createDependency(entry, name);\n\t} else {\n\t\treturn SingleEntryPlugin.createDependency(entry, name);\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}