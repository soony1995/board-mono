{"ast":null,"code":"var fs = require('graceful-fs');\nvar Writable = require('readable-stream').Writable;\nvar util = require('util');\nvar MurmurHash3 = require('imurmurhash');\nvar iferr = require('iferr');\nvar crypto = require('crypto');\nfunction murmurhex() {\n  var hash = MurmurHash3('');\n  for (var ii = 0; ii < arguments.length; ++ii) {\n    hash.hash('' + arguments[ii]);\n  }\n  return hash.result();\n}\nvar invocations = 0;\nfunction getTmpname(filename) {\n  return filename + '.' + murmurhex(__filename, process.pid, ++invocations);\n}\nvar setImmediate = global.setImmediate || setTimeout;\nmodule.exports = WriteStreamAtomic;\n\n// Requirements:\n//   1. Write everything written to the stream to a temp file.\n//   2. If there are no errors:\n//      a. moves the temp file into its final destination\n//      b. emits `finish` & `closed` ONLY after the file is\n//         fully flushed and renamed.\n//   3. If there's an error, removes the temp file.\n\nutil.inherits(WriteStreamAtomic, Writable);\nfunction WriteStreamAtomic(path, options) {\n  if (!(this instanceof WriteStreamAtomic)) {\n    return new WriteStreamAtomic(path, options);\n  }\n  Writable.call(this, options);\n  this.__isWin = options && options.hasOwnProperty('isWin') ? options.isWin : process.platform === 'win32';\n  this.__atomicTarget = path;\n  this.__atomicTmp = getTmpname(path);\n  this.__atomicChown = options && options.chown;\n  this.__atomicClosed = false;\n  this.__atomicStream = fs.WriteStream(this.__atomicTmp, options);\n  this.__atomicStream.once('open', handleOpen(this));\n  this.__atomicStream.once('close', handleClose(this));\n  this.__atomicStream.once('error', handleError(this));\n}\n\n// We have to suppress default finish emitting, because ordinarily it\n// would happen as soon as `end` is called on us and all of the\n// data has been written to our target stream. So we suppress\n// finish from being emitted here, and only emit it after our\n// target stream is closed and we've moved everything around.\nWriteStreamAtomic.prototype.emit = function (event) {\n  if (event === 'finish') return this.__atomicStream.end();\n  return Writable.prototype.emit.apply(this, arguments);\n};\nWriteStreamAtomic.prototype._write = function (buffer, encoding, cb) {\n  var flushed = this.__atomicStream.write(buffer, encoding);\n  if (flushed) return cb();\n  this.__atomicStream.once('drain', cb);\n};\nfunction handleOpen(writeStream) {\n  return function (fd) {\n    writeStream.emit('open', fd);\n  };\n}\nfunction handleClose(writeStream) {\n  return function () {\n    if (writeStream.__atomicClosed) return;\n    writeStream.__atomicClosed = true;\n    if (writeStream.__atomicChown) {\n      var uid = writeStream.__atomicChown.uid;\n      var gid = writeStream.__atomicChown.gid;\n      return fs.chown(writeStream.__atomicTmp, uid, gid, iferr(cleanup, moveIntoPlace));\n    } else {\n      moveIntoPlace();\n    }\n  };\n  function moveIntoPlace() {\n    fs.rename(writeStream.__atomicTmp, writeStream.__atomicTarget, iferr(trapWindowsEPERM, end));\n  }\n  function trapWindowsEPERM(err) {\n    if (writeStream.__isWin && err.syscall && err.syscall === 'rename' && err.code && err.code === 'EPERM') {\n      checkFileHashes(err);\n    } else {\n      cleanup(err);\n    }\n  }\n  function checkFileHashes(eperm) {\n    var inprocess = 2;\n    var tmpFileHash = crypto.createHash('sha512');\n    var targetFileHash = crypto.createHash('sha512');\n    fs.createReadStream(writeStream.__atomicTmp).on('data', function (data, enc) {\n      tmpFileHash.update(data, enc);\n    }).on('error', fileHashError).on('end', fileHashComplete);\n    fs.createReadStream(writeStream.__atomicTarget).on('data', function (data, enc) {\n      targetFileHash.update(data, enc);\n    }).on('error', fileHashError).on('end', fileHashComplete);\n    function fileHashError() {\n      if (inprocess === 0) return;\n      inprocess = 0;\n      cleanup(eperm);\n    }\n    function fileHashComplete() {\n      if (inprocess === 0) return;\n      if (--inprocess) return;\n      if (tmpFileHash.digest('hex') === targetFileHash.digest('hex')) {\n        return cleanup();\n      } else {\n        return cleanup(eperm);\n      }\n    }\n  }\n  function cleanup(err) {\n    fs.unlink(writeStream.__atomicTmp, function () {\n      if (err) {\n        writeStream.emit('error', err);\n        writeStream.emit('close');\n      } else {\n        end();\n      }\n    });\n  }\n  function end() {\n    // We have to use our parent class directly because we suppress `finish`\n    // events fired via our own emit method.\n    Writable.prototype.emit.call(writeStream, 'finish');\n\n    // Delay the close to provide the same temporal separation a physical\n    // file operation would haveâ€“ that is, the close event is emitted only\n    // after the async close operation completes.\n    setImmediate(function () {\n      writeStream.emit('close');\n    });\n  }\n}\nfunction handleError(writeStream) {\n  return function (er) {\n    cleanupSync();\n    writeStream.emit('error', er);\n    writeStream.__atomicClosed = true;\n    writeStream.emit('close');\n  };\n  function cleanupSync() {\n    try {\n      fs.unlinkSync(writeStream.__atomicTmp);\n    } finally {\n      return;\n    }\n  }\n}","map":{"version":3,"names":["fs","require","Writable","util","MurmurHash3","iferr","crypto","murmurhex","hash","ii","arguments","length","result","invocations","getTmpname","filename","__filename","process","pid","setImmediate","global","setTimeout","module","exports","WriteStreamAtomic","inherits","path","options","call","__isWin","hasOwnProperty","isWin","platform","__atomicTarget","__atomicTmp","__atomicChown","chown","__atomicClosed","__atomicStream","WriteStream","once","handleOpen","handleClose","handleError","prototype","emit","event","end","apply","_write","buffer","encoding","cb","flushed","write","writeStream","fd","uid","gid","cleanup","moveIntoPlace","rename","trapWindowsEPERM","err","syscall","code","checkFileHashes","eperm","inprocess","tmpFileHash","createHash","targetFileHash","createReadStream","on","data","enc","update","fileHashError","fileHashComplete","digest","unlink","er","cleanupSync","unlinkSync"],"sources":["/home/soon/bulletin-board/node_modules/fs-write-stream-atomic/index.js"],"sourcesContent":["var fs = require('graceful-fs')\nvar Writable = require('readable-stream').Writable\nvar util = require('util')\nvar MurmurHash3 = require('imurmurhash')\nvar iferr = require('iferr')\nvar crypto = require('crypto')\n\nfunction murmurhex () {\n  var hash = MurmurHash3('')\n  for (var ii = 0; ii < arguments.length; ++ii) {\n    hash.hash('' + arguments[ii])\n  }\n  return hash.result()\n}\n\nvar invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' + murmurhex(__filename, process.pid, ++invocations)\n}\n\nvar setImmediate = global.setImmediate || setTimeout\n\nmodule.exports = WriteStreamAtomic\n\n// Requirements:\n//   1. Write everything written to the stream to a temp file.\n//   2. If there are no errors:\n//      a. moves the temp file into its final destination\n//      b. emits `finish` & `closed` ONLY after the file is\n//         fully flushed and renamed.\n//   3. If there's an error, removes the temp file.\n\nutil.inherits(WriteStreamAtomic, Writable)\nfunction WriteStreamAtomic (path, options) {\n  if (!(this instanceof WriteStreamAtomic)) {\n    return new WriteStreamAtomic(path, options)\n  }\n  Writable.call(this, options)\n\n  this.__isWin = options && options.hasOwnProperty('isWin') ? options.isWin : process.platform === 'win32'\n\n  this.__atomicTarget = path\n  this.__atomicTmp = getTmpname(path)\n\n  this.__atomicChown = options && options.chown\n\n  this.__atomicClosed = false\n\n  this.__atomicStream = fs.WriteStream(this.__atomicTmp, options)\n\n  this.__atomicStream.once('open', handleOpen(this))\n  this.__atomicStream.once('close', handleClose(this))\n  this.__atomicStream.once('error', handleError(this))\n}\n\n// We have to suppress default finish emitting, because ordinarily it\n// would happen as soon as `end` is called on us and all of the\n// data has been written to our target stream. So we suppress\n// finish from being emitted here, and only emit it after our\n// target stream is closed and we've moved everything around.\nWriteStreamAtomic.prototype.emit = function (event) {\n  if (event === 'finish') return this.__atomicStream.end()\n  return Writable.prototype.emit.apply(this, arguments)\n}\n\nWriteStreamAtomic.prototype._write = function (buffer, encoding, cb) {\n  var flushed = this.__atomicStream.write(buffer, encoding)\n  if (flushed) return cb()\n  this.__atomicStream.once('drain', cb)\n}\n\nfunction handleOpen (writeStream) {\n  return function (fd) {\n    writeStream.emit('open', fd)\n  }\n}\n\nfunction handleClose (writeStream) {\n  return function () {\n    if (writeStream.__atomicClosed) return\n    writeStream.__atomicClosed = true\n    if (writeStream.__atomicChown) {\n      var uid = writeStream.__atomicChown.uid\n      var gid = writeStream.__atomicChown.gid\n      return fs.chown(writeStream.__atomicTmp, uid, gid, iferr(cleanup, moveIntoPlace))\n    } else {\n      moveIntoPlace()\n    }\n  }\n\n  function moveIntoPlace () {\n    fs.rename(writeStream.__atomicTmp, writeStream.__atomicTarget, iferr(trapWindowsEPERM, end))\n  }\n\n  function trapWindowsEPERM (err) {\n    if (writeStream.__isWin &&\n        err.syscall && err.syscall === 'rename' &&\n        err.code && err.code === 'EPERM'\n    ) {\n      checkFileHashes(err)\n    } else {\n      cleanup(err)\n    }\n  }\n\n  function checkFileHashes (eperm) {\n    var inprocess = 2\n    var tmpFileHash = crypto.createHash('sha512')\n    var targetFileHash = crypto.createHash('sha512')\n\n    fs.createReadStream(writeStream.__atomicTmp)\n      .on('data', function (data, enc) { tmpFileHash.update(data, enc) })\n      .on('error', fileHashError)\n      .on('end', fileHashComplete)\n    fs.createReadStream(writeStream.__atomicTarget)\n      .on('data', function (data, enc) { targetFileHash.update(data, enc) })\n      .on('error', fileHashError)\n      .on('end', fileHashComplete)\n\n    function fileHashError () {\n      if (inprocess === 0) return\n      inprocess = 0\n      cleanup(eperm)\n    }\n\n    function fileHashComplete () {\n      if (inprocess === 0) return\n      if (--inprocess) return\n      if (tmpFileHash.digest('hex') === targetFileHash.digest('hex')) {\n        return cleanup()\n      } else {\n        return cleanup(eperm)\n      }\n    }\n  }\n\n  function cleanup (err) {\n    fs.unlink(writeStream.__atomicTmp, function () {\n      if (err) {\n        writeStream.emit('error', err)\n        writeStream.emit('close')\n      } else {\n        end()\n      }\n    })\n  }\n\n  function end () {\n    // We have to use our parent class directly because we suppress `finish`\n    // events fired via our own emit method.\n    Writable.prototype.emit.call(writeStream, 'finish')\n\n    // Delay the close to provide the same temporal separation a physical\n    // file operation would haveâ€“ that is, the close event is emitted only\n    // after the async close operation completes.\n    setImmediate(function () {\n      writeStream.emit('close')\n    })\n  }\n}\n\nfunction handleError (writeStream) {\n  return function (er) {\n    cleanupSync()\n    writeStream.emit('error', er)\n    writeStream.__atomicClosed = true\n    writeStream.emit('close')\n  }\n  function cleanupSync () {\n    try {\n      fs.unlinkSync(writeStream.__atomicTmp)\n    } finally {\n      return\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}