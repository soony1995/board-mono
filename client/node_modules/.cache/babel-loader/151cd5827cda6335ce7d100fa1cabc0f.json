{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  RawSource,\n  ReplaceSource\n} = require(\"webpack-sources\");\n\n// TODO: clean up this file\n// replace with newer constructs\n\n// TODO: remove DependencyVariables and replace them with something better\n\nclass JavascriptGenerator {\n  generate(module, dependencyTemplates, runtimeTemplate) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return new RawSource(\"throw new Error('No source available');\");\n    }\n    const source = new ReplaceSource(originalSource);\n    this.sourceBlock(module, module, [], dependencyTemplates, source, runtimeTemplate);\n    return source;\n  }\n  sourceBlock(module, block, availableVars, dependencyTemplates, source, runtimeTemplate) {\n    for (const dependency of block.dependencies) {\n      this.sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate);\n    }\n\n    /**\n     * Get the variables of all blocks that we need to inject.\n     * These will contain the variable name and its expression.\n     * The name will be added as a parameter in a IIFE the expression as its value.\n     */\n    const vars = block.variables.reduce((result, value) => {\n      const variable = this.sourceVariables(value, availableVars, dependencyTemplates, runtimeTemplate);\n      if (variable) {\n        result.push(variable);\n      }\n      return result;\n    }, []);\n\n    /**\n     * if we actually have variables\n     * this is important as how #splitVariablesInUniqueNamedChunks works\n     * it will always return an array in an array which would lead to a IIFE wrapper around\n     * a module if we do this with an empty vars array.\n     */\n    if (vars.length > 0) {\n      /**\n       * Split all variables up into chunks of unique names.\n       * e.g. imagine you have the following variable names that need to be injected:\n       * [foo, bar, baz, foo, some, more]\n       * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n       * (function(foo, bar, baz){\n       *   (function(foo, some, more){\n       *     …\n       *   }(…));\n       * }(…));\n       *\n       * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n       * [[foo, bar, baz], [foo, some, more]]\n       */\n      const injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(vars);\n\n      // create all the beginnings of IIFEs\n      const functionWrapperStarts = injectionVariableChunks.map(variableChunk => {\n        return this.variableInjectionFunctionWrapperStartCode(variableChunk.map(variable => variable.name));\n      });\n\n      // and all the ends\n      const functionWrapperEnds = injectionVariableChunks.map(variableChunk => {\n        return this.variableInjectionFunctionWrapperEndCode(module, variableChunk.map(variable => variable.expression), block);\n      });\n\n      // join them to one big string\n      const varStartCode = functionWrapperStarts.join(\"\");\n\n      // reverse the ends first before joining them, as the last added must be the inner most\n      const varEndCode = functionWrapperEnds.reverse().join(\"\");\n\n      // if we have anything, add it to the source\n      if (varStartCode && varEndCode) {\n        const start = block.range ? block.range[0] : -10;\n        const end = block.range ? block.range[1] : module.originalSource().size() + 1;\n        source.insert(start + 0.5, varStartCode);\n        source.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n      }\n    }\n    for (const childBlock of block.blocks) {\n      this.sourceBlock(module, childBlock, availableVars.concat(vars), dependencyTemplates, source, runtimeTemplate);\n    }\n  }\n  sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n    const template = dependencyTemplates.get(dependency.constructor);\n    if (!template) {\n      throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n    }\n    template.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n  }\n  sourceVariables(variable, availableVars, dependencyTemplates, runtimeTemplate) {\n    const name = variable.name;\n    const expr = variable.expressionSource(dependencyTemplates, runtimeTemplate);\n    if (availableVars.some(v => v.name === name && v.expression.source() === expr.source())) {\n      return;\n    }\n    return {\n      name: name,\n      expression: expr\n    };\n  }\n\n  /*\n   * creates the start part of a IIFE around the module to inject a variable name\n   * (function(…){   <- this part\n   * }.call(…))\n   */\n  variableInjectionFunctionWrapperStartCode(varNames) {\n    const args = varNames.join(\", \");\n    return `/* WEBPACK VAR INJECTION */(function(${args}) {`;\n  }\n  contextArgument(module, block) {\n    if (this === block) {\n      return module.exportsArgument;\n    }\n    return \"this\";\n  }\n\n  /*\n   * creates the end part of a IIFE around the module to inject a variable name\n   * (function(…){\n   * }.call(…))   <- this part\n   */\n  variableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n    const firstParam = this.contextArgument(module, block);\n    const furtherParams = varExpressions.map(e => e.source()).join(\", \");\n    return `}.call(${firstParam}, ${furtherParams}))`;\n  }\n  splitVariablesInUniqueNamedChunks(vars) {\n    const startState = [[]];\n    return vars.reduce((chunks, variable) => {\n      const current = chunks[chunks.length - 1];\n      // check if variable with same name exists already\n      // if so create a new chunk of variables.\n      const variableNameAlreadyExists = current.some(v => v.name === variable.name);\n      if (variableNameAlreadyExists) {\n        // start new chunk with current variable\n        chunks.push([variable]);\n      } else {\n        // else add it to current chunk\n        current.push(variable);\n      }\n      return chunks;\n    }, startState);\n  }\n}\nmodule.exports = JavascriptGenerator;","map":{"version":3,"names":["RawSource","ReplaceSource","require","JavascriptGenerator","generate","module","dependencyTemplates","runtimeTemplate","originalSource","source","sourceBlock","block","availableVars","dependency","dependencies","sourceDependency","vars","variables","reduce","result","value","variable","sourceVariables","push","length","injectionVariableChunks","splitVariablesInUniqueNamedChunks","functionWrapperStarts","map","variableChunk","variableInjectionFunctionWrapperStartCode","name","functionWrapperEnds","variableInjectionFunctionWrapperEndCode","expression","varStartCode","join","varEndCode","reverse","start","range","end","size","insert","childBlock","blocks","concat","template","get","constructor","Error","apply","expr","expressionSource","some","v","varNames","args","contextArgument","exportsArgument","varExpressions","firstParam","furtherParams","e","startState","chunks","current","variableNameAlreadyExists","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/JavascriptGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { RawSource, ReplaceSource } = require(\"webpack-sources\");\n\n// TODO: clean up this file\n// replace with newer constructs\n\n// TODO: remove DependencyVariables and replace them with something better\n\nclass JavascriptGenerator {\n\tgenerate(module, dependencyTemplates, runtimeTemplate) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"throw new Error('No source available');\");\n\t\t}\n\n\t\tconst source = new ReplaceSource(originalSource);\n\n\t\tthis.sourceBlock(\n\t\t\tmodule,\n\t\t\tmodule,\n\t\t\t[],\n\t\t\tdependencyTemplates,\n\t\t\tsource,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\treturn source;\n\t}\n\n\tsourceBlock(\n\t\tmodule,\n\t\tblock,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\tsource,\n\t\truntimeTemplate\n\t) {\n\t\tfor (const dependency of block.dependencies) {\n\t\t\tthis.sourceDependency(\n\t\t\t\tdependency,\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Get the variables of all blocks that we need to inject.\n\t\t * These will contain the variable name and its expression.\n\t\t * The name will be added as a parameter in a IIFE the expression as its value.\n\t\t */\n\t\tconst vars = block.variables.reduce((result, value) => {\n\t\t\tconst variable = this.sourceVariables(\n\t\t\t\tvalue,\n\t\t\t\tavailableVars,\n\t\t\t\tdependencyTemplates,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\n\t\t\tif (variable) {\n\t\t\t\tresult.push(variable);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t/**\n\t\t * if we actually have variables\n\t\t * this is important as how #splitVariablesInUniqueNamedChunks works\n\t\t * it will always return an array in an array which would lead to a IIFE wrapper around\n\t\t * a module if we do this with an empty vars array.\n\t\t */\n\t\tif (vars.length > 0) {\n\t\t\t/**\n\t\t\t * Split all variables up into chunks of unique names.\n\t\t\t * e.g. imagine you have the following variable names that need to be injected:\n\t\t\t * [foo, bar, baz, foo, some, more]\n\t\t\t * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n\t\t\t * (function(foo, bar, baz){\n\t\t\t *   (function(foo, some, more){\n\t\t\t *     …\n\t\t\t *   }(…));\n\t\t\t * }(…));\n\t\t\t *\n\t\t\t * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n\t\t\t * [[foo, bar, baz], [foo, some, more]]\n\t\t\t */\n\t\t\tconst injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(\n\t\t\t\tvars\n\t\t\t);\n\n\t\t\t// create all the beginnings of IIFEs\n\t\t\tconst functionWrapperStarts = injectionVariableChunks.map(\n\t\t\t\tvariableChunk => {\n\t\t\t\t\treturn this.variableInjectionFunctionWrapperStartCode(\n\t\t\t\t\t\tvariableChunk.map(variable => variable.name)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// and all the ends\n\t\t\tconst functionWrapperEnds = injectionVariableChunks.map(variableChunk => {\n\t\t\t\treturn this.variableInjectionFunctionWrapperEndCode(\n\t\t\t\t\tmodule,\n\t\t\t\t\tvariableChunk.map(variable => variable.expression),\n\t\t\t\t\tblock\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// join them to one big string\n\t\t\tconst varStartCode = functionWrapperStarts.join(\"\");\n\n\t\t\t// reverse the ends first before joining them, as the last added must be the inner most\n\t\t\tconst varEndCode = functionWrapperEnds.reverse().join(\"\");\n\n\t\t\t// if we have anything, add it to the source\n\t\t\tif (varStartCode && varEndCode) {\n\t\t\t\tconst start = block.range ? block.range[0] : -10;\n\t\t\t\tconst end = block.range\n\t\t\t\t\t? block.range[1]\n\t\t\t\t\t: module.originalSource().size() + 1;\n\t\t\t\tsource.insert(start + 0.5, varStartCode);\n\t\t\t\tsource.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n\t\t\t}\n\t\t}\n\n\t\tfor (const childBlock of block.blocks) {\n\t\t\tthis.sourceBlock(\n\t\t\t\tmodule,\n\t\t\t\tchildBlock,\n\t\t\t\tavailableVars.concat(vars),\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\t}\n\n\tsourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n\t\tconst template = dependencyTemplates.get(dependency.constructor);\n\t\tif (!template) {\n\t\t\tthrow new Error(\n\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t);\n\t\t}\n\t\ttemplate.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n\t}\n\n\tsourceVariables(\n\t\tvariable,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\truntimeTemplate\n\t) {\n\t\tconst name = variable.name;\n\t\tconst expr = variable.expressionSource(\n\t\t\tdependencyTemplates,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\tif (\n\t\t\tavailableVars.some(\n\t\t\t\tv => v.name === name && v.expression.source() === expr.source()\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\tname: name,\n\t\t\texpression: expr\n\t\t};\n\t}\n\n\t/*\n\t * creates the start part of a IIFE around the module to inject a variable name\n\t * (function(…){   <- this part\n\t * }.call(…))\n\t */\n\tvariableInjectionFunctionWrapperStartCode(varNames) {\n\t\tconst args = varNames.join(\", \");\n\t\treturn `/* WEBPACK VAR INJECTION */(function(${args}) {`;\n\t}\n\n\tcontextArgument(module, block) {\n\t\tif (this === block) {\n\t\t\treturn module.exportsArgument;\n\t\t}\n\t\treturn \"this\";\n\t}\n\n\t/*\n\t * creates the end part of a IIFE around the module to inject a variable name\n\t * (function(…){\n\t * }.call(…))   <- this part\n\t */\n\tvariableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n\t\tconst firstParam = this.contextArgument(module, block);\n\t\tconst furtherParams = varExpressions.map(e => e.source()).join(\", \");\n\t\treturn `}.call(${firstParam}, ${furtherParams}))`;\n\t}\n\n\tsplitVariablesInUniqueNamedChunks(vars) {\n\t\tconst startState = [[]];\n\t\treturn vars.reduce((chunks, variable) => {\n\t\t\tconst current = chunks[chunks.length - 1];\n\t\t\t// check if variable with same name exists already\n\t\t\t// if so create a new chunk of variables.\n\t\t\tconst variableNameAlreadyExists = current.some(\n\t\t\t\tv => v.name === variable.name\n\t\t\t);\n\n\t\t\tif (variableNameAlreadyExists) {\n\t\t\t\t// start new chunk with current variable\n\t\t\t\tchunks.push([variable]);\n\t\t\t} else {\n\t\t\t\t// else add it to current chunk\n\t\t\t\tcurrent.push(variable);\n\t\t\t}\n\t\t\treturn chunks;\n\t\t}, startState);\n\t}\n}\n\nmodule.exports = JavascriptGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}