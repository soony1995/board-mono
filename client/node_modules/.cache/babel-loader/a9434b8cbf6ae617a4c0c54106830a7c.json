{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\nmodule.exports = class ModulesInHierachicDirectoriesPlugin {\n  constructor(source, directories, target) {\n    this.source = source;\n    this.directories = [].concat(directories);\n    this.target = target;\n  }\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ModulesInHierachicDirectoriesPlugin\", (request, resolveContext, callback) => {\n      const fs = resolver.fileSystem;\n      const addrs = getPaths(request.path).paths.map(p => {\n        return this.directories.map(d => resolver.join(p, d));\n      }).reduce((array, p) => {\n        array.push.apply(array, p);\n        return array;\n      }, []);\n      forEachBail(addrs, (addr, callback) => {\n        fs.stat(addr, (err, stat) => {\n          if (!err && stat && stat.isDirectory()) {\n            const obj = Object.assign({}, request, {\n              path: addr,\n              request: \"./\" + request.request\n            });\n            const message = \"looking for modules in \" + addr;\n            return resolver.doResolve(target, obj, message, resolveContext, callback);\n          }\n          if (resolveContext.log) resolveContext.log(addr + \" doesn't exist or is not a directory\");\n          if (resolveContext.missing) resolveContext.missing.add(addr);\n          return callback();\n        });\n      }, callback);\n    });\n  }\n};","map":{"version":3,"names":["forEachBail","require","getPaths","module","exports","ModulesInHierachicDirectoriesPlugin","constructor","source","directories","target","concat","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","addrs","path","paths","map","p","d","join","reduce","array","push","addr","stat","err","isDirectory","obj","Object","assign","message","doResolve","log","missing","add"],"sources":["/home/soon/bulletin-board/node_modules/enhanced-resolve/lib/ModulesInHierachicDirectoriesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\n\nmodule.exports = class ModulesInHierachicDirectoriesPlugin {\n\tconstructor(source, directories, target) {\n\t\tthis.source = source;\n\t\tthis.directories = [].concat(directories);\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"ModulesInHierachicDirectoriesPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst addrs = getPaths(request.path)\n\t\t\t\t\t\t.paths.map(p => {\n\t\t\t\t\t\t\treturn this.directories.map(d => resolver.join(p, d));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.reduce((array, p) => {\n\t\t\t\t\t\t\tarray.push.apply(array, p);\n\t\t\t\t\t\t\treturn array;\n\t\t\t\t\t\t}, []);\n\t\t\t\t\tforEachBail(\n\t\t\t\t\t\taddrs,\n\t\t\t\t\t\t(addr, callback) => {\n\t\t\t\t\t\t\tfs.stat(addr, (err, stat) => {\n\t\t\t\t\t\t\t\tif (!err && stat && stat.isDirectory()) {\n\t\t\t\t\t\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\t\t\t\t\t\tpath: addr,\n\t\t\t\t\t\t\t\t\t\trequest: \"./\" + request.request\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tconst message = \"looking for modules in \" + addr;\n\t\t\t\t\t\t\t\t\treturn resolver.doResolve(\n\t\t\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t\taddr + \" doesn't exist or is not a directory\"\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(addr);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AAEtCE,MAAM,CAACC,OAAO,GAAG,MAAMC,mCAAmC,CAAC;EAC1DC,WAAWA,CAACC,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAE;IACxC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,WAAW,GAAG,EAAE,CAACE,MAAM,CAACF,WAAW,CAAC;IACzC,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;EAEAE,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMH,MAAM,GAAGG,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACJ,MAAM,CAAC;IAC/CG,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACP,MAAM,CAAC,CACpBQ,QAAQ,CACR,qCAAqC,EACrC,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACtC,MAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAAU;MAC9B,MAAMC,KAAK,GAAGnB,QAAQ,CAACc,OAAO,CAACM,IAAI,CAAC,CAClCC,KAAK,CAACC,GAAG,CAACC,CAAC,IAAI;QACf,OAAO,IAAI,CAACjB,WAAW,CAACgB,GAAG,CAACE,CAAC,IAAId,QAAQ,CAACe,IAAI,CAACF,CAAC,EAAEC,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC,CACDE,MAAM,CAAC,CAACC,KAAK,EAAEJ,CAAC,KAAK;QACrBI,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACkB,KAAK,EAAEJ,CAAC,CAAC;QAC1B,OAAOI,KAAK;MACb,CAAC,EAAE,EAAE,CAAC;MACP7B,WAAW,CACVqB,KAAK,EACL,CAACU,IAAI,EAAEb,QAAQ,KAAK;QACnBC,EAAE,CAACa,IAAI,CAACD,IAAI,EAAE,CAACE,GAAG,EAAED,IAAI,KAAK;UAC5B,IAAI,CAACC,GAAG,IAAID,IAAI,IAAIA,IAAI,CAACE,WAAW,CAAC,CAAC,EAAE;YACvC,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAErB,OAAO,EAAE;cACtCM,IAAI,EAAES,IAAI;cACVf,OAAO,EAAE,IAAI,GAAGA,OAAO,CAACA;YACzB,CAAC,CAAC;YACF,MAAMsB,OAAO,GAAG,yBAAyB,GAAGP,IAAI;YAChD,OAAOnB,QAAQ,CAAC2B,SAAS,CACxB9B,MAAM,EACN0B,GAAG,EACHG,OAAO,EACPrB,cAAc,EACdC,QACD,CAAC;UACF;UACA,IAAID,cAAc,CAACuB,GAAG,EACrBvB,cAAc,CAACuB,GAAG,CACjBT,IAAI,GAAG,sCACR,CAAC;UACF,IAAId,cAAc,CAACwB,OAAO,EAAExB,cAAc,CAACwB,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;UAC5D,OAAOb,QAAQ,CAAC,CAAC;QAClB,CAAC,CAAC;MACH,CAAC,EACDA,QACD,CAAC;IACF,CACD,CAAC;EACH;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}