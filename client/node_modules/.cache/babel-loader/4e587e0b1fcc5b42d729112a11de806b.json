{"ast":null,"code":"import { FSM, makeTransition } from \"@webassemblyjs/helper-fsm\";\nimport { codeFrameFromSource } from \"@webassemblyjs/helper-code-frame\";\n\n// eslint-disable-next-line\nfunction getCodeFrame(source, line, column) {\n  var loc = {\n    start: {\n      line: line,\n      column: column\n    }\n  };\n  return \"\\n\" + codeFrameFromSource(source, loc) + \"\\n\";\n}\nvar WHITESPACE = /\\s/;\nvar PARENS = /\\(|\\)/;\nvar LETTERS = /[a-z0-9_/]/i;\nvar idchar = /[a-z0-9!#$%&*+./:<=>?@\\\\[\\]^_`|~-]/i;\nvar valtypes = [\"i32\", \"i64\", \"f32\", \"f64\"];\nvar NUMBERS = /[0-9|.|_]/;\nvar NUMBER_KEYWORDS = /nan|inf/;\nfunction isNewLine(char) {\n  return char.charCodeAt(0) === 10 || char.charCodeAt(0) === 13;\n}\nfunction Token(type, value, start, end) {\n  var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var token = {\n    type: type,\n    value: value,\n    loc: {\n      start: start,\n      end: end\n    }\n  };\n  if (Object.keys(opts).length > 0) {\n    // $FlowIgnore\n    token[\"opts\"] = opts;\n  }\n  return token;\n}\nvar tokenTypes = {\n  openParen: \"openParen\",\n  closeParen: \"closeParen\",\n  number: \"number\",\n  string: \"string\",\n  name: \"name\",\n  identifier: \"identifier\",\n  valtype: \"valtype\",\n  dot: \"dot\",\n  comment: \"comment\",\n  equal: \"equal\",\n  keyword: \"keyword\"\n};\nexport var keywords = {\n  module: \"module\",\n  func: \"func\",\n  param: \"param\",\n  result: \"result\",\n  export: \"export\",\n  loop: \"loop\",\n  block: \"block\",\n  if: \"if\",\n  then: \"then\",\n  else: \"else\",\n  call: \"call\",\n  call_indirect: \"call_indirect\",\n  import: \"import\",\n  memory: \"memory\",\n  table: \"table\",\n  global: \"global\",\n  anyfunc: \"anyfunc\",\n  mut: \"mut\",\n  data: \"data\",\n  type: \"type\",\n  elem: \"elem\",\n  start: \"start\",\n  offset: \"offset\"\n};\nvar NUMERIC_SEPARATOR = \"_\";\n/**\n * Build the FSM for number literals\n */\n\nvar numberLiteralFSM = new FSM({\n  START: [makeTransition(/-|\\+/, \"AFTER_SIGN\"), makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  AFTER_SIGN: [makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  DEC_FRAC: [makeTransition(/[0-9]/, \"DEC_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC: [makeTransition(/[0-9]/, \"DEC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"DEC_FRAC\"), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC_SIGNED_EXP: [makeTransition(/\\+|-/, \"DEC_EXP\"), makeTransition(/[0-9]/, \"DEC_EXP\")],\n  DEC_EXP: [makeTransition(/[0-9]/, \"DEC_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  HEX: [makeTransition(/[0-9|A-F|a-f]/, \"HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"HEX_FRAC\"), makeTransition(/p|P/, \"HEX_SIGNED_EXP\")],\n  HEX_FRAC: [makeTransition(/[0-9|A-F|a-f]/, \"HEX_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/p|P|/, \"HEX_SIGNED_EXP\")],\n  HEX_SIGNED_EXP: [makeTransition(/[0-9|+|-]/, \"HEX_EXP\")],\n  HEX_EXP: [makeTransition(/[0-9]/, \"HEX_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  NAN_HEX: [makeTransition(/[0-9|A-F|a-f]/, \"NAN_HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  STOP: []\n}, \"START\", \"STOP\");\nexport function tokenize(input) {\n  var current = 0;\n  var char = input[current]; // Used by SourceLocation\n\n  var column = 1;\n  var line = 1;\n  var tokens = [];\n  /**\n   * Creates a pushToken function for a given type\n   */\n\n  function pushToken(type) {\n    return function (v) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var startColumn = opts.startColumn || column - String(v).length;\n      delete opts.startColumn;\n      var endColumn = opts.endColumn || startColumn + String(v).length - 1;\n      delete opts.endColumn;\n      var start = {\n        line: line,\n        column: startColumn\n      };\n      var end = {\n        line: line,\n        column: endColumn\n      };\n      tokens.push(Token(type, v, start, end, opts));\n    };\n  }\n  /**\n   * Functions to save newly encountered tokens\n   */\n\n  var pushCloseParenToken = pushToken(tokenTypes.closeParen);\n  var pushOpenParenToken = pushToken(tokenTypes.openParen);\n  var pushNumberToken = pushToken(tokenTypes.number);\n  var pushValtypeToken = pushToken(tokenTypes.valtype);\n  var pushNameToken = pushToken(tokenTypes.name);\n  var pushIdentifierToken = pushToken(tokenTypes.identifier);\n  var pushKeywordToken = pushToken(tokenTypes.keyword);\n  var pushDotToken = pushToken(tokenTypes.dot);\n  var pushStringToken = pushToken(tokenTypes.string);\n  var pushCommentToken = pushToken(tokenTypes.comment);\n  var pushEqualToken = pushToken(tokenTypes.equal);\n  /**\n   * Can be used to look at the next character(s).\n   *\n   * The default behavior `lookahead()` simply returns the next character without consuming it.\n   * Letters are always returned in lowercase.\n   *\n   * @param {number} length How many characters to query. Default = 1\n   * @param {number} offset How many characters to skip forward from current one. Default = 1\n   *\n   */\n\n  function lookahead() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return input.substring(current + offset, current + offset + length).toLowerCase();\n  }\n  /**\n   * Advances the cursor in the input by a certain amount\n   *\n   * @param {number} amount How many characters to consume. Default = 1\n   */\n\n  function eatCharacter() {\n    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    column += amount;\n    current += amount;\n    char = input[current];\n  }\n  while (current < input.length) {\n    // ;;\n    if (char === \";\" && lookahead() === \";\") {\n      var startColumn = column;\n      eatCharacter(2);\n      var text = \"\";\n      while (!isNewLine(char)) {\n        text += char;\n        eatCharacter();\n        if (char === undefined) {\n          break;\n        }\n      }\n      var endColumn = column;\n      pushCommentToken(text, {\n        type: \"leading\",\n        startColumn: startColumn,\n        endColumn: endColumn\n      });\n      continue;\n    } // (;\n\n    if (char === \"(\" && lookahead() === \";\") {\n      var _startColumn = column;\n      eatCharacter(2);\n      var _text = \"\"; // ;)\n\n      while (true) {\n        char = input[current];\n        if (char === \";\" && lookahead() === \")\") {\n          eatCharacter(2);\n          break;\n        }\n        _text += char;\n        eatCharacter();\n        if (isNewLine(char)) {\n          line++;\n          column = 0;\n        }\n      }\n      var _endColumn = column;\n      pushCommentToken(_text, {\n        type: \"block\",\n        startColumn: _startColumn,\n        endColumn: _endColumn\n      });\n      continue;\n    }\n    if (char === \"(\") {\n      pushOpenParenToken(char);\n      eatCharacter();\n      continue;\n    }\n    if (char === \"=\") {\n      pushEqualToken(char);\n      eatCharacter();\n      continue;\n    }\n    if (char === \")\") {\n      pushCloseParenToken(char);\n      eatCharacter();\n      continue;\n    }\n    if (isNewLine(char)) {\n      line++;\n      eatCharacter();\n      column = 0;\n      continue;\n    }\n    if (WHITESPACE.test(char)) {\n      eatCharacter();\n      continue;\n    }\n    if (char === \"$\") {\n      var _startColumn2 = column;\n      eatCharacter();\n      var value = \"\";\n      while (idchar.test(char)) {\n        value += char;\n        eatCharacter();\n      }\n      var _endColumn2 = column;\n      pushIdentifierToken(value, {\n        startColumn: _startColumn2,\n        endColumn: _endColumn2\n      });\n      continue;\n    }\n    if (NUMBERS.test(char) || NUMBER_KEYWORDS.test(lookahead(3, 0)) || char === \"-\" || char === \"+\") {\n      var _startColumn3 = column;\n      var _value = numberLiteralFSM.run(input.slice(current));\n      if (_value === \"\") {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n      pushNumberToken(_value, {\n        startColumn: _startColumn3\n      });\n      eatCharacter(_value.length);\n      if (char && !PARENS.test(char) && !WHITESPACE.test(char)) {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n      continue;\n    }\n    if (char === '\"') {\n      var _startColumn4 = column;\n      var _value2 = \"\";\n      eatCharacter(); // \"\n\n      while (char !== '\"') {\n        if (isNewLine(char)) {\n          throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n        }\n        _value2 += char;\n        eatCharacter(); // char\n      }\n      eatCharacter(); // \"\n\n      var _endColumn3 = column;\n      pushStringToken(_value2, {\n        startColumn: _startColumn4,\n        endColumn: _endColumn3\n      });\n      continue;\n    }\n    if (LETTERS.test(char)) {\n      var _value3 = \"\";\n      var _startColumn5 = column;\n      while (char && LETTERS.test(char)) {\n        _value3 += char;\n        eatCharacter();\n      }\n      /*\n       * Handle MemberAccess\n       */\n\n      if (char === \".\") {\n        var dotStartColumn = column;\n        if (valtypes.indexOf(_value3) !== -1) {\n          pushValtypeToken(_value3, {\n            startColumn: _startColumn5\n          });\n        } else {\n          pushNameToken(_value3);\n        }\n        eatCharacter();\n        _value3 = \"\";\n        var nameStartColumn = column;\n        while (LETTERS.test(char)) {\n          _value3 += char;\n          eatCharacter();\n        }\n        pushDotToken(\".\", {\n          startColumn: dotStartColumn\n        });\n        pushNameToken(_value3, {\n          startColumn: nameStartColumn\n        });\n        continue;\n      }\n      /*\n       * Handle keywords\n       */\n      // $FlowIgnore\n\n      if (typeof keywords[_value3] === \"string\") {\n        pushKeywordToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle types\n       */\n\n      if (valtypes.indexOf(_value3) !== -1) {\n        pushValtypeToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle literals\n       */\n\n      pushNameToken(_value3, {\n        startColumn: _startColumn5\n      });\n      continue;\n    }\n    throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n  }\n  return tokens;\n}\nexport var tokens = tokenTypes;","map":{"version":3,"names":["FSM","makeTransition","codeFrameFromSource","getCodeFrame","source","line","column","loc","start","WHITESPACE","PARENS","LETTERS","idchar","valtypes","NUMBERS","NUMBER_KEYWORDS","isNewLine","char","charCodeAt","Token","type","value","end","opts","arguments","length","undefined","token","Object","keys","tokenTypes","openParen","closeParen","number","string","name","identifier","valtype","dot","comment","equal","keyword","keywords","module","func","param","result","export","loop","block","if","then","else","call","call_indirect","import","memory","table","global","anyfunc","mut","data","elem","offset","NUMERIC_SEPARATOR","numberLiteralFSM","START","n","AFTER_SIGN","DEC_FRAC","allowedSeparator","DEC","DEC_SIGNED_EXP","DEC_EXP","HEX","HEX_FRAC","HEX_SIGNED_EXP","HEX_EXP","NAN_HEX","STOP","tokenize","input","current","tokens","pushToken","v","startColumn","String","endColumn","push","pushCloseParenToken","pushOpenParenToken","pushNumberToken","pushValtypeToken","pushNameToken","pushIdentifierToken","pushKeywordToken","pushDotToken","pushStringToken","pushCommentToken","pushEqualToken","lookahead","substring","toLowerCase","eatCharacter","amount","text","_startColumn","_text","_endColumn","test","_startColumn2","_endColumn2","_startColumn3","_value","run","slice","Error","JSON","stringify","_startColumn4","_value2","_endColumn3","_value3","_startColumn5","dotStartColumn","indexOf","nameStartColumn"],"sources":["/home/soon/bulletin-board/node_modules/@webassemblyjs/wast-parser/esm/tokenizer.js"],"sourcesContent":["import { FSM, makeTransition } from \"@webassemblyjs/helper-fsm\";\nimport { codeFrameFromSource } from \"@webassemblyjs/helper-code-frame\";\n\n// eslint-disable-next-line\nfunction getCodeFrame(source, line, column) {\n  var loc = {\n    start: {\n      line: line,\n      column: column\n    }\n  };\n  return \"\\n\" + codeFrameFromSource(source, loc) + \"\\n\";\n}\n\nvar WHITESPACE = /\\s/;\nvar PARENS = /\\(|\\)/;\nvar LETTERS = /[a-z0-9_/]/i;\nvar idchar = /[a-z0-9!#$%&*+./:<=>?@\\\\[\\]^_`|~-]/i;\nvar valtypes = [\"i32\", \"i64\", \"f32\", \"f64\"];\nvar NUMBERS = /[0-9|.|_]/;\nvar NUMBER_KEYWORDS = /nan|inf/;\n\nfunction isNewLine(char) {\n  return char.charCodeAt(0) === 10 || char.charCodeAt(0) === 13;\n}\n\nfunction Token(type, value, start, end) {\n  var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var token = {\n    type: type,\n    value: value,\n    loc: {\n      start: start,\n      end: end\n    }\n  };\n\n  if (Object.keys(opts).length > 0) {\n    // $FlowIgnore\n    token[\"opts\"] = opts;\n  }\n\n  return token;\n}\n\nvar tokenTypes = {\n  openParen: \"openParen\",\n  closeParen: \"closeParen\",\n  number: \"number\",\n  string: \"string\",\n  name: \"name\",\n  identifier: \"identifier\",\n  valtype: \"valtype\",\n  dot: \"dot\",\n  comment: \"comment\",\n  equal: \"equal\",\n  keyword: \"keyword\"\n};\nexport var keywords = {\n  module: \"module\",\n  func: \"func\",\n  param: \"param\",\n  result: \"result\",\n  export: \"export\",\n  loop: \"loop\",\n  block: \"block\",\n  if: \"if\",\n  then: \"then\",\n  else: \"else\",\n  call: \"call\",\n  call_indirect: \"call_indirect\",\n  import: \"import\",\n  memory: \"memory\",\n  table: \"table\",\n  global: \"global\",\n  anyfunc: \"anyfunc\",\n  mut: \"mut\",\n  data: \"data\",\n  type: \"type\",\n  elem: \"elem\",\n  start: \"start\",\n  offset: \"offset\"\n};\nvar NUMERIC_SEPARATOR = \"_\";\n/**\n * Build the FSM for number literals\n */\n\nvar numberLiteralFSM = new FSM({\n  START: [makeTransition(/-|\\+/, \"AFTER_SIGN\"), makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  AFTER_SIGN: [makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  DEC_FRAC: [makeTransition(/[0-9]/, \"DEC_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC: [makeTransition(/[0-9]/, \"DEC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"DEC_FRAC\"), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC_SIGNED_EXP: [makeTransition(/\\+|-/, \"DEC_EXP\"), makeTransition(/[0-9]/, \"DEC_EXP\")],\n  DEC_EXP: [makeTransition(/[0-9]/, \"DEC_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  HEX: [makeTransition(/[0-9|A-F|a-f]/, \"HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"HEX_FRAC\"), makeTransition(/p|P/, \"HEX_SIGNED_EXP\")],\n  HEX_FRAC: [makeTransition(/[0-9|A-F|a-f]/, \"HEX_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/p|P|/, \"HEX_SIGNED_EXP\")],\n  HEX_SIGNED_EXP: [makeTransition(/[0-9|+|-]/, \"HEX_EXP\")],\n  HEX_EXP: [makeTransition(/[0-9]/, \"HEX_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  NAN_HEX: [makeTransition(/[0-9|A-F|a-f]/, \"NAN_HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  STOP: []\n}, \"START\", \"STOP\");\nexport function tokenize(input) {\n  var current = 0;\n  var char = input[current]; // Used by SourceLocation\n\n  var column = 1;\n  var line = 1;\n  var tokens = [];\n  /**\n   * Creates a pushToken function for a given type\n   */\n\n  function pushToken(type) {\n    return function (v) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var startColumn = opts.startColumn || column - String(v).length;\n      delete opts.startColumn;\n      var endColumn = opts.endColumn || startColumn + String(v).length - 1;\n      delete opts.endColumn;\n      var start = {\n        line: line,\n        column: startColumn\n      };\n      var end = {\n        line: line,\n        column: endColumn\n      };\n      tokens.push(Token(type, v, start, end, opts));\n    };\n  }\n  /**\n   * Functions to save newly encountered tokens\n   */\n\n\n  var pushCloseParenToken = pushToken(tokenTypes.closeParen);\n  var pushOpenParenToken = pushToken(tokenTypes.openParen);\n  var pushNumberToken = pushToken(tokenTypes.number);\n  var pushValtypeToken = pushToken(tokenTypes.valtype);\n  var pushNameToken = pushToken(tokenTypes.name);\n  var pushIdentifierToken = pushToken(tokenTypes.identifier);\n  var pushKeywordToken = pushToken(tokenTypes.keyword);\n  var pushDotToken = pushToken(tokenTypes.dot);\n  var pushStringToken = pushToken(tokenTypes.string);\n  var pushCommentToken = pushToken(tokenTypes.comment);\n  var pushEqualToken = pushToken(tokenTypes.equal);\n  /**\n   * Can be used to look at the next character(s).\n   *\n   * The default behavior `lookahead()` simply returns the next character without consuming it.\n   * Letters are always returned in lowercase.\n   *\n   * @param {number} length How many characters to query. Default = 1\n   * @param {number} offset How many characters to skip forward from current one. Default = 1\n   *\n   */\n\n  function lookahead() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return input.substring(current + offset, current + offset + length).toLowerCase();\n  }\n  /**\n   * Advances the cursor in the input by a certain amount\n   *\n   * @param {number} amount How many characters to consume. Default = 1\n   */\n\n\n  function eatCharacter() {\n    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    column += amount;\n    current += amount;\n    char = input[current];\n  }\n\n  while (current < input.length) {\n    // ;;\n    if (char === \";\" && lookahead() === \";\") {\n      var startColumn = column;\n      eatCharacter(2);\n      var text = \"\";\n\n      while (!isNewLine(char)) {\n        text += char;\n        eatCharacter();\n\n        if (char === undefined) {\n          break;\n        }\n      }\n\n      var endColumn = column;\n      pushCommentToken(text, {\n        type: \"leading\",\n        startColumn: startColumn,\n        endColumn: endColumn\n      });\n      continue;\n    } // (;\n\n\n    if (char === \"(\" && lookahead() === \";\") {\n      var _startColumn = column;\n      eatCharacter(2);\n      var _text = \"\"; // ;)\n\n      while (true) {\n        char = input[current];\n\n        if (char === \";\" && lookahead() === \")\") {\n          eatCharacter(2);\n          break;\n        }\n\n        _text += char;\n        eatCharacter();\n\n        if (isNewLine(char)) {\n          line++;\n          column = 0;\n        }\n      }\n\n      var _endColumn = column;\n      pushCommentToken(_text, {\n        type: \"block\",\n        startColumn: _startColumn,\n        endColumn: _endColumn\n      });\n      continue;\n    }\n\n    if (char === \"(\") {\n      pushOpenParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"=\") {\n      pushEqualToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \")\") {\n      pushCloseParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (isNewLine(char)) {\n      line++;\n      eatCharacter();\n      column = 0;\n      continue;\n    }\n\n    if (WHITESPACE.test(char)) {\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"$\") {\n      var _startColumn2 = column;\n      eatCharacter();\n      var value = \"\";\n\n      while (idchar.test(char)) {\n        value += char;\n        eatCharacter();\n      }\n\n      var _endColumn2 = column;\n      pushIdentifierToken(value, {\n        startColumn: _startColumn2,\n        endColumn: _endColumn2\n      });\n      continue;\n    }\n\n    if (NUMBERS.test(char) || NUMBER_KEYWORDS.test(lookahead(3, 0)) || char === \"-\" || char === \"+\") {\n      var _startColumn3 = column;\n\n      var _value = numberLiteralFSM.run(input.slice(current));\n\n      if (_value === \"\") {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      pushNumberToken(_value, {\n        startColumn: _startColumn3\n      });\n      eatCharacter(_value.length);\n\n      if (char && !PARENS.test(char) && !WHITESPACE.test(char)) {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      continue;\n    }\n\n    if (char === '\"') {\n      var _startColumn4 = column;\n      var _value2 = \"\";\n      eatCharacter(); // \"\n\n      while (char !== '\"') {\n        if (isNewLine(char)) {\n          throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n        }\n\n        _value2 += char;\n        eatCharacter(); // char\n      }\n\n      eatCharacter(); // \"\n\n      var _endColumn3 = column;\n      pushStringToken(_value2, {\n        startColumn: _startColumn4,\n        endColumn: _endColumn3\n      });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var _value3 = \"\";\n      var _startColumn5 = column;\n\n      while (char && LETTERS.test(char)) {\n        _value3 += char;\n        eatCharacter();\n      }\n      /*\n       * Handle MemberAccess\n       */\n\n\n      if (char === \".\") {\n        var dotStartColumn = column;\n\n        if (valtypes.indexOf(_value3) !== -1) {\n          pushValtypeToken(_value3, {\n            startColumn: _startColumn5\n          });\n        } else {\n          pushNameToken(_value3);\n        }\n\n        eatCharacter();\n        _value3 = \"\";\n        var nameStartColumn = column;\n\n        while (LETTERS.test(char)) {\n          _value3 += char;\n          eatCharacter();\n        }\n\n        pushDotToken(\".\", {\n          startColumn: dotStartColumn\n        });\n        pushNameToken(_value3, {\n          startColumn: nameStartColumn\n        });\n        continue;\n      }\n      /*\n       * Handle keywords\n       */\n      // $FlowIgnore\n\n\n      if (typeof keywords[_value3] === \"string\") {\n        pushKeywordToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle types\n       */\n\n\n      if (valtypes.indexOf(_value3) !== -1) {\n        pushValtypeToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle literals\n       */\n\n\n      pushNameToken(_value3, {\n        startColumn: _startColumn5\n      });\n      continue;\n    }\n\n    throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n  }\n\n  return tokens;\n}\nexport var tokens = tokenTypes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}