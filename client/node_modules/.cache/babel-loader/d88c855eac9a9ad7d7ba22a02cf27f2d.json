{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createHash = require(\"./util/createHash\");\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\nclass HashedModuleIdsPlugin {\n  /**\n   * @param {HashedModuleIdsPluginOptions=} options options object\n   */\n  constructor(options) {\n    if (!options) options = {};\n    validateOptions(schema, options, \"Hashed Module Ids Plugin\");\n\n    /** @type {HashedModuleIdsPluginOptions} */\n    this.options = Object.assign({\n      context: null,\n      hashFunction: \"md4\",\n      hashDigest: \"base64\",\n      hashDigestLength: 4\n    }, options);\n  }\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n      const usedIds = new Set();\n      compilation.hooks.beforeModuleIds.tap(\"HashedModuleIdsPlugin\", modules => {\n        for (const module of modules) {\n          if (module.id === null && module.libIdent) {\n            const id = module.libIdent({\n              context: this.options.context || compiler.options.context\n            });\n            const hash = createHash(options.hashFunction);\n            hash.update(id);\n            const hashId = /** @type {string} */hash.digest(options.hashDigest);\n            let len = options.hashDigestLength;\n            while (usedIds.has(hashId.substr(0, len))) len++;\n            module.id = hashId.substr(0, len);\n            usedIds.add(module.id);\n          }\n        }\n      });\n    });\n  }\n}\nmodule.exports = HashedModuleIdsPlugin;","map":{"version":3,"names":["createHash","require","validateOptions","schema","HashedModuleIdsPlugin","constructor","options","Object","assign","context","hashFunction","hashDigest","hashDigestLength","apply","compiler","hooks","compilation","tap","usedIds","Set","beforeModuleIds","modules","module","id","libIdent","hash","update","hashId","digest","len","has","substr","add","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/HashedModuleIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\nclass HashedModuleIdsPlugin {\n\t/**\n\t * @param {HashedModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options) {\n\t\tif (!options) options = {};\n\n\t\tvalidateOptions(schema, options, \"Hashed Module Ids Plugin\");\n\n\t\t/** @type {HashedModuleIdsPluginOptions} */\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tcontext: null,\n\t\t\t\thashFunction: \"md4\",\n\t\t\t\thashDigest: \"base64\",\n\t\t\t\thashDigestLength: 4\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n\t\t\tconst usedIds = new Set();\n\t\t\tcompilation.hooks.beforeModuleIds.tap(\n\t\t\t\t\"HashedModuleIdsPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tif (module.id === null && module.libIdent) {\n\t\t\t\t\t\t\tconst id = module.libIdent({\n\t\t\t\t\t\t\t\tcontext: this.options.context || compiler.options.context\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst hash = createHash(options.hashFunction);\n\t\t\t\t\t\t\thash.update(id);\n\t\t\t\t\t\t\tconst hashId = /** @type {string} */ (hash.digest(\n\t\t\t\t\t\t\t\toptions.hashDigest\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tlet len = options.hashDigestLength;\n\t\t\t\t\t\t\twhile (usedIds.has(hashId.substr(0, len))) len++;\n\t\t\t\t\t\t\tmodule.id = hashId.substr(0, len);\n\t\t\t\t\t\t\tusedIds.add(module.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = HashedModuleIdsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AACZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAE/C,MAAMC,eAAe,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC/C,MAAME,MAAM,GAAGF,OAAO,CAAC,+CAA+C,CAAC;;AAEvE;;AAEA,MAAMG,qBAAqB,CAAC;EAC3B;AACD;AACA;EACCC,WAAWA,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,EAAEA,OAAO,GAAG,CAAC,CAAC;IAE1BJ,eAAe,CAACC,MAAM,EAAEG,OAAO,EAAE,0BAA0B,CAAC;;IAE5D;IACA,IAAI,CAACA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAC3B;MACCC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,QAAQ;MACpBC,gBAAgB,EAAE;IACnB,CAAC,EACDN,OACD,CAAC;EACF;EAEAO,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMR,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5BQ,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAAC,uBAAuB,EAAED,WAAW,IAAI;MACtE,MAAME,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;MACzBH,WAAW,CAACD,KAAK,CAACK,eAAe,CAACH,GAAG,CACpC,uBAAuB,EACvBI,OAAO,IAAI;QACV,KAAK,MAAMC,MAAM,IAAID,OAAO,EAAE;UAC7B,IAAIC,MAAM,CAACC,EAAE,KAAK,IAAI,IAAID,MAAM,CAACE,QAAQ,EAAE;YAC1C,MAAMD,EAAE,GAAGD,MAAM,CAACE,QAAQ,CAAC;cAC1Bf,OAAO,EAAE,IAAI,CAACH,OAAO,CAACG,OAAO,IAAIK,QAAQ,CAACR,OAAO,CAACG;YACnD,CAAC,CAAC;YACF,MAAMgB,IAAI,GAAGzB,UAAU,CAACM,OAAO,CAACI,YAAY,CAAC;YAC7Ce,IAAI,CAACC,MAAM,CAACH,EAAE,CAAC;YACf,MAAMI,MAAM,GAAG,qBAAuBF,IAAI,CAACG,MAAM,CAChDtB,OAAO,CAACK,UACT,CAAE;YACF,IAAIkB,GAAG,GAAGvB,OAAO,CAACM,gBAAgB;YAClC,OAAOM,OAAO,CAACY,GAAG,CAACH,MAAM,CAACI,MAAM,CAAC,CAAC,EAAEF,GAAG,CAAC,CAAC,EAAEA,GAAG,EAAE;YAChDP,MAAM,CAACC,EAAE,GAAGI,MAAM,CAACI,MAAM,CAAC,CAAC,EAAEF,GAAG,CAAC;YACjCX,OAAO,CAACc,GAAG,CAACV,MAAM,CAACC,EAAE,CAAC;UACvB;QACD;MACD,CACD,CAAC;IACF,CAAC,CAAC;EACH;AACD;AAEAD,MAAM,CAACW,OAAO,GAAG7B,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script"}