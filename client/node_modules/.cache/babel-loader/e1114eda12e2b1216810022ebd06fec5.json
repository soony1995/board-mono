{"ast":null,"code":"\"use strict\";\n\nconst errorMessage = (schema, data, message) => ({\n  keyword: \"absolutePath\",\n  params: {\n    absolutePath: data\n  },\n  message: message,\n  parentSchema: schema\n});\nconst getErrorFor = (shouldBeAbsolute, data, schema) => {\n  const message = shouldBeAbsolute ? `The provided value ${JSON.stringify(data)} is not an absolute path!` : `A relative path is expected. However, the provided value ${JSON.stringify(data)} is an absolute path!`;\n  return errorMessage(schema, data, message);\n};\nmodule.exports = ajv => ajv.addKeyword(\"absolutePath\", {\n  errors: true,\n  type: \"string\",\n  compile(expected, schema) {\n    function callback(data) {\n      let passes = true;\n      const isExclamationMarkPresent = data.includes(\"!\");\n      if (isExclamationMarkPresent) {\n        callback.errors = [errorMessage(schema, data, `The provided value ${JSON.stringify(data)} contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.`)];\n        passes = false;\n      }\n      // ?:[A-Za-z]:\\\\ - Windows absolute path\n      // \\\\\\\\ - Windows network absolute path\n      // \\/ - Unix-like OS absolute path\n      const isCorrectAbsolutePath = expected === /^(?:[A-Za-z]:\\\\|\\\\\\\\|\\/)/.test(data);\n      if (!isCorrectAbsolutePath) {\n        callback.errors = [getErrorFor(expected, data, schema)];\n        passes = false;\n      }\n      return passes;\n    }\n    callback.errors = [];\n    return callback;\n  }\n});","map":{"version":3,"names":["errorMessage","schema","data","message","keyword","params","absolutePath","parentSchema","getErrorFor","shouldBeAbsolute","JSON","stringify","module","exports","ajv","addKeyword","errors","type","compile","expected","callback","passes","isExclamationMarkPresent","includes","isCorrectAbsolutePath","test"],"sources":["/home/soon/bulletin-board/node_modules/webpack/schemas/ajv.absolutePath.js"],"sourcesContent":["\"use strict\";\n\nconst errorMessage = (schema, data, message) => ({\n\tkeyword: \"absolutePath\",\n\tparams: { absolutePath: data },\n\tmessage: message,\n\tparentSchema: schema\n});\n\nconst getErrorFor = (shouldBeAbsolute, data, schema) => {\n\tconst message = shouldBeAbsolute\n\t\t? `The provided value ${JSON.stringify(data)} is not an absolute path!`\n\t\t: `A relative path is expected. However, the provided value ${JSON.stringify(\n\t\t\t\tdata\n\t\t  )} is an absolute path!`;\n\n\treturn errorMessage(schema, data, message);\n};\n\nmodule.exports = ajv =>\n\tajv.addKeyword(\"absolutePath\", {\n\t\terrors: true,\n\t\ttype: \"string\",\n\t\tcompile(expected, schema) {\n\t\t\tfunction callback(data) {\n\t\t\t\tlet passes = true;\n\t\t\t\tconst isExclamationMarkPresent = data.includes(\"!\");\n\n\t\t\t\tif (isExclamationMarkPresent) {\n\t\t\t\t\tcallback.errors = [\n\t\t\t\t\t\terrorMessage(\n\t\t\t\t\t\t\tschema,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`The provided value ${JSON.stringify(\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t)} contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.`\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t\t\tpasses = false;\n\t\t\t\t}\n\t\t\t\t// ?:[A-Za-z]:\\\\ - Windows absolute path\n\t\t\t\t// \\\\\\\\ - Windows network absolute path\n\t\t\t\t// \\/ - Unix-like OS absolute path\n\t\t\t\tconst isCorrectAbsolutePath =\n\t\t\t\t\texpected === /^(?:[A-Za-z]:\\\\|\\\\\\\\|\\/)/.test(data);\n\t\t\t\tif (!isCorrectAbsolutePath) {\n\t\t\t\t\tcallback.errors = [getErrorFor(expected, data, schema)];\n\t\t\t\t\tpasses = false;\n\t\t\t\t}\n\n\t\t\t\treturn passes;\n\t\t\t}\n\t\t\tcallback.errors = [];\n\n\t\t\treturn callback;\n\t\t}\n\t});\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,YAAY,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,OAAO,MAAM;EAChDC,OAAO,EAAE,cAAc;EACvBC,MAAM,EAAE;IAAEC,YAAY,EAAEJ;EAAK,CAAC;EAC9BC,OAAO,EAAEA,OAAO;EAChBI,YAAY,EAAEN;AACf,CAAC,CAAC;AAEF,MAAMO,WAAW,GAAGA,CAACC,gBAAgB,EAAEP,IAAI,EAAED,MAAM,KAAK;EACvD,MAAME,OAAO,GAAGM,gBAAgB,GAC7B,sBAAsBC,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC,2BAA2B,GACrE,4DAA4DQ,IAAI,CAACC,SAAS,CAC1ET,IACA,CAAC,uBAAuB;EAE3B,OAAOF,YAAY,CAACC,MAAM,EAAEC,IAAI,EAAEC,OAAO,CAAC;AAC3C,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAGC,GAAG,IACnBA,GAAG,CAACC,UAAU,CAAC,cAAc,EAAE;EAC9BC,MAAM,EAAE,IAAI;EACZC,IAAI,EAAE,QAAQ;EACdC,OAAOA,CAACC,QAAQ,EAAElB,MAAM,EAAE;IACzB,SAASmB,QAAQA,CAAClB,IAAI,EAAE;MACvB,IAAImB,MAAM,GAAG,IAAI;MACjB,MAAMC,wBAAwB,GAAGpB,IAAI,CAACqB,QAAQ,CAAC,GAAG,CAAC;MAEnD,IAAID,wBAAwB,EAAE;QAC7BF,QAAQ,CAACJ,MAAM,GAAG,CACjBhB,YAAY,CACXC,MAAM,EACNC,IAAI,EACJ,sBAAsBQ,IAAI,CAACC,SAAS,CACnCT,IACD,CAAC,8FACF,CAAC,CACD;QACDmB,MAAM,GAAG,KAAK;MACf;MACA;MACA;MACA;MACA,MAAMG,qBAAqB,GAC1BL,QAAQ,KAAK,0BAA0B,CAACM,IAAI,CAACvB,IAAI,CAAC;MACnD,IAAI,CAACsB,qBAAqB,EAAE;QAC3BJ,QAAQ,CAACJ,MAAM,GAAG,CAACR,WAAW,CAACW,QAAQ,EAAEjB,IAAI,EAAED,MAAM,CAAC,CAAC;QACvDoB,MAAM,GAAG,KAAK;MACf;MAEA,OAAOA,MAAM;IACd;IACAD,QAAQ,CAACJ,MAAM,GAAG,EAAE;IAEpB,OAAOI,QAAQ;EAChB;AACD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}