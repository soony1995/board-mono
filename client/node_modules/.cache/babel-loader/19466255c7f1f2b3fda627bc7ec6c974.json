{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\nclass Entrypoint extends ChunkGroup {\n  /**\n   * Creates an instance of Entrypoint.\n   * @param {string} name the name of the entrypoint\n   */\n  constructor(name) {\n    super(name);\n    /** @type {Chunk=} */\n    this.runtimeChunk = undefined;\n  }\n\n  /**\n   * isInitial will always return true for Entrypoint ChunkGroup.\n   * @returns {true} returns true as all entrypoints are initial ChunkGroups\n   */\n  isInitial() {\n    return true;\n  }\n\n  /**\n   * Sets the runtimeChunk for an entrypoint.\n   * @param {Chunk} chunk the chunk being set as the runtime chunk.\n   * @returns {void}\n   */\n  setRuntimeChunk(chunk) {\n    this.runtimeChunk = chunk;\n  }\n\n  /**\n   * Fetches the chunk reference containing the webpack bootstrap code\n   * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n   */\n  getRuntimeChunk() {\n    return this.runtimeChunk || this.chunks[0];\n  }\n\n  /**\n   * @param {Chunk} oldChunk chunk to be replaced\n   * @param {Chunk} newChunk New chunk that will be replaced with\n   * @returns {boolean} returns true if the replacement was successful\n   */\n  replaceChunk(oldChunk, newChunk) {\n    if (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n    return super.replaceChunk(oldChunk, newChunk);\n  }\n}\nmodule.exports = Entrypoint;","map":{"version":3,"names":["ChunkGroup","require","Entrypoint","constructor","name","runtimeChunk","undefined","isInitial","setRuntimeChunk","chunk","getRuntimeChunk","chunks","replaceChunk","oldChunk","newChunk","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/Entrypoint.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\nclass Entrypoint extends ChunkGroup {\n\t/**\n\t * Creates an instance of Entrypoint.\n\t * @param {string} name the name of the entrypoint\n\t */\n\tconstructor(name) {\n\t\tsuper(name);\n\t\t/** @type {Chunk=} */\n\t\tthis.runtimeChunk = undefined;\n\t}\n\n\t/**\n\t * isInitial will always return true for Entrypoint ChunkGroup.\n\t * @returns {true} returns true as all entrypoints are initial ChunkGroups\n\t */\n\tisInitial() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Sets the runtimeChunk for an entrypoint.\n\t * @param {Chunk} chunk the chunk being set as the runtime chunk.\n\t * @returns {void}\n\t */\n\tsetRuntimeChunk(chunk) {\n\t\tthis.runtimeChunk = chunk;\n\t}\n\n\t/**\n\t * Fetches the chunk reference containing the webpack bootstrap code\n\t * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n\t */\n\tgetRuntimeChunk() {\n\t\treturn this.runtimeChunk || this.chunks[0];\n\t}\n\n\t/**\n\t * @param {Chunk} oldChunk chunk to be replaced\n\t * @param {Chunk} newChunk New chunk that will be replaced with\n\t * @returns {boolean} returns true if the replacement was successful\n\t */\n\treplaceChunk(oldChunk, newChunk) {\n\t\tif (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n\t\treturn super.replaceChunk(oldChunk, newChunk);\n\t}\n}\n\nmodule.exports = Entrypoint;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAE1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASF,UAAU,CAAC;EACnC;AACD;AACA;AACA;EACCG,WAAWA,CAACC,IAAI,EAAE;IACjB,KAAK,CAACA,IAAI,CAAC;IACX;IACA,IAAI,CAACC,YAAY,GAAGC,SAAS;EAC9B;;EAEA;AACD;AACA;AACA;EACCC,SAASA,CAAA,EAAG;IACX,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACCC,eAAeA,CAACC,KAAK,EAAE;IACtB,IAAI,CAACJ,YAAY,GAAGI,KAAK;EAC1B;;EAEA;AACD;AACA;AACA;EACCC,eAAeA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACL,YAAY,IAAI,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC;EAC3C;;EAEA;AACD;AACA;AACA;AACA;EACCC,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAChC,IAAI,IAAI,CAACT,YAAY,KAAKQ,QAAQ,EAAE,IAAI,CAACR,YAAY,GAAGS,QAAQ;IAChE,OAAO,KAAK,CAACF,YAAY,CAACC,QAAQ,EAAEC,QAAQ,CAAC;EAC9C;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGd,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script"}