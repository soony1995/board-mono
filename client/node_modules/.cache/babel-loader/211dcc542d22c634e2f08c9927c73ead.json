{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AbstractMethodError = require(\"../AbstractMethodError\");\nconst BULK_SIZE = 1000;\nclass Hash {\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    throw new AbstractMethodError();\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    throw new AbstractMethodError();\n  }\n}\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nclass BulkUpdateDecorator extends Hash {\n  /**\n   * @param {Hash} hash hash\n   */\n  constructor(hash) {\n    super();\n    this.hash = hash;\n    this.buffer = \"\";\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n      this.hash.update(data, inputEncoding);\n    } else {\n      this.buffer += data;\n      if (this.buffer.length > BULK_SIZE) {\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.buffer.length > 0) {\n      this.hash.update(this.buffer);\n    }\n    var digestResult = this.hash.digest(encoding);\n    return typeof digestResult === \"string\" ? digestResult : digestResult.toString();\n  }\n}\n\n/**\n * istanbul ignore next\n */\nclass DebugHash extends Hash {\n  constructor() {\n    super();\n    this.string = \"\";\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (typeof data !== \"string\") data = data.toString(\"utf-8\");\n    this.string += data;\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    return this.string.replace(/[^a-z0-9]+/gi, m => Buffer.from(m).toString(\"hex\"));\n  }\n}\n\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = algorithm => {\n  if (typeof algorithm === \"function\") {\n    return new BulkUpdateDecorator(new algorithm());\n  }\n  switch (algorithm) {\n    // TODO add non-cryptographic algorithm here\n    case \"debug\":\n      return new DebugHash();\n    default:\n      return new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n  }\n};","map":{"version":3,"names":["AbstractMethodError","require","BULK_SIZE","Hash","update","data","inputEncoding","digest","encoding","exports","BulkUpdateDecorator","constructor","hash","buffer","undefined","length","digestResult","toString","DebugHash","string","replace","m","Buffer","from","module","algorithm","createHash"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/util/createHash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AbstractMethodError = require(\"../AbstractMethodError\");\n\nconst BULK_SIZE = 1000;\n\nclass Hash {\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n}\n\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nclass BulkUpdateDecorator extends Hash {\n\t/**\n\t * @param {Hash} hash hash\n\t */\n\tconstructor(hash) {\n\t\tsuper();\n\t\tthis.hash = hash;\n\t\tthis.buffer = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (\n\t\t\tinputEncoding !== undefined ||\n\t\t\ttypeof data !== \"string\" ||\n\t\t\tdata.length > BULK_SIZE\n\t\t) {\n\t\t\tif (this.buffer.length > 0) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t\tthis.hash.update(data, inputEncoding);\n\t\t} else {\n\t\t\tthis.buffer += data;\n\t\t\tif (this.buffer.length > BULK_SIZE) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tif (this.buffer.length > 0) {\n\t\t\tthis.hash.update(this.buffer);\n\t\t}\n\t\tvar digestResult = this.hash.digest(encoding);\n\t\treturn typeof digestResult === \"string\"\n\t\t\t? digestResult\n\t\t\t: digestResult.toString();\n\t}\n}\n\n/**\n * istanbul ignore next\n */\nclass DebugHash extends Hash {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.string = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (typeof data !== \"string\") data = data.toString(\"utf-8\");\n\t\tthis.string += data;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\treturn this.string.replace(/[^a-z0-9]+/gi, m =>\n\t\t\tBuffer.from(m).toString(\"hex\")\n\t\t);\n\t}\n}\n\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = algorithm => {\n\tif (typeof algorithm === \"function\") {\n\t\treturn new BulkUpdateDecorator(new algorithm());\n\t}\n\tswitch (algorithm) {\n\t\t// TODO add non-cryptographic algorithm here\n\t\tcase \"debug\":\n\t\t\treturn new DebugHash();\n\t\tdefault:\n\t\t\treturn new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}