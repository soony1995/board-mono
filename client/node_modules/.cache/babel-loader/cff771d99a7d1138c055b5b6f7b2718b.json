{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderModuleIdsPlugin\").OccurrenceOrderModuleIdsPluginOptions} OccurrenceOrderModuleIdsPluginOptions */\n\nclass OccurrenceOrderModuleIdsPlugin {\n  /**\n   * @param {OccurrenceOrderModuleIdsPluginOptions=} options options object\n   */\n  constructor(options = {}) {\n    validateOptions(schema, options, \"Occurrence Order Module Ids Plugin\");\n    this.options = options;\n  }\n  apply(compiler) {\n    const prioritiseInitial = this.options.prioritiseInitial;\n    compiler.hooks.compilation.tap(\"OccurrenceOrderModuleIdsPlugin\", compilation => {\n      compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderModuleIdsPlugin\", modules => {\n        const occursInInitialChunksMap = new Map();\n        const occursInAllChunksMap = new Map();\n        const initialChunkChunkMap = new Map();\n        const entryCountMap = new Map();\n        for (const m of modules) {\n          let initial = 0;\n          let entry = 0;\n          for (const c of m.chunksIterable) {\n            if (c.canBeInitial()) initial++;\n            if (c.entryModule === m) entry++;\n          }\n          initialChunkChunkMap.set(m, initial);\n          entryCountMap.set(m, entry);\n        }\n        const countOccursInEntry = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n          const count = initialChunkChunkMap.get(r.module);\n          if (!count) {\n            return sum;\n          }\n          return sum + count;\n        };\n        const countOccurs = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n          let factor = 1;\n          if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n            factor = r.dependency.getNumberOfIdOccurrences();\n          }\n          if (factor === 0) {\n            return sum;\n          }\n          return sum + factor * r.module.getNumberOfChunks();\n        };\n        if (prioritiseInitial) {\n          for (const m of modules) {\n            const result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n            occursInInitialChunksMap.set(m, result);\n          }\n        }\n        const originalOrder = new Map();\n        let i = 0;\n        for (const m of modules) {\n          const result = m.reasons.reduce(countOccurs, 0) + m.getNumberOfChunks() + entryCountMap.get(m);\n          occursInAllChunksMap.set(m, result);\n          originalOrder.set(m, i++);\n        }\n        modules.sort((a, b) => {\n          if (prioritiseInitial) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n          const aOccurs = occursInAllChunksMap.get(a);\n          const bOccurs = occursInAllChunksMap.get(b);\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n    });\n  }\n}\nmodule.exports = OccurrenceOrderModuleIdsPlugin;","map":{"version":3,"names":["validateOptions","require","schema","OccurrenceOrderModuleIdsPlugin","constructor","options","apply","compiler","prioritiseInitial","hooks","compilation","tap","optimizeModuleOrder","modules","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","c","chunksIterable","canBeInitial","entryModule","set","countOccursInEntry","sum","r","module","count","get","countOccurs","factor","dependency","getNumberOfIdOccurrences","getNumberOfChunks","result","reasons","reduce","originalOrder","i","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","orgA","orgB","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/optimize/OccurrenceModuleOrderPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderModuleIdsPlugin\").OccurrenceOrderModuleIdsPluginOptions} OccurrenceOrderModuleIdsPluginOptions */\n\nclass OccurrenceOrderModuleIdsPlugin {\n\t/**\n\t * @param {OccurrenceOrderModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidateOptions(schema, options, \"Occurrence Order Module Ids Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"OccurrenceOrderModuleIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeModuleOrder.tap(\n\t\t\t\t\t\"OccurrenceOrderModuleIdsPlugin\",\n\t\t\t\t\tmodules => {\n\t\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tlet initial = 0;\n\t\t\t\t\t\t\tlet entry = 0;\n\t\t\t\t\t\t\tfor (const c of m.chunksIterable) {\n\t\t\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\t\t\tif (c.entryModule === m) entry++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst countOccursInEntry = (sum, r) => {\n\t\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst count = initialChunkChunkMap.get(r.module);\n\t\t\t\t\t\t\tif (!count) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn sum + count;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst countOccurs = (sum, r) => {\n\t\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet factor = 1;\n\t\t\t\t\t\t\tif (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n\t\t\t\t\t\t\t\tfactor = r.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (factor === 0) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn sum + factor * r.module.getNumberOfChunks();\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\t\tm.reasons.reduce(countOccursInEntry, 0) +\n\t\t\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst originalOrder = new Map();\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tm.reasons.reduce(countOccurs, 0) +\n\t\t\t\t\t\t\t\tm.getNumberOfChunks() +\n\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t\t\t\toriginalOrder.set(m, i++);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodules.sort((a, b) => {\n\t\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = OccurrenceOrderModuleIdsPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}