{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\nconst ParserHelpers = require(\"../ParserHelpers\");\nconst nodeLibsBrowser = require(\"node-libs-browser\");\nmodule.exports = class NodeSourcePlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    const options = this.options;\n    if (options === false) {\n      // allow single kill switch to turn off this plugin\n      return;\n    }\n    const getPathToModule = (module, type) => {\n      if (type === true || type === undefined && nodeLibsBrowser[module]) {\n        if (!nodeLibsBrowser[module]) {\n          throw new Error(`No browser version for node.js core module ${module} available`);\n        }\n        return nodeLibsBrowser[module];\n      } else if (type === \"mock\") {\n        return require.resolve(`node-libs-browser/mock/${module}`);\n      } else if (type === \"empty\") {\n        return require.resolve(\"node-libs-browser/mock/empty\");\n      } else {\n        return module;\n      }\n    };\n    const addExpression = (parser, name, module, type, suffix) => {\n      suffix = suffix || \"\";\n      parser.hooks.expression.for(name).tap(\"NodeSourcePlugin\", () => {\n        if (parser.state.module && parser.state.module.resource === getPathToModule(module, type)) return;\n        const mockModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, getPathToModule(module, type));\n        return ParserHelpers.addParsedVariableToModule(parser, name, mockModule + suffix);\n      });\n    };\n    compiler.hooks.compilation.tap(\"NodeSourcePlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.node === false) return;\n        let localOptions = options;\n        if (parserOptions.node) {\n          localOptions = Object.assign({}, localOptions, parserOptions.node);\n        }\n        if (localOptions.global) {\n          parser.hooks.expression.for(\"global\").tap(\"NodeSourcePlugin\", () => {\n            const retrieveGlobalModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, require.resolve(\"../../buildin/global\"));\n            return ParserHelpers.addParsedVariableToModule(parser, \"global\", retrieveGlobalModule);\n          });\n        }\n        if (localOptions.process) {\n          const processType = localOptions.process;\n          addExpression(parser, \"process\", \"process\", processType);\n        }\n        if (localOptions.console) {\n          const consoleType = localOptions.console;\n          addExpression(parser, \"console\", \"console\", consoleType);\n        }\n        const bufferType = localOptions.Buffer;\n        if (bufferType) {\n          addExpression(parser, \"Buffer\", \"buffer\", bufferType, \".Buffer\");\n        }\n        if (localOptions.setImmediate) {\n          const setImmediateType = localOptions.setImmediate;\n          addExpression(parser, \"setImmediate\", \"timers\", setImmediateType, \".setImmediate\");\n          addExpression(parser, \"clearImmediate\", \"timers\", setImmediateType, \".clearImmediate\");\n        }\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"NodeSourcePlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"NodeSourcePlugin\", handler);\n    });\n    compiler.hooks.afterResolvers.tap(\"NodeSourcePlugin\", compiler => {\n      for (const lib of Object.keys(nodeLibsBrowser)) {\n        if (options[lib] !== false) {\n          compiler.resolverFactory.hooks.resolver.for(\"normal\").tap(\"NodeSourcePlugin\", resolver => {\n            new AliasPlugin(\"described-resolve\", {\n              name: lib,\n              onlyModule: true,\n              alias: getPathToModule(lib, options[lib])\n            }, \"resolve\").apply(resolver);\n          });\n        }\n      }\n    });\n  }\n};","map":{"version":3,"names":["AliasPlugin","require","ParserHelpers","nodeLibsBrowser","module","exports","NodeSourcePlugin","constructor","options","apply","compiler","getPathToModule","type","undefined","Error","resolve","addExpression","parser","name","suffix","hooks","expression","for","tap","state","resource","mockModule","requireFileAsExpression","context","addParsedVariableToModule","compilation","normalModuleFactory","handler","parserOptions","node","localOptions","Object","assign","global","retrieveGlobalModule","process","processType","console","consoleType","bufferType","Buffer","setImmediate","setImmediateType","afterResolvers","lib","keys","resolverFactory","resolver","onlyModule","alias"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/node/NodeSourcePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\nconst ParserHelpers = require(\"../ParserHelpers\");\nconst nodeLibsBrowser = require(\"node-libs-browser\");\n\nmodule.exports = class NodeSourcePlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tif (options === false) {\n\t\t\t// allow single kill switch to turn off this plugin\n\t\t\treturn;\n\t\t}\n\n\t\tconst getPathToModule = (module, type) => {\n\t\t\tif (type === true || (type === undefined && nodeLibsBrowser[module])) {\n\t\t\t\tif (!nodeLibsBrowser[module]) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`No browser version for node.js core module ${module} available`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn nodeLibsBrowser[module];\n\t\t\t} else if (type === \"mock\") {\n\t\t\t\treturn require.resolve(`node-libs-browser/mock/${module}`);\n\t\t\t} else if (type === \"empty\") {\n\t\t\t\treturn require.resolve(\"node-libs-browser/mock/empty\");\n\t\t\t} else {\n\t\t\t\treturn module;\n\t\t\t}\n\t\t};\n\n\t\tconst addExpression = (parser, name, module, type, suffix) => {\n\t\t\tsuffix = suffix || \"\";\n\t\t\tparser.hooks.expression.for(name).tap(\"NodeSourcePlugin\", () => {\n\t\t\t\tif (\n\t\t\t\t\tparser.state.module &&\n\t\t\t\t\tparser.state.module.resource === getPathToModule(module, type)\n\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tconst mockModule = ParserHelpers.requireFileAsExpression(\n\t\t\t\t\tparser.state.module.context,\n\t\t\t\t\tgetPathToModule(module, type)\n\t\t\t\t);\n\t\t\t\treturn ParserHelpers.addParsedVariableToModule(\n\t\t\t\t\tparser,\n\t\t\t\t\tname,\n\t\t\t\t\tmockModule + suffix\n\t\t\t\t);\n\t\t\t});\n\t\t};\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"NodeSourcePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.node === false) return;\n\n\t\t\t\t\tlet localOptions = options;\n\t\t\t\t\tif (parserOptions.node) {\n\t\t\t\t\t\tlocalOptions = Object.assign({}, localOptions, parserOptions.node);\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.global) {\n\t\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t\t.for(\"global\")\n\t\t\t\t\t\t\t.tap(\"NodeSourcePlugin\", () => {\n\t\t\t\t\t\t\t\tconst retrieveGlobalModule = ParserHelpers.requireFileAsExpression(\n\t\t\t\t\t\t\t\t\tparser.state.module.context,\n\t\t\t\t\t\t\t\t\trequire.resolve(\"../../buildin/global\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn ParserHelpers.addParsedVariableToModule(\n\t\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\t\t\"global\",\n\t\t\t\t\t\t\t\t\tretrieveGlobalModule\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.process) {\n\t\t\t\t\t\tconst processType = localOptions.process;\n\t\t\t\t\t\taddExpression(parser, \"process\", \"process\", processType);\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.console) {\n\t\t\t\t\t\tconst consoleType = localOptions.console;\n\t\t\t\t\t\taddExpression(parser, \"console\", \"console\", consoleType);\n\t\t\t\t\t}\n\t\t\t\t\tconst bufferType = localOptions.Buffer;\n\t\t\t\t\tif (bufferType) {\n\t\t\t\t\t\taddExpression(parser, \"Buffer\", \"buffer\", bufferType, \".Buffer\");\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.setImmediate) {\n\t\t\t\t\t\tconst setImmediateType = localOptions.setImmediate;\n\t\t\t\t\t\taddExpression(\n\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\"setImmediate\",\n\t\t\t\t\t\t\t\"timers\",\n\t\t\t\t\t\t\tsetImmediateType,\n\t\t\t\t\t\t\t\".setImmediate\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\taddExpression(\n\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\"clearImmediate\",\n\t\t\t\t\t\t\t\"timers\",\n\t\t\t\t\t\t\tsetImmediateType,\n\t\t\t\t\t\t\t\".clearImmediate\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"NodeSourcePlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"NodeSourcePlugin\", handler);\n\t\t\t}\n\t\t);\n\t\tcompiler.hooks.afterResolvers.tap(\"NodeSourcePlugin\", compiler => {\n\t\t\tfor (const lib of Object.keys(nodeLibsBrowser)) {\n\t\t\t\tif (options[lib] !== false) {\n\t\t\t\t\tcompiler.resolverFactory.hooks.resolver\n\t\t\t\t\t\t.for(\"normal\")\n\t\t\t\t\t\t.tap(\"NodeSourcePlugin\", resolver => {\n\t\t\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: lib,\n\t\t\t\t\t\t\t\t\tonlyModule: true,\n\t\t\t\t\t\t\t\t\talias: getPathToModule(lib, options[lib])\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t\t\t).apply(resolver);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}