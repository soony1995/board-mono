{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource,\n  RawSource\n} = require(\"webpack-sources\");\nconst stringifySafe = data => {\n  const stringified = JSON.stringify(data);\n  if (!stringified) {\n    return undefined; // Invalid JSON\n  }\n  return stringified.replace(/\\u2028|\\u2029/g, str => str === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\"); // invalid in JavaScript but valid JSON\n};\nclass JsonGenerator {\n  generate(module, dependencyTemplates, runtimeTemplate) {\n    const source = new ConcatSource();\n    const data = module.buildInfo.jsonData;\n    if (data === undefined) {\n      return new RawSource(runtimeTemplate.missingModuleStatement({\n        request: module.rawRequest\n      }));\n    }\n    let finalJson;\n    if (Array.isArray(module.buildMeta.providedExports) && !module.isUsed(\"default\")) {\n      // Only some exports are used: We can optimize here, by only generating a part of the JSON\n      const reducedJson = {};\n      for (const exportName of module.buildMeta.providedExports) {\n        if (exportName === \"default\") continue;\n        const used = module.isUsed(exportName);\n        if (used) {\n          reducedJson[used] = data[exportName];\n        }\n      }\n      finalJson = reducedJson;\n    } else {\n      finalJson = data;\n    }\n    // Use JSON because JSON.parse() is much faster than JavaScript evaluation\n    const jsonSource = JSON.stringify(stringifySafe(finalJson));\n    const jsonExpr = `JSON.parse(${jsonSource})`;\n    source.add(`${module.moduleArgument}.exports = ${jsonExpr};`);\n    return source;\n  }\n}\nmodule.exports = JsonGenerator;","map":{"version":3,"names":["ConcatSource","RawSource","require","stringifySafe","data","stringified","JSON","stringify","undefined","replace","str","JsonGenerator","generate","module","dependencyTemplates","runtimeTemplate","source","buildInfo","jsonData","missingModuleStatement","request","rawRequest","finalJson","Array","isArray","buildMeta","providedExports","isUsed","reducedJson","exportName","used","jsonSource","jsonExpr","add","moduleArgument","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/JsonGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource, RawSource } = require(\"webpack-sources\");\n\nconst stringifySafe = data => {\n\tconst stringified = JSON.stringify(data);\n\tif (!stringified) {\n\t\treturn undefined; // Invalid JSON\n\t}\n\n\treturn stringified.replace(/\\u2028|\\u2029/g, str =>\n\t\tstr === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\"\n\t); // invalid in JavaScript but valid JSON\n};\n\nclass JsonGenerator {\n\tgenerate(module, dependencyTemplates, runtimeTemplate) {\n\t\tconst source = new ConcatSource();\n\t\tconst data = module.buildInfo.jsonData;\n\t\tif (data === undefined) {\n\t\t\treturn new RawSource(\n\t\t\t\truntimeTemplate.missingModuleStatement({\n\t\t\t\t\trequest: module.rawRequest\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tlet finalJson;\n\t\tif (\n\t\t\tArray.isArray(module.buildMeta.providedExports) &&\n\t\t\t!module.isUsed(\"default\")\n\t\t) {\n\t\t\t// Only some exports are used: We can optimize here, by only generating a part of the JSON\n\t\t\tconst reducedJson = {};\n\t\t\tfor (const exportName of module.buildMeta.providedExports) {\n\t\t\t\tif (exportName === \"default\") continue;\n\t\t\t\tconst used = module.isUsed(exportName);\n\t\t\t\tif (used) {\n\t\t\t\t\treducedJson[used] = data[exportName];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinalJson = reducedJson;\n\t\t} else {\n\t\t\tfinalJson = data;\n\t\t}\n\t\t// Use JSON because JSON.parse() is much faster than JavaScript evaluation\n\t\tconst jsonSource = JSON.stringify(stringifySafe(finalJson));\n\t\tconst jsonExpr = `JSON.parse(${jsonSource})`;\n\t\tsource.add(`${module.moduleArgument}.exports = ${jsonExpr};`);\n\t\treturn source;\n\t}\n}\n\nmodule.exports = JsonGenerator;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAM;EAAEA,YAAY;EAAEC;AAAU,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE9D,MAAMC,aAAa,GAAGC,IAAI,IAAI;EAC7B,MAAMC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;EACxC,IAAI,CAACC,WAAW,EAAE;IACjB,OAAOG,SAAS,CAAC,CAAC;EACnB;EAEA,OAAOH,WAAW,CAACI,OAAO,CAAC,gBAAgB,EAAEC,GAAG,IAC/CA,GAAG,KAAK,QAAQ,GAAG,SAAS,GAAG,SAChC,CAAC,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,aAAa,CAAC;EACnBC,QAAQA,CAACC,MAAM,EAAEC,mBAAmB,EAAEC,eAAe,EAAE;IACtD,MAAMC,MAAM,GAAG,IAAIhB,YAAY,CAAC,CAAC;IACjC,MAAMI,IAAI,GAAGS,MAAM,CAACI,SAAS,CAACC,QAAQ;IACtC,IAAId,IAAI,KAAKI,SAAS,EAAE;MACvB,OAAO,IAAIP,SAAS,CACnBc,eAAe,CAACI,sBAAsB,CAAC;QACtCC,OAAO,EAAEP,MAAM,CAACQ;MACjB,CAAC,CACF,CAAC;IACF;IACA,IAAIC,SAAS;IACb,IACCC,KAAK,CAACC,OAAO,CAACX,MAAM,CAACY,SAAS,CAACC,eAAe,CAAC,IAC/C,CAACb,MAAM,CAACc,MAAM,CAAC,SAAS,CAAC,EACxB;MACD;MACA,MAAMC,WAAW,GAAG,CAAC,CAAC;MACtB,KAAK,MAAMC,UAAU,IAAIhB,MAAM,CAACY,SAAS,CAACC,eAAe,EAAE;QAC1D,IAAIG,UAAU,KAAK,SAAS,EAAE;QAC9B,MAAMC,IAAI,GAAGjB,MAAM,CAACc,MAAM,CAACE,UAAU,CAAC;QACtC,IAAIC,IAAI,EAAE;UACTF,WAAW,CAACE,IAAI,CAAC,GAAG1B,IAAI,CAACyB,UAAU,CAAC;QACrC;MACD;MACAP,SAAS,GAAGM,WAAW;IACxB,CAAC,MAAM;MACNN,SAAS,GAAGlB,IAAI;IACjB;IACA;IACA,MAAM2B,UAAU,GAAGzB,IAAI,CAACC,SAAS,CAACJ,aAAa,CAACmB,SAAS,CAAC,CAAC;IAC3D,MAAMU,QAAQ,GAAG,cAAcD,UAAU,GAAG;IAC5Cf,MAAM,CAACiB,GAAG,CAAC,GAAGpB,MAAM,CAACqB,cAAc,cAAcF,QAAQ,GAAG,CAAC;IAC7D,OAAOhB,MAAM;EACd;AACD;AAEAH,MAAM,CAACsB,OAAO,GAAGxB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script"}