{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\nconst LocalModulesHelpers = require(\"./LocalModulesHelpers\");\nconst isBoundFunctionExpression = expr => {\n  if (expr.type !== \"CallExpression\") return false;\n  if (expr.callee.type !== \"MemberExpression\") return false;\n  if (expr.callee.computed) return false;\n  if (expr.callee.object.type !== \"FunctionExpression\") return false;\n  if (expr.callee.property.type !== \"Identifier\") return false;\n  if (expr.callee.property.name !== \"bind\") return false;\n  return true;\n};\nconst isUnboundFunctionExpression = expr => {\n  if (expr.type === \"FunctionExpression\") return true;\n  if (expr.type === \"ArrowFunctionExpression\") return true;\n  return false;\n};\nconst isCallable = expr => {\n  if (isUnboundFunctionExpression(expr)) return true;\n  if (isBoundFunctionExpression(expr)) return true;\n  return false;\n};\nclass AMDDefineDependencyParserPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(parser) {\n    parser.hooks.call.for(\"define\").tap(\"AMDDefineDependencyParserPlugin\", this.processCallDefine.bind(this, parser));\n  }\n  processArray(parser, expr, param, identifiers, namedModule) {\n    if (param.isArray()) {\n      param.items.forEach((param, idx) => {\n        if (param.isString() && [\"require\", \"module\", \"exports\"].includes(param.string)) identifiers[idx] = param.string;\n        const result = this.processItem(parser, expr, param, namedModule);\n        if (result === undefined) {\n          this.processContext(parser, expr, param);\n        }\n      });\n      return true;\n    } else if (param.isConstArray()) {\n      const deps = [];\n      param.array.forEach((request, idx) => {\n        let dep;\n        let localModule;\n        if (request === \"require\") {\n          identifiers[idx] = request;\n          dep = \"__webpack_require__\";\n        } else if ([\"exports\", \"module\"].includes(request)) {\n          identifiers[idx] = request;\n          dep = request;\n        } else if (localModule = LocalModulesHelpers.getLocalModule(parser.state, request)) {\n          dep = new LocalModuleDependency(localModule, undefined, false);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n        } else {\n          dep = this.newRequireItemDependency(request);\n          dep.loc = expr.loc;\n          dep.optional = !!parser.scope.inTry;\n          parser.state.current.addDependency(dep);\n        }\n        deps.push(dep);\n      });\n      const dep = this.newRequireArrayDependency(deps, param.range);\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    }\n  }\n  processItem(parser, expr, param, namedModule) {\n    if (param.isConditional()) {\n      param.options.forEach(param => {\n        const result = this.processItem(parser, expr, param);\n        if (result === undefined) {\n          this.processContext(parser, expr, param);\n        }\n      });\n      return true;\n    } else if (param.isString()) {\n      let dep, localModule;\n      if (param.string === \"require\") {\n        dep = new ConstDependency(\"__webpack_require__\", param.range);\n      } else if ([\"require\", \"exports\", \"module\"].includes(param.string)) {\n        dep = new ConstDependency(param.string, param.range);\n      } else if (localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string, namedModule)) {\n        dep = new LocalModuleDependency(localModule, param.range, false);\n      } else {\n        dep = this.newRequireItemDependency(param.string, param.range);\n      }\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    }\n  }\n  processContext(parser, expr, param) {\n    const dep = ContextDependencyHelpers.create(AMDRequireContextDependency, param.range, param, expr, this.options, {}, parser);\n    if (!dep) return;\n    dep.loc = expr.loc;\n    dep.optional = !!parser.scope.inTry;\n    parser.state.current.addDependency(dep);\n    return true;\n  }\n  processCallDefine(parser, expr) {\n    let array, fn, obj, namedModule;\n    switch (expr.arguments.length) {\n      case 1:\n        if (isCallable(expr.arguments[0])) {\n          // define(f() {…})\n          fn = expr.arguments[0];\n        } else if (expr.arguments[0].type === \"ObjectExpression\") {\n          // define({…})\n          obj = expr.arguments[0];\n        } else {\n          // define(expr)\n          // unclear if function or object\n          obj = fn = expr.arguments[0];\n        }\n        break;\n      case 2:\n        if (expr.arguments[0].type === \"Literal\") {\n          namedModule = expr.arguments[0].value;\n          // define(\"…\", …)\n          if (isCallable(expr.arguments[1])) {\n            // define(\"…\", f() {…})\n            fn = expr.arguments[1];\n          } else if (expr.arguments[1].type === \"ObjectExpression\") {\n            // define(\"…\", {…})\n            obj = expr.arguments[1];\n          } else {\n            // define(\"…\", expr)\n            // unclear if function or object\n            obj = fn = expr.arguments[1];\n          }\n        } else {\n          array = expr.arguments[0];\n          if (isCallable(expr.arguments[1])) {\n            // define([…], f() {})\n            fn = expr.arguments[1];\n          } else if (expr.arguments[1].type === \"ObjectExpression\") {\n            // define([…], {…})\n            obj = expr.arguments[1];\n          } else {\n            // define([…], expr)\n            // unclear if function or object\n            obj = fn = expr.arguments[1];\n          }\n        }\n        break;\n      case 3:\n        // define(\"…\", […], f() {…})\n        namedModule = expr.arguments[0].value;\n        array = expr.arguments[1];\n        if (isCallable(expr.arguments[2])) {\n          // define(\"…\", […], f() {})\n          fn = expr.arguments[2];\n        } else if (expr.arguments[2].type === \"ObjectExpression\") {\n          // define(\"…\", […], {…})\n          obj = expr.arguments[2];\n        } else {\n          // define(\"…\", […], expr)\n          // unclear if function or object\n          obj = fn = expr.arguments[2];\n        }\n        break;\n      default:\n        return;\n    }\n    let fnParams = null;\n    let fnParamsOffset = 0;\n    if (fn) {\n      if (isUnboundFunctionExpression(fn)) {\n        fnParams = fn.params;\n      } else if (isBoundFunctionExpression(fn)) {\n        fnParams = fn.callee.object.params;\n        fnParamsOffset = fn.arguments.length - 1;\n        if (fnParamsOffset < 0) {\n          fnParamsOffset = 0;\n        }\n      }\n    }\n    let fnRenames = parser.scope.renames.createChild();\n    if (array) {\n      const identifiers = {};\n      const param = parser.evaluateExpression(array);\n      const result = this.processArray(parser, expr, param, identifiers, namedModule);\n      if (!result) return;\n      if (fnParams) {\n        fnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n          if (identifiers[idx]) {\n            fnRenames.set(param.name, identifiers[idx]);\n            return false;\n          }\n          return true;\n        });\n      }\n    } else {\n      const identifiers = [\"require\", \"exports\", \"module\"];\n      if (fnParams) {\n        fnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n          if (identifiers[idx]) {\n            fnRenames.set(param.name, identifiers[idx]);\n            return false;\n          }\n          return true;\n        });\n      }\n    }\n    let inTry;\n    if (fn && isUnboundFunctionExpression(fn)) {\n      inTry = parser.scope.inTry;\n      parser.inScope(fnParams, () => {\n        parser.scope.renames = fnRenames;\n        parser.scope.inTry = inTry;\n        if (fn.body.type === \"BlockStatement\") {\n          parser.walkStatement(fn.body);\n        } else {\n          parser.walkExpression(fn.body);\n        }\n      });\n    } else if (fn && isBoundFunctionExpression(fn)) {\n      inTry = parser.scope.inTry;\n      parser.inScope(fn.callee.object.params.filter(i => ![\"require\", \"module\", \"exports\"].includes(i.name)), () => {\n        parser.scope.renames = fnRenames;\n        parser.scope.inTry = inTry;\n        if (fn.callee.object.body.type === \"BlockStatement\") {\n          parser.walkStatement(fn.callee.object.body);\n        } else {\n          parser.walkExpression(fn.callee.object.body);\n        }\n      });\n      if (fn.arguments) {\n        parser.walkExpressions(fn.arguments);\n      }\n    } else if (fn || obj) {\n      parser.walkExpression(fn || obj);\n    }\n    const dep = this.newDefineDependency(expr.range, array ? array.range : null, fn ? fn.range : null, obj ? obj.range : null, namedModule ? namedModule : null);\n    dep.loc = expr.loc;\n    if (namedModule) {\n      dep.localModule = LocalModulesHelpers.addLocalModule(parser.state, namedModule);\n    }\n    parser.state.current.addDependency(dep);\n    return true;\n  }\n  newDefineDependency(range, arrayRange, functionRange, objectRange, namedModule) {\n    return new AMDDefineDependency(range, arrayRange, functionRange, objectRange, namedModule);\n  }\n  newRequireArrayDependency(depsArray, range) {\n    return new AMDRequireArrayDependency(depsArray, range);\n  }\n  newRequireItemDependency(request, range) {\n    return new AMDRequireItemDependency(request, range);\n  }\n}\nmodule.exports = AMDDefineDependencyParserPlugin;","map":{"version":3,"names":["AMDRequireItemDependency","require","AMDRequireContextDependency","ConstDependency","AMDDefineDependency","AMDRequireArrayDependency","LocalModuleDependency","ContextDependencyHelpers","LocalModulesHelpers","isBoundFunctionExpression","expr","type","callee","computed","object","property","name","isUnboundFunctionExpression","isCallable","AMDDefineDependencyParserPlugin","constructor","options","apply","parser","hooks","call","for","tap","processCallDefine","bind","processArray","param","identifiers","namedModule","isArray","items","forEach","idx","isString","includes","string","result","processItem","undefined","processContext","isConstArray","deps","array","request","dep","localModule","getLocalModule","state","loc","current","addDependency","newRequireItemDependency","optional","scope","inTry","push","newRequireArrayDependency","range","isConditional","create","fn","obj","arguments","length","value","fnParams","fnParamsOffset","params","fnRenames","renames","createChild","evaluateExpression","slice","filter","set","inScope","body","walkStatement","walkExpression","i","walkExpressions","newDefineDependency","addLocalModule","arrayRange","functionRange","objectRange","depsArray","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/dependencies/AMDDefineDependencyParserPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\nconst LocalModulesHelpers = require(\"./LocalModulesHelpers\");\n\nconst isBoundFunctionExpression = expr => {\n\tif (expr.type !== \"CallExpression\") return false;\n\tif (expr.callee.type !== \"MemberExpression\") return false;\n\tif (expr.callee.computed) return false;\n\tif (expr.callee.object.type !== \"FunctionExpression\") return false;\n\tif (expr.callee.property.type !== \"Identifier\") return false;\n\tif (expr.callee.property.name !== \"bind\") return false;\n\treturn true;\n};\n\nconst isUnboundFunctionExpression = expr => {\n\tif (expr.type === \"FunctionExpression\") return true;\n\tif (expr.type === \"ArrowFunctionExpression\") return true;\n\treturn false;\n};\n\nconst isCallable = expr => {\n\tif (isUnboundFunctionExpression(expr)) return true;\n\tif (isBoundFunctionExpression(expr)) return true;\n\treturn false;\n};\n\nclass AMDDefineDependencyParserPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"define\")\n\t\t\t.tap(\n\t\t\t\t\"AMDDefineDependencyParserPlugin\",\n\t\t\t\tthis.processCallDefine.bind(this, parser)\n\t\t\t);\n\t}\n\n\tprocessArray(parser, expr, param, identifiers, namedModule) {\n\t\tif (param.isArray()) {\n\t\t\tparam.items.forEach((param, idx) => {\n\t\t\t\tif (\n\t\t\t\t\tparam.isString() &&\n\t\t\t\t\t[\"require\", \"module\", \"exports\"].includes(param.string)\n\t\t\t\t)\n\t\t\t\t\tidentifiers[idx] = param.string;\n\t\t\t\tconst result = this.processItem(parser, expr, param, namedModule);\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tthis.processContext(parser, expr, param);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (param.isConstArray()) {\n\t\t\tconst deps = [];\n\t\t\tparam.array.forEach((request, idx) => {\n\t\t\t\tlet dep;\n\t\t\t\tlet localModule;\n\t\t\t\tif (request === \"require\") {\n\t\t\t\t\tidentifiers[idx] = request;\n\t\t\t\t\tdep = \"__webpack_require__\";\n\t\t\t\t} else if ([\"exports\", \"module\"].includes(request)) {\n\t\t\t\t\tidentifiers[idx] = request;\n\t\t\t\t\tdep = request;\n\t\t\t\t} else if (\n\t\t\t\t\t(localModule = LocalModulesHelpers.getLocalModule(\n\t\t\t\t\t\tparser.state,\n\t\t\t\t\t\trequest\n\t\t\t\t\t))\n\t\t\t\t) {\n\t\t\t\t\tdep = new LocalModuleDependency(localModule, undefined, false);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t} else {\n\t\t\t\t\tdep = this.newRequireItemDependency(request);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t}\n\t\t\t\tdeps.push(dep);\n\t\t\t});\n\t\t\tconst dep = this.newRequireArrayDependency(deps, param.range);\n\t\t\tdep.loc = expr.loc;\n\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\tparser.state.current.addDependency(dep);\n\t\t\treturn true;\n\t\t}\n\t}\n\tprocessItem(parser, expr, param, namedModule) {\n\t\tif (param.isConditional()) {\n\t\t\tparam.options.forEach(param => {\n\t\t\t\tconst result = this.processItem(parser, expr, param);\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tthis.processContext(parser, expr, param);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (param.isString()) {\n\t\t\tlet dep, localModule;\n\t\t\tif (param.string === \"require\") {\n\t\t\t\tdep = new ConstDependency(\"__webpack_require__\", param.range);\n\t\t\t} else if ([\"require\", \"exports\", \"module\"].includes(param.string)) {\n\t\t\t\tdep = new ConstDependency(param.string, param.range);\n\t\t\t} else if (\n\t\t\t\t(localModule = LocalModulesHelpers.getLocalModule(\n\t\t\t\t\tparser.state,\n\t\t\t\t\tparam.string,\n\t\t\t\t\tnamedModule\n\t\t\t\t))\n\t\t\t) {\n\t\t\t\tdep = new LocalModuleDependency(localModule, param.range, false);\n\t\t\t} else {\n\t\t\t\tdep = this.newRequireItemDependency(param.string, param.range);\n\t\t\t}\n\t\t\tdep.loc = expr.loc;\n\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\tparser.state.current.addDependency(dep);\n\t\t\treturn true;\n\t\t}\n\t}\n\tprocessContext(parser, expr, param) {\n\t\tconst dep = ContextDependencyHelpers.create(\n\t\t\tAMDRequireContextDependency,\n\t\t\tparam.range,\n\t\t\tparam,\n\t\t\texpr,\n\t\t\tthis.options,\n\t\t\t{},\n\t\t\tparser\n\t\t);\n\t\tif (!dep) return;\n\t\tdep.loc = expr.loc;\n\t\tdep.optional = !!parser.scope.inTry;\n\t\tparser.state.current.addDependency(dep);\n\t\treturn true;\n\t}\n\n\tprocessCallDefine(parser, expr) {\n\t\tlet array, fn, obj, namedModule;\n\t\tswitch (expr.arguments.length) {\n\t\t\tcase 1:\n\t\t\t\tif (isCallable(expr.arguments[0])) {\n\t\t\t\t\t// define(f() {…})\n\t\t\t\t\tfn = expr.arguments[0];\n\t\t\t\t} else if (expr.arguments[0].type === \"ObjectExpression\") {\n\t\t\t\t\t// define({…})\n\t\t\t\t\tobj = expr.arguments[0];\n\t\t\t\t} else {\n\t\t\t\t\t// define(expr)\n\t\t\t\t\t// unclear if function or object\n\t\t\t\t\tobj = fn = expr.arguments[0];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (expr.arguments[0].type === \"Literal\") {\n\t\t\t\t\tnamedModule = expr.arguments[0].value;\n\t\t\t\t\t// define(\"…\", …)\n\t\t\t\t\tif (isCallable(expr.arguments[1])) {\n\t\t\t\t\t\t// define(\"…\", f() {…})\n\t\t\t\t\t\tfn = expr.arguments[1];\n\t\t\t\t\t} else if (expr.arguments[1].type === \"ObjectExpression\") {\n\t\t\t\t\t\t// define(\"…\", {…})\n\t\t\t\t\t\tobj = expr.arguments[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// define(\"…\", expr)\n\t\t\t\t\t\t// unclear if function or object\n\t\t\t\t\t\tobj = fn = expr.arguments[1];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tarray = expr.arguments[0];\n\t\t\t\t\tif (isCallable(expr.arguments[1])) {\n\t\t\t\t\t\t// define([…], f() {})\n\t\t\t\t\t\tfn = expr.arguments[1];\n\t\t\t\t\t} else if (expr.arguments[1].type === \"ObjectExpression\") {\n\t\t\t\t\t\t// define([…], {…})\n\t\t\t\t\t\tobj = expr.arguments[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// define([…], expr)\n\t\t\t\t\t\t// unclear if function or object\n\t\t\t\t\t\tobj = fn = expr.arguments[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t// define(\"…\", […], f() {…})\n\t\t\t\tnamedModule = expr.arguments[0].value;\n\t\t\t\tarray = expr.arguments[1];\n\t\t\t\tif (isCallable(expr.arguments[2])) {\n\t\t\t\t\t// define(\"…\", […], f() {})\n\t\t\t\t\tfn = expr.arguments[2];\n\t\t\t\t} else if (expr.arguments[2].type === \"ObjectExpression\") {\n\t\t\t\t\t// define(\"…\", […], {…})\n\t\t\t\t\tobj = expr.arguments[2];\n\t\t\t\t} else {\n\t\t\t\t\t// define(\"…\", […], expr)\n\t\t\t\t\t// unclear if function or object\n\t\t\t\t\tobj = fn = expr.arguments[2];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t\tlet fnParams = null;\n\t\tlet fnParamsOffset = 0;\n\t\tif (fn) {\n\t\t\tif (isUnboundFunctionExpression(fn)) {\n\t\t\t\tfnParams = fn.params;\n\t\t\t} else if (isBoundFunctionExpression(fn)) {\n\t\t\t\tfnParams = fn.callee.object.params;\n\t\t\t\tfnParamsOffset = fn.arguments.length - 1;\n\t\t\t\tif (fnParamsOffset < 0) {\n\t\t\t\t\tfnParamsOffset = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet fnRenames = parser.scope.renames.createChild();\n\t\tif (array) {\n\t\t\tconst identifiers = {};\n\t\t\tconst param = parser.evaluateExpression(array);\n\t\t\tconst result = this.processArray(\n\t\t\t\tparser,\n\t\t\t\texpr,\n\t\t\t\tparam,\n\t\t\t\tidentifiers,\n\t\t\t\tnamedModule\n\t\t\t);\n\t\t\tif (!result) return;\n\t\t\tif (fnParams) {\n\t\t\t\tfnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n\t\t\t\t\tif (identifiers[idx]) {\n\t\t\t\t\t\tfnRenames.set(param.name, identifiers[idx]);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tconst identifiers = [\"require\", \"exports\", \"module\"];\n\t\t\tif (fnParams) {\n\t\t\t\tfnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n\t\t\t\t\tif (identifiers[idx]) {\n\t\t\t\t\t\tfnRenames.set(param.name, identifiers[idx]);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tlet inTry;\n\t\tif (fn && isUnboundFunctionExpression(fn)) {\n\t\t\tinTry = parser.scope.inTry;\n\t\t\tparser.inScope(fnParams, () => {\n\t\t\t\tparser.scope.renames = fnRenames;\n\t\t\t\tparser.scope.inTry = inTry;\n\t\t\t\tif (fn.body.type === \"BlockStatement\") {\n\t\t\t\t\tparser.walkStatement(fn.body);\n\t\t\t\t} else {\n\t\t\t\t\tparser.walkExpression(fn.body);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (fn && isBoundFunctionExpression(fn)) {\n\t\t\tinTry = parser.scope.inTry;\n\t\t\tparser.inScope(\n\t\t\t\tfn.callee.object.params.filter(\n\t\t\t\t\ti => ![\"require\", \"module\", \"exports\"].includes(i.name)\n\t\t\t\t),\n\t\t\t\t() => {\n\t\t\t\t\tparser.scope.renames = fnRenames;\n\t\t\t\t\tparser.scope.inTry = inTry;\n\t\t\t\t\tif (fn.callee.object.body.type === \"BlockStatement\") {\n\t\t\t\t\t\tparser.walkStatement(fn.callee.object.body);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparser.walkExpression(fn.callee.object.body);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (fn.arguments) {\n\t\t\t\tparser.walkExpressions(fn.arguments);\n\t\t\t}\n\t\t} else if (fn || obj) {\n\t\t\tparser.walkExpression(fn || obj);\n\t\t}\n\n\t\tconst dep = this.newDefineDependency(\n\t\t\texpr.range,\n\t\t\tarray ? array.range : null,\n\t\t\tfn ? fn.range : null,\n\t\t\tobj ? obj.range : null,\n\t\t\tnamedModule ? namedModule : null\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tif (namedModule) {\n\t\t\tdep.localModule = LocalModulesHelpers.addLocalModule(\n\t\t\t\tparser.state,\n\t\t\t\tnamedModule\n\t\t\t);\n\t\t}\n\t\tparser.state.current.addDependency(dep);\n\t\treturn true;\n\t}\n\n\tnewDefineDependency(\n\t\trange,\n\t\tarrayRange,\n\t\tfunctionRange,\n\t\tobjectRange,\n\t\tnamedModule\n\t) {\n\t\treturn new AMDDefineDependency(\n\t\t\trange,\n\t\t\tarrayRange,\n\t\t\tfunctionRange,\n\t\t\tobjectRange,\n\t\t\tnamedModule\n\t\t);\n\t}\n\tnewRequireArrayDependency(depsArray, range) {\n\t\treturn new AMDRequireArrayDependency(depsArray, range);\n\t}\n\tnewRequireItemDependency(request, range) {\n\t\treturn new AMDRequireItemDependency(request, range);\n\t}\n}\nmodule.exports = AMDDefineDependencyParserPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}