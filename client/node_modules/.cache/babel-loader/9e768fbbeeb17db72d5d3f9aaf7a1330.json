{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass MultiEntryPlugin {\n  /**\n   * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n   * @param {string} context context path\n   * @param {string[]} entries array of entry paths\n   * @param {string} name entry key name\n   */\n  constructor(context, entries, name) {\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"MultiEntryPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const multiModuleFactory = new MultiModuleFactory();\n      compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n      compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n    });\n    compiler.hooks.make.tapAsync(\"MultiEntryPlugin\", (compilation, callback) => {\n      const {\n        context,\n        entries,\n        name\n      } = this;\n      const dep = MultiEntryPlugin.createDependency(entries, name);\n      compilation.addEntry(context, dep, name, callback);\n    });\n  }\n\n  /**\n   * @param {string[]} entries each entry path string\n   * @param {string} name name of the entry\n   * @returns {MultiEntryDependency} returns a constructed Dependency\n   */\n  static createDependency(entries, name) {\n    return new MultiEntryDependency(entries.map((e, idx) => {\n      const dep = new SingleEntryDependency(e);\n      // Because entrypoints are not dependencies found in an\n      // existing module, we give it a synthetic id\n      dep.loc = {\n        name,\n        index: idx\n      };\n      return dep;\n    }), name);\n  }\n}\nmodule.exports = MultiEntryPlugin;","map":{"version":3,"names":["MultiEntryDependency","require","SingleEntryDependency","MultiModuleFactory","MultiEntryPlugin","constructor","context","entries","name","apply","compiler","hooks","compilation","tap","normalModuleFactory","multiModuleFactory","dependencyFactories","set","make","tapAsync","callback","dep","createDependency","addEntry","map","e","idx","loc","index","module","exports"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/MultiEntryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass MultiEntryPlugin {\n\t/**\n\t * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n\t * @param {string} context context path\n\t * @param {string[]} entries array of entry paths\n\t * @param {string} name entry key name\n\t */\n\tconstructor(context, entries, name) {\n\t\tthis.context = context;\n\t\tthis.entries = entries;\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst multiModuleFactory = new MultiModuleFactory();\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tMultiEntryDependency,\n\t\t\t\t\tmultiModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst { context, entries, name } = this;\n\n\t\t\t\tconst dep = MultiEntryPlugin.createDependency(entries, name);\n\t\t\t\tcompilation.addEntry(context, dep, name, callback);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {string[]} entries each entry path string\n\t * @param {string} name name of the entry\n\t * @returns {MultiEntryDependency} returns a constructed Dependency\n\t */\n\tstatic createDependency(entries, name) {\n\t\treturn new MultiEntryDependency(\n\t\t\tentries.map((e, idx) => {\n\t\t\t\tconst dep = new SingleEntryDependency(e);\n\t\t\t\t// Because entrypoints are not dependencies found in an\n\t\t\t\t// existing module, we give it a synthetic id\n\t\t\t\tdep.loc = {\n\t\t\t\t\tname,\n\t\t\t\t\tindex: idx\n\t\t\t\t};\n\t\t\t\treturn dep;\n\t\t\t}),\n\t\t\tname\n\t\t);\n\t}\n}\n\nmodule.exports = MultiEntryPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,qCAAqC,CAAC;AAC3E,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AAC7E,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAsB,CAAC;;AAE1D;;AAEA,MAAMG,gBAAgB,CAAC;EACtB;AACD;AACA;AACA;AACA;AACA;EACCC,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAE;IACnC,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;EACjB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,kBAAkB,EAClB,CAACD,WAAW,EAAE;MAAEE;IAAoB,CAAC,KAAK;MACzC,MAAMC,kBAAkB,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;MAEnDS,WAAW,CAACI,mBAAmB,CAACC,GAAG,CAClCjB,oBAAoB,EACpBe,kBACD,CAAC;MACDH,WAAW,CAACI,mBAAmB,CAACC,GAAG,CAClCf,qBAAqB,EACrBY,mBACD,CAAC;IACF,CACD,CAAC;IAEDJ,QAAQ,CAACC,KAAK,CAACO,IAAI,CAACC,QAAQ,CAC3B,kBAAkB,EAClB,CAACP,WAAW,EAAEQ,QAAQ,KAAK;MAC1B,MAAM;QAAEd,OAAO;QAAEC,OAAO;QAAEC;MAAK,CAAC,GAAG,IAAI;MAEvC,MAAMa,GAAG,GAAGjB,gBAAgB,CAACkB,gBAAgB,CAACf,OAAO,EAAEC,IAAI,CAAC;MAC5DI,WAAW,CAACW,QAAQ,CAACjB,OAAO,EAAEe,GAAG,EAAEb,IAAI,EAAEY,QAAQ,CAAC;IACnD,CACD,CAAC;EACF;;EAEA;AACD;AACA;AACA;AACA;EACC,OAAOE,gBAAgBA,CAACf,OAAO,EAAEC,IAAI,EAAE;IACtC,OAAO,IAAIR,oBAAoB,CAC9BO,OAAO,CAACiB,GAAG,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAK;MACvB,MAAML,GAAG,GAAG,IAAInB,qBAAqB,CAACuB,CAAC,CAAC;MACxC;MACA;MACAJ,GAAG,CAACM,GAAG,GAAG;QACTnB,IAAI;QACJoB,KAAK,EAAEF;MACR,CAAC;MACD,OAAOL,GAAG;IACX,CAAC,CAAC,EACFb,IACD,CAAC;EACF;AACD;AAEAqB,MAAM,CAACC,OAAO,GAAG1B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script"}