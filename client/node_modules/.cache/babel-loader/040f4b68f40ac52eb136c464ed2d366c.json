{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\nconst RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\nconst getFunctionExpression = require(\"./getFunctionExpression\");\nmodule.exports = class RequireEnsureDependenciesBlockParserPlugin {\n  apply(parser) {\n    parser.hooks.call.for(\"require.ensure\").tap(\"RequireEnsureDependenciesBlockParserPlugin\", expr => {\n      let chunkName = null;\n      let chunkNameRange = null;\n      let errorExpressionArg = null;\n      let errorExpression = null;\n      switch (expr.arguments.length) {\n        case 4:\n          {\n            const chunkNameExpr = parser.evaluateExpression(expr.arguments[3]);\n            if (!chunkNameExpr.isString()) return;\n            chunkNameRange = chunkNameExpr.range;\n            chunkName = chunkNameExpr.string;\n          }\n        // falls through\n        case 3:\n          {\n            errorExpressionArg = expr.arguments[2];\n            errorExpression = getFunctionExpression(errorExpressionArg);\n            if (!errorExpression && !chunkName) {\n              const chunkNameExpr = parser.evaluateExpression(expr.arguments[2]);\n              if (!chunkNameExpr.isString()) return;\n              chunkNameRange = chunkNameExpr.range;\n              chunkName = chunkNameExpr.string;\n            }\n          }\n        // falls through\n        case 2:\n          {\n            const dependenciesExpr = parser.evaluateExpression(expr.arguments[0]);\n            const dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];\n            const successExpressionArg = expr.arguments[1];\n            const successExpression = getFunctionExpression(successExpressionArg);\n            if (successExpression) {\n              parser.walkExpressions(successExpression.expressions);\n            }\n            if (errorExpression) {\n              parser.walkExpressions(errorExpression.expressions);\n            }\n            const dep = new RequireEnsureDependenciesBlock(expr, successExpression ? successExpression.fn : successExpressionArg, errorExpression ? errorExpression.fn : errorExpressionArg, chunkName, chunkNameRange, parser.state.module, expr.loc);\n            const old = parser.state.current;\n            parser.state.current = dep;\n            try {\n              let failed = false;\n              parser.inScope([], () => {\n                for (const ee of dependenciesItems) {\n                  if (ee.isString()) {\n                    const edep = new RequireEnsureItemDependency(ee.string);\n                    edep.loc = dep.loc;\n                    dep.addDependency(edep);\n                  } else {\n                    failed = true;\n                  }\n                }\n              });\n              if (failed) {\n                return;\n              }\n              if (successExpression) {\n                if (successExpression.fn.body.type === \"BlockStatement\") {\n                  parser.walkStatement(successExpression.fn.body);\n                } else {\n                  parser.walkExpression(successExpression.fn.body);\n                }\n              }\n              old.addBlock(dep);\n            } finally {\n              parser.state.current = old;\n            }\n            if (!successExpression) {\n              parser.walkExpression(successExpressionArg);\n            }\n            if (errorExpression) {\n              if (errorExpression.fn.body.type === \"BlockStatement\") {\n                parser.walkStatement(errorExpression.fn.body);\n              } else {\n                parser.walkExpression(errorExpression.fn.body);\n              }\n            } else if (errorExpressionArg) {\n              parser.walkExpression(errorExpressionArg);\n            }\n            return true;\n          }\n      }\n    });\n  }\n};","map":{"version":3,"names":["RequireEnsureDependenciesBlock","require","RequireEnsureItemDependency","getFunctionExpression","module","exports","RequireEnsureDependenciesBlockParserPlugin","apply","parser","hooks","call","for","tap","expr","chunkName","chunkNameRange","errorExpressionArg","errorExpression","arguments","length","chunkNameExpr","evaluateExpression","isString","range","string","dependenciesExpr","dependenciesItems","isArray","items","successExpressionArg","successExpression","walkExpressions","expressions","dep","fn","state","loc","old","current","failed","inScope","ee","edep","addDependency","body","type","walkStatement","walkExpression","addBlock"],"sources":["/home/soon/bulletin-board/node_modules/webpack/lib/dependencies/RequireEnsureDependenciesBlockParserPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\nconst RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\nconst getFunctionExpression = require(\"./getFunctionExpression\");\n\nmodule.exports = class RequireEnsureDependenciesBlockParserPlugin {\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"require.ensure\")\n\t\t\t.tap(\"RequireEnsureDependenciesBlockParserPlugin\", expr => {\n\t\t\t\tlet chunkName = null;\n\t\t\t\tlet chunkNameRange = null;\n\t\t\t\tlet errorExpressionArg = null;\n\t\t\t\tlet errorExpression = null;\n\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\tcase 4: {\n\t\t\t\t\t\tconst chunkNameExpr = parser.evaluateExpression(expr.arguments[3]);\n\t\t\t\t\t\tif (!chunkNameExpr.isString()) return;\n\t\t\t\t\t\tchunkNameRange = chunkNameExpr.range;\n\t\t\t\t\t\tchunkName = chunkNameExpr.string;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 3: {\n\t\t\t\t\t\terrorExpressionArg = expr.arguments[2];\n\t\t\t\t\t\terrorExpression = getFunctionExpression(errorExpressionArg);\n\n\t\t\t\t\t\tif (!errorExpression && !chunkName) {\n\t\t\t\t\t\t\tconst chunkNameExpr = parser.evaluateExpression(\n\t\t\t\t\t\t\t\texpr.arguments[2]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!chunkNameExpr.isString()) return;\n\t\t\t\t\t\t\tchunkNameRange = chunkNameExpr.range;\n\t\t\t\t\t\t\tchunkName = chunkNameExpr.string;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 2: {\n\t\t\t\t\t\tconst dependenciesExpr = parser.evaluateExpression(\n\t\t\t\t\t\t\texpr.arguments[0]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dependenciesItems = dependenciesExpr.isArray()\n\t\t\t\t\t\t\t? dependenciesExpr.items\n\t\t\t\t\t\t\t: [dependenciesExpr];\n\t\t\t\t\t\tconst successExpressionArg = expr.arguments[1];\n\t\t\t\t\t\tconst successExpression = getFunctionExpression(\n\t\t\t\t\t\t\tsuccessExpressionArg\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (successExpression) {\n\t\t\t\t\t\t\tparser.walkExpressions(successExpression.expressions);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errorExpression) {\n\t\t\t\t\t\t\tparser.walkExpressions(errorExpression.expressions);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst dep = new RequireEnsureDependenciesBlock(\n\t\t\t\t\t\t\texpr,\n\t\t\t\t\t\t\tsuccessExpression ? successExpression.fn : successExpressionArg,\n\t\t\t\t\t\t\terrorExpression ? errorExpression.fn : errorExpressionArg,\n\t\t\t\t\t\t\tchunkName,\n\t\t\t\t\t\t\tchunkNameRange,\n\t\t\t\t\t\t\tparser.state.module,\n\t\t\t\t\t\t\texpr.loc\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst old = parser.state.current;\n\t\t\t\t\t\tparser.state.current = dep;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlet failed = false;\n\t\t\t\t\t\t\tparser.inScope([], () => {\n\t\t\t\t\t\t\t\tfor (const ee of dependenciesItems) {\n\t\t\t\t\t\t\t\t\tif (ee.isString()) {\n\t\t\t\t\t\t\t\t\t\tconst edep = new RequireEnsureItemDependency(ee.string);\n\t\t\t\t\t\t\t\t\t\tedep.loc = dep.loc;\n\t\t\t\t\t\t\t\t\t\tdep.addDependency(edep);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tfailed = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (failed) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (successExpression) {\n\t\t\t\t\t\t\t\tif (successExpression.fn.body.type === \"BlockStatement\") {\n\t\t\t\t\t\t\t\t\tparser.walkStatement(successExpression.fn.body);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tparser.walkExpression(successExpression.fn.body);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\told.addBlock(dep);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tparser.state.current = old;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!successExpression) {\n\t\t\t\t\t\t\tparser.walkExpression(successExpressionArg);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errorExpression) {\n\t\t\t\t\t\t\tif (errorExpression.fn.body.type === \"BlockStatement\") {\n\t\t\t\t\t\t\t\tparser.walkStatement(errorExpression.fn.body);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparser.walkExpression(errorExpression.fn.body);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (errorExpressionArg) {\n\t\t\t\t\t\t\tparser.walkExpression(errorExpressionArg);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}